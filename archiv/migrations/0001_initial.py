# Generated by Django 2.2.6 on 2019-10-14 14:58

import django.contrib.postgres.fields.ranges
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('vocabs', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_actor_access_skosconcept', to='vocabs.SkosConcept', verbose_name='Access')),
            ],
            options={
                'verbose_name': 'Actors',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ArchaeologicalObjectID',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('archaeological_object_comment', models.TextField(blank=True, verbose_name='Archaeological object comment')),
                ('digitisation_comment', models.TextField(blank=True, verbose_name='Comment from digitisation')),
                ('archaeological_object_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_archaeologicalobjectid_archaeological_object_type_skosconcept', to='vocabs.SkosConcept', verbose_name='Archaeological object type')),
                ('corresponding_to_archaeological_object_id', models.ManyToManyField(blank=True, related_name='rvn_archaeologicalobjectid_corresponding_to_archaeological_object_id_archaeologicalobjectid', to='archiv.ArchaeologicalObjectID', verbose_name='Corresponding to archaeological object ID')),
                ('creator_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_archaeologicalobjectid_creator_metadata_actor', to='archiv.Actor', verbose_name='Creator of metadata')),
            ],
            options={
                'verbose_name': 'ArchaeologicalObjectID',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='BoneInventoryNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
            ],
            options={
                'verbose_name': 'BoneInventoryNumber',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ConvoluteInventoryNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
            ],
            options={
                'verbose_name': 'ConvoluteInventoryNumber',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='DocumentTypes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('description', models.TextField(blank=True, help_text='Description of document type.', verbose_name='Description')),
                ('analogue_borndigital', models.ForeignKey(blank=True, help_text='Whether the original document was analogue (and digitised during A Puzzle in 4D project) or born-digital (and converted into durable file format during A Puzzle in 4D project).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_documenttypes_analogue_borndigital_skosconcept', to='vocabs.SkosConcept', verbose_name='Analogue or born-digital')),
            ],
            options={
                'verbose_name': 'Document types',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ExcavationObjectID',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('digitisation_comment', models.TextField(blank=True, help_text='Comments of the metadata creator (e.g. noticing errors, etc.).', verbose_name='Comment from digitisation')),
                ('area', models.ForeignKey(blank=True, help_text='Excavations were carried out in 16 areas: A-I, A-II, A-III, A-IV, A-N, A-V, E-I, F-I, F-II, H-I, H-II, H-III, H-IV, H-V, H-VI, R-I.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_excavationobjectid_area_skosconcept', to='vocabs.SkosConcept', verbose_name='Area')),
                ('creator_metadata', models.ForeignKey(blank=True, help_text='Person who created the metadata or organization where metadata creation was carried out.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_excavationobjectid_creator_metadata_actor', to='archiv.Actor', verbose_name='creator_metadata')),
                ('excavation_object_type', models.ForeignKey(blank=True, help_text='Types of excavation objects: Areal, Detail, Grube, Oberflaeche, Planquadrat, Planum, Profil, Profilsteg, Schnitt, Situation, Sondage, Zwischenplanum.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_excavationobjectid_excavation_object_type_skosconcept', to='vocabs.SkosConcept', verbose_name='Type of Excavation Object')),
                ('planum', models.ForeignKey(blank=True, help_text='Excavations were carried out in spits and a �planum� is an excavation surface. ', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_excavationobjectid_planum_skosconcept', to='vocabs.SkosConcept', verbose_name='Planum')),
            ],
            options={
                'verbose_name': 'Excavation Objects',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ExcavationSeasons',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('start_date_end_date', django.contrib.postgres.fields.ranges.DateRangeField(blank=True, null=True, verbose_name='Start date - end date')),
                ('access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_excavationseasons_access_skosconcept', to='vocabs.SkosConcept', verbose_name='Access')),
                ('season', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_excavationseasons_season_skosconcept', to='vocabs.SkosConcept', verbose_name='Season')),
            ],
            options={
                'verbose_name': 'Excavation Seasons',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Filme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
            ],
            options={
                'verbose_name': 'Filme',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='FindInventoryNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
            ],
            options={
                'verbose_name': 'FindInventoryNumber',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='TDInv4DPuzzleNUMMER',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
            ],
            options={
                'verbose_name': 'TDInv4DPuzzleNUMMER',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='WallpaintingInventory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('creation_date_original', models.DateField(blank=True, null=True, verbose_name='Creation date of original document')),
                ('creation_date_scan', models.DateField(blank=True, null=True, verbose_name='Creation date of scan')),
                ('creation_date_metadata', models.DateField(blank=True, null=True, verbose_name='Creation date of metadata')),
                ('resolution_scan_dpi', models.IntegerField(blank=True, null=True, verbose_name='Scan resolution')),
                ('original_comment', models.TextField(blank=True, verbose_name='Comment on the original document')),
                ('digitisation_comment', models.TextField(blank=True, verbose_name='Comment from digitisation')),
                ('access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_wallpaintinginventory_access_skosconcept', to='vocabs.SkosConcept', verbose_name='Access')),
                ('copyright', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_wallpaintinginventory_copyright_skosconcept', to='vocabs.SkosConcept', verbose_name='Copyright')),
                ('creator_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_wallpaintinginventory_creator_metadata_actor', to='archiv.Actor', verbose_name='Creator of metadata')),
                ('creator_original', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_wallpaintinginventory_creator_original_actor', to='archiv.Actor', verbose_name='Creator of original ')),
                ('creator_scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_wallpaintinginventory_creator_scan_actor', to='archiv.Actor', verbose_name='Creator of scan')),
                ('document_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_wallpaintinginventory_document_type_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type')),
                ('dt_abbr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_wallpaintinginventory_dt_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type abbreviated')),
                ('equipment_scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_wallpaintinginventory_equipment_scan_skosconcept', to='vocabs.SkosConcept', verbose_name='Equipment for scan')),
                ('excavation_post_excavation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_wallpaintinginventory_excavation_post_excavation_skosconcept', to='vocabs.SkosConcept', verbose_name='Whether it was created during excavation or after (post-excavation)')),
                ('file_extension', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_wallpaintinginventory_file_extension_skosconcept', to='vocabs.SkosConcept', verbose_name='File extension ')),
                ('original_material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_wallpaintinginventory_original_material_skosconcept', to='vocabs.SkosConcept', verbose_name='Material of original document')),
                ('site_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_wallpaintinginventory_site_id_skosconcept', to='vocabs.SkosConcept', verbose_name='Site ID')),
                ('source_original_copy_edited_copy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_wallpaintinginventory_source_original_copy_edited_copy_skosconcept', to='vocabs.SkosConcept', verbose_name='Wheter source is a original or a copy')),
            ],
            options={
                'verbose_name': 'Freskeninventar',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Videos',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('creation_date_original', models.DateField(blank=True, null=True, verbose_name='Creation date of original document')),
                ('creation_date_archivalobject', models.DateField(blank=True, null=True, verbose_name='Creation date of archival object')),
                ('creation_date_metadata', models.DateField(blank=True, null=True, verbose_name='Creation date of metadata')),
                ('original_comment', models.TextField(blank=True, verbose_name='Comment on the original document')),
                ('digitisation_comment', models.TextField(blank=True, verbose_name='Comment from digitisation')),
                ('access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_videos_access_skosconcept', to='vocabs.SkosConcept', verbose_name='Access')),
                ('archaeological_object_id', models.ManyToManyField(blank=True, related_name='rvn_videos_archaeological_object_id_archaeologicalobjectid', to='archiv.ArchaeologicalObjectID', verbose_name='Archaeological object ID')),
                ('copyright', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_videos_copyright_skosconcept', to='vocabs.SkosConcept', verbose_name='Copyright')),
                ('creator_archivalobject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_videos_creator_archivalobject_actor', to='archiv.Actor', verbose_name='creator of archival object')),
                ('creator_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_videos_creator_metadata_actor', to='archiv.Actor', verbose_name='Creator of metadata')),
                ('creator_original', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_videos_creator_original_actor', to='archiv.Actor', verbose_name='Creator of original document')),
                ('document_subtype', models.ManyToManyField(blank=True, related_name='rvn_videos_document_subtype_documenttypes', to='archiv.DocumentTypes', verbose_name='Document subtype')),
                ('document_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_videos_document_type_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type')),
                ('dst_abbr', models.ManyToManyField(blank=True, related_name='rvn_videos_dst_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document subtype abbreviated')),
                ('dt_abbr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_videos_dt_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type abbreviated')),
                ('excavation_object_id', models.ManyToManyField(blank=True, related_name='rvn_videos_excavation_object_id_excavationobjectid', to='archiv.ExcavationObjectID', verbose_name='Excavation object ID')),
                ('file_extension_archivalobject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_videos_file_extension_archivalobject_skosconcept', to='vocabs.SkosConcept', verbose_name='File extension of archival object')),
                ('file_extension_original', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_videos_file_extension_original_skosconcept', to='vocabs.SkosConcept', verbose_name='File extension of original document')),
                ('find_inventory_number', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_videos_find_inventory_number_findinventorynumber', to='archiv.FindInventoryNumber', verbose_name='Find inventory number')),
                ('site_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_videos_site_id_skosconcept', to='vocabs.SkosConcept', verbose_name='Site ID')),
            ],
            options={
                'verbose_name': 'Videos',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ThreeDimensionalModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('creation_date_archivalobject', models.DateField(blank=True, null=True, verbose_name='Creation date of archival object')),
                ('creation_date_metadata', models.DateField(blank=True, null=True, verbose_name='Creation date metadata')),
                ('original_comment', models.TextField(blank=True, verbose_name='Comment on the original document')),
                ('digitisation_comment', models.TextField(blank=True, verbose_name='Comment from digitisation')),
                ('access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_threedimensionalmodel_access_skosconcept', to='vocabs.SkosConcept', verbose_name='Access')),
                ('archaeological_object_id', models.ManyToManyField(blank=True, related_name='rvn_threedimensionalmodel_archaeological_object_id_archaeologicalobjectid', to='archiv.ArchaeologicalObjectID', verbose_name='Archaeological object ID')),
                ('copyright', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_threedimensionalmodel_copyright_skosconcept', to='vocabs.SkosConcept', verbose_name='Copyright')),
                ('creator_archivalobject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_threedimensionalmodel_creator_archivalobject_actor', to='archiv.Actor', verbose_name='Creator of archival object')),
                ('creator_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_threedimensionalmodel_creator_metadata_actor', to='archiv.Actor', verbose_name='Creator of metadata')),
                ('creator_original', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_threedimensionalmodel_creator_original_actor', to='archiv.Actor', verbose_name='Creator of original ')),
                ('document_subtype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_threedimensionalmodel_document_subtype_documenttypes', to='archiv.DocumentTypes', verbose_name='Document subtype')),
                ('document_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_threedimensionalmodel_document_type_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type')),
                ('dst_abbr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_threedimensionalmodel_dst_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document subtype abbreviated')),
                ('dt_abbr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_threedimensionalmodel_dt_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type abbreviated')),
                ('excavation_object_id', models.ManyToManyField(blank=True, related_name='rvn_threedimensionalmodel_excavation_object_id_excavationobjectid', to='archiv.ExcavationObjectID', verbose_name='Excavation object ID')),
                ('excavation_post_excavation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_threedimensionalmodel_excavation_post_excavation_skosconcept', to='vocabs.SkosConcept', verbose_name='Whether it was created during excavation or after (post-excavation)Whether it was created during excavation or after')),
                ('file_extension_archivalobject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_threedimensionalmodel_file_extension_archivalobject_skosconcept', to='vocabs.SkosConcept', verbose_name='File extension of archival data')),
                ('file_extension_original', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_threedimensionalmodel_file_extension_original_skosconcept', to='vocabs.SkosConcept', verbose_name='File extension of original 3D model')),
                ('site_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_threedimensionalmodel_site_id_skosconcept', to='vocabs.SkosConcept', verbose_name='Site ID')),
            ],
            options={
                'verbose_name': '3D models',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Tables',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('creation_date_archivalobject', models.DateField(blank=True, null=True, verbose_name='Creation date of archival object')),
                ('creation_date_metadata', models.DateField(blank=True, null=True, verbose_name='Creation date of metadata')),
                ('original_comment', models.TextField(blank=True, verbose_name='Comment on the original document')),
                ('digitisation_comment', models.TextField(blank=True, verbose_name='Comment from digitisation')),
                ('access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_tables_access_skosconcept', to='vocabs.SkosConcept', verbose_name='Access')),
                ('archaeological_object_id', models.ManyToManyField(blank=True, related_name='rvn_tables_archaeological_object_id_archaeologicalobjectid', to='archiv.ArchaeologicalObjectID', verbose_name='Archaeological object ID')),
                ('copyright', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_tables_copyright_skosconcept', to='vocabs.SkosConcept', verbose_name='Copyright')),
                ('creator_archivalobject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_tables_creator_archivalobject_actor', to='archiv.Actor', verbose_name='creator of archival object')),
                ('creator_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_tables_creator_metadata_actor', to='archiv.Actor', verbose_name='Creator of metadata')),
                ('creator_original', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_tables_creator_original_actor', to='archiv.Actor', verbose_name='Creator of original document')),
                ('document_subtype', models.ManyToManyField(blank=True, related_name='rvn_tables_document_subtype_documenttypes', to='archiv.DocumentTypes', verbose_name='Document subtype')),
                ('document_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_tables_document_type_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type')),
                ('dst_abbr', models.ManyToManyField(blank=True, related_name='rvn_tables_dst_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document subtype abbreviated')),
                ('dt_abbr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_tables_dt_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type abbreviated')),
                ('excavation_object_id', models.ManyToManyField(blank=True, related_name='rvn_tables_excavation_object_id_excavationobjectid', to='archiv.ExcavationObjectID', verbose_name='Excavation object ID')),
                ('excavation_post_excavation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_tables_excavation_post_excavation_skosconcept', to='vocabs.SkosConcept', verbose_name='Whether it was created during excavation or after (post-excavation)')),
                ('file_extension_archivalobject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_tables_file_extension_archivalobject_skosconcept', to='vocabs.SkosConcept', verbose_name='File extension of archival object')),
                ('file_extension_original', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_tables_file_extension_original_skosconcept', to='vocabs.SkosConcept', verbose_name='File extension of original document')),
                ('relatedto', models.ManyToManyField(blank=True, related_name='rvn_tables_relatedto_documenttypes', to='archiv.DocumentTypes', verbose_name='File is related to other TD resources')),
                ('site_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_tables_site_id_skosconcept', to='vocabs.SkosConcept', verbose_name='Site ID')),
            ],
            options={
                'verbose_name': 'Tables',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='StratenID',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('area', models.ManyToManyField(blank=True, related_name='rvn_stratenid_area_excavationobjectid', to='archiv.ExcavationObjectID', verbose_name='Area')),
                ('site_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_stratenid_site_id_skosconcept', to='vocabs.SkosConcept', verbose_name='Site ID')),
                ('stratum_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_stratenid_stratum_type_skosconcept', to='vocabs.SkosConcept', verbose_name='Stratum type')),
            ],
            options={
                'verbose_name': 'Straten ID',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Protocols',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('creation_date_original', models.DateField(blank=True, null=True, verbose_name='Creation date of original document')),
                ('creation_date_scan', models.DateField(blank=True, null=True, verbose_name='Creation date of scan')),
                ('creation_date_metadata', models.DateField(blank=True, null=True, verbose_name='Creation date of metadata')),
                ('resolution_scan_dpi', models.IntegerField(blank=True, null=True, verbose_name='Scan resolution')),
                ('number_of_pages', models.IntegerField(blank=True, null=True, verbose_name='Number of pages')),
                ('original_comment', models.TextField(blank=True, verbose_name='Comment on the original document')),
                ('digitisation_comment', models.TextField(blank=True, verbose_name='Comment from digitisation')),
                ('access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_protocols_access_skosconcept', to='vocabs.SkosConcept', verbose_name='Access')),
                ('archaeological_object_id', models.ManyToManyField(blank=True, related_name='rvn_protocols_archaeological_object_id_archaeologicalobjectid', to='archiv.ArchaeologicalObjectID', verbose_name='Archaeological object ID')),
                ('copyright', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_protocols_copyright_skosconcept', to='vocabs.SkosConcept', verbose_name='Copyright')),
                ('creator_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_protocols_creator_metadata_actor', to='archiv.Actor', verbose_name='Creator of metadata')),
                ('creator_original', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_protocols_creator_original_actor', to='archiv.Actor', verbose_name='Creator of original document')),
                ('creator_scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_protocols_creator_scan_actor', to='archiv.Actor', verbose_name='Creator of scan')),
                ('document_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_protocols_document_type_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type')),
                ('dt_abbr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_protocols_dt_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type abbreviated')),
                ('equipment_scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_protocols_equipment_scan_skosconcept', to='vocabs.SkosConcept', verbose_name='Equipment of scan')),
                ('excavation_object_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_protocols_excavation_object_id_excavationobjectid', to='archiv.ExcavationObjectID', verbose_name='Excavation object ID')),
                ('excavation_post_excavation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_protocols_excavation_post_excavation_skosconcept', to='vocabs.SkosConcept', verbose_name='Whether it was created during excavation or after (post-excavation)')),
                ('file_extension', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_protocols_file_extension_skosconcept', to='vocabs.SkosConcept', verbose_name='File extension')),
                ('original_material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_protocols_original_material_skosconcept', to='vocabs.SkosConcept', verbose_name='Material of original document')),
                ('site_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_protocols_site_id_skosconcept', to='vocabs.SkosConcept', verbose_name='Site ID')),
                ('source_original_copy_edited_copy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_protocols_source_original_copy_edited_copy_skosconcept', to='vocabs.SkosConcept', verbose_name='Wheter source is a original or a copy')),
                ('storage', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_protocols_storage_skosconcept', to='vocabs.SkosConcept', verbose_name='Storage folder of original document')),
            ],
            options={
                'verbose_name': 'Protocols',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='PhasenID',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('area', models.ManyToManyField(blank=True, related_name='rvn_phasenid_area_excavationobjectid', to='archiv.ExcavationObjectID', verbose_name='Area')),
                ('phase_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_phasenid_phase_type_skosconcept', to='vocabs.SkosConcept', verbose_name='Phase type')),
                ('site_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_phasenid_site_id_skosconcept', to='vocabs.SkosConcept', verbose_name='Site ID')),
            ],
            options={
                'verbose_name': 'Phasen ID',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Inventorybooks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('creation_date_original', models.DateField(blank=True, null=True, verbose_name='Creation date of original document')),
                ('creation_date_scan', models.DateField(blank=True, null=True, verbose_name='Creation date of scan')),
                ('creation_date_metadata', models.DateField(blank=True, null=True, verbose_name='Creation date of metadata')),
                ('resolution_scan_dpi', models.IntegerField(blank=True, null=True, verbose_name='Scan resolution')),
                ('original_comment', models.TextField(blank=True, verbose_name='Comment on the original document')),
                ('access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_inventorybooks_access_skosconcept', to='vocabs.SkosConcept', verbose_name='Access')),
                ('bone_stone_inventory_number', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_inventorybooks_bone_stone_inventory_number_boneinventorynumber', to='archiv.BoneInventoryNumber', verbose_name='Bone or stone inventory number')),
                ('convolute_inventory_number', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_inventorybooks_convolute_inventory_number_convoluteinventorynumber', to='archiv.ConvoluteInventoryNumber', verbose_name='Convolute inventory number')),
                ('copyright', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_inventorybooks_copyright_skosconcept', to='vocabs.SkosConcept', verbose_name='Copyright')),
                ('creator_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_inventorybooks_creator_metadata_actor', to='archiv.Actor', verbose_name='Creator of metadata')),
                ('creator_original', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_inventorybooks_creator_original_actor', to='archiv.Actor', verbose_name='Creator of original document')),
                ('creator_scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_inventorybooks_creator_scan_actor', to='archiv.Actor', verbose_name='Creator of scan')),
                ('document_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_inventorybooks_document_type_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type')),
                ('dt_abbr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_inventorybooks_dt_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type abbreviated')),
                ('equipment_scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_inventorybooks_equipment_scan_skosconcept', to='vocabs.SkosConcept', verbose_name='Equipment for scan')),
                ('excavation_post_excavation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_inventorybooks_excavation_post_excavation_skosconcept', to='vocabs.SkosConcept', verbose_name='Whether it was created during excavation or after (post-excavation)')),
                ('file_extension', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_inventorybooks_file_extension_skosconcept', to='vocabs.SkosConcept', verbose_name='File extension')),
                ('find_inventory_number', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_inventorybooks_find_inventory_number_findinventorynumber', to='archiv.FindInventoryNumber', verbose_name='Find inventory number')),
                ('original_material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_inventorybooks_original_material_skosconcept', to='vocabs.SkosConcept', verbose_name='Material of original document')),
                ('site_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_inventorybooks_site_id_skosconcept', to='vocabs.SkosConcept', verbose_name='Site ID')),
                ('source_original_copy_edited_copy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_inventorybooks_source_original_copy_edited_copy_skosconcept', to='vocabs.SkosConcept', verbose_name='Wheter source is a original or a copy')),
            ],
            options={
                'verbose_name': 'Inventory books',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='GIS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('creation_date_original', models.DateField(blank=True, null=True, verbose_name='Creation date of original document')),
                ('creation_date_archivalobject', models.DateField(blank=True, null=True, verbose_name='Creation date of archival object')),
                ('creation_date_metadata', models.DateField(blank=True, null=True, verbose_name='Creation date of metadata')),
                ('original_comment', models.TextField(blank=True, verbose_name='Comment on the original document')),
                ('digitisation_comment', models.TextField(blank=True, verbose_name='Comment from digitisation')),
                ('access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_gis_access_skosconcept', to='vocabs.SkosConcept', verbose_name='Access')),
                ('archaeological_object_id', models.ManyToManyField(blank=True, related_name='rvn_gis_archaeological_object_id_archaeologicalobjectid', to='archiv.ArchaeologicalObjectID', verbose_name='Archaeological object ID')),
                ('copyright', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_gis_copyright_skosconcept', to='vocabs.SkosConcept', verbose_name='Copyright')),
                ('creator_archivalobject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_gis_creator_archivalobject_actor', to='archiv.Actor', verbose_name='creator of archival object')),
                ('creator_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_gis_creator_metadata_actor', to='archiv.Actor', verbose_name='Creator of metadata')),
                ('creator_original', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_gis_creator_original_actor', to='archiv.Actor', verbose_name='Creator of original document')),
                ('document_subtype', models.ManyToManyField(blank=True, related_name='rvn_gis_document_subtype_documenttypes', to='archiv.DocumentTypes', verbose_name='Document subtype')),
                ('document_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_gis_document_type_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type')),
                ('dst_abbr', models.ManyToManyField(blank=True, related_name='rvn_gis_dst_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document subtype abbreviated')),
                ('dt_abbr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_gis_dt_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type abbreviated')),
                ('excavation_object_id', models.ManyToManyField(blank=True, related_name='rvn_gis_excavation_object_id_excavationobjectid', to='archiv.ExcavationObjectID', verbose_name='Excavation object ID')),
                ('excavation_post_excavation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_gis_excavation_post_excavation_skosconcept', to='vocabs.SkosConcept', verbose_name='Whether it was created during excavation or after (post-excavation)')),
                ('file_extension_archivalobject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_gis_file_extension_archivalobject_skosconcept', to='vocabs.SkosConcept', verbose_name='File extension of archival object')),
                ('file_extension_original', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_gis_file_extension_original_skosconcept', to='vocabs.SkosConcept', verbose_name='File extension of original document')),
                ('relatedto', models.ManyToManyField(blank=True, related_name='rvn_gis_relatedto_documenttypes', to='archiv.DocumentTypes', verbose_name='File is related to other TD resources')),
                ('site_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_gis_site_id_skosconcept', to='vocabs.SkosConcept', verbose_name='Site ID')),
            ],
            options={
                'verbose_name': 'GIS',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Geophysics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('creation_date_original', models.DateField(blank=True, null=True, verbose_name='Creation date of original document')),
                ('creation_date_archivalobject', models.DateField(blank=True, null=True, verbose_name='Creation date of archival object')),
                ('creation_date_metadata', models.DateField(blank=True, null=True, verbose_name='Creation date of metadata')),
                ('original_comment', models.TextField(blank=True, verbose_name='Comment on the original document')),
                ('digitisation_comment', models.TextField(blank=True, verbose_name='Comment from digitisation')),
                ('access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_geophysics_access_skosconcept', to='vocabs.SkosConcept', verbose_name='Access')),
                ('copyright', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_geophysics_copyright_skosconcept', to='vocabs.SkosConcept', verbose_name='Copyright')),
                ('creator_archivalobject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_geophysics_creator_archivalobject_actor', to='archiv.Actor', verbose_name='Creator of archival object')),
                ('creator_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_geophysics_creator_metadata_actor', to='archiv.Actor', verbose_name='Creator of metadata')),
                ('creator_original', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_geophysics_creator_original_actor', to='archiv.Actor', verbose_name='Creator of original document')),
                ('document_subtype', models.ManyToManyField(blank=True, related_name='rvn_geophysics_document_subtype_documenttypes', to='archiv.DocumentTypes', verbose_name='Document subtype')),
                ('document_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_geophysics_document_type_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type')),
                ('dst_abbr', models.ManyToManyField(blank=True, related_name='rvn_geophysics_dst_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document subtype abbreviated')),
                ('dt_abbr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_geophysics_dt_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type abbreviated')),
                ('equipment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_geophysics_equipment_skosconcept', to='vocabs.SkosConcept', verbose_name='Equipment')),
                ('excavation_object_id', models.ManyToManyField(blank=True, related_name='rvn_geophysics_excavation_object_id_excavationobjectid', to='archiv.ExcavationObjectID', verbose_name='Excavation object ID')),
                ('excavation_post_excavation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_geophysics_excavation_post_excavation_skosconcept', to='vocabs.SkosConcept', verbose_name='Whether it was created during excavation or after (post-excavation)Whether it was created during excavation or after')),
                ('file_extension_archivalobject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_geophysics_file_extension_archivalobject_skosconcept', to='vocabs.SkosConcept', verbose_name='File extension of archival object')),
                ('file_extension_original', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_geophysics_file_extension_original_skosconcept', to='vocabs.SkosConcept', verbose_name='File extension of original document')),
                ('method', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_geophysics_method_skosconcept', to='vocabs.SkosConcept', verbose_name='Method')),
                ('site_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_geophysics_site_id_skosconcept', to='vocabs.SkosConcept', verbose_name='Site ID')),
            ],
            options={
                'verbose_name': 'Geophysics',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='FundinventarSteininventar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('find_comment', models.TextField(blank=True, verbose_name='Find comment')),
                ('digitisation_comment', models.TextField(blank=True, verbose_name='Comment from digitisation')),
                ('access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fundinventarsteininventar_access_skosconcept', to='vocabs.SkosConcept', verbose_name='Access')),
                ('archaeological_object_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fundinventarsteininventar_archaeological_object_id_excavationobjectid', to='archiv.ExcavationObjectID', verbose_name='Arachaeological object ID')),
                ('creator_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fundinventarsteininventar_creator_metadata_actor', to='archiv.Actor', verbose_name='Creator of metadata')),
                ('excavation_object_id', models.ManyToManyField(blank=True, related_name='rvn_fundinventarsteininventar_excavation_object_id_excavationobjectid', to='archiv.ExcavationObjectID', verbose_name='Excavation object ID')),
                ('find_material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fundinventarsteininventar_find_material_skosconcept', to='vocabs.SkosConcept', verbose_name='Find material')),
                ('find_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fundinventarsteininventar_find_type_skosconcept', to='vocabs.SkosConcept', verbose_name='Find type')),
            ],
            options={
                'verbose_name': 'FundinventarSteininventar',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='FundinventarMaterialproben',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('digitisation_comment', models.TextField(blank=True, verbose_name='Comment from digitisation')),
                ('access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fundinventarmaterialproben_access_skosconcept', to='vocabs.SkosConcept', verbose_name='Access')),
                ('archaeological_object_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fundinventarmaterialproben_archaeological_object_id_excavationobjectid', to='archiv.ExcavationObjectID', verbose_name='Arachaeological object ID')),
                ('creator_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fundinventarmaterialproben_creator_metadata_actor', to='archiv.Actor', verbose_name='Creator of metadata')),
                ('excavation_object_id', models.ManyToManyField(blank=True, related_name='rvn_fundinventarmaterialproben_excavation_object_id_excavationobjectid', to='archiv.ExcavationObjectID', verbose_name='Excavation object ID')),
                ('find_material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fundinventarmaterialproben_find_material_skosconcept', to='vocabs.SkosConcept', verbose_name='Find material')),
                ('find_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fundinventarmaterialproben_find_type_skosconcept', to='vocabs.SkosConcept', verbose_name='Find type')),
                ('relatedto', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fundinventarmaterialproben_relatedto_tdinv4dpuzzlenummer', to='archiv.TDInv4DPuzzleNUMMER', verbose_name='File is related to other TD resources')),
            ],
            options={
                'verbose_name': 'Fundinventar Materialproben',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='FundinventarKonvolutnummern',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('digitisation_comment', models.TextField(blank=True, verbose_name='Comment from digitisation')),
                ('access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fundinventarkonvolutnummern_access_skosconcept', to='vocabs.SkosConcept', verbose_name='Access')),
                ('archaeological_object_id', models.ManyToManyField(blank=True, related_name='rvn_fundinventarkonvolutnummern_archaeological_object_id_archaeologicalobjectid', to='archiv.ArchaeologicalObjectID', verbose_name='Archaeological object ID')),
                ('creator_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fundinventarkonvolutnummern_creator_metadata_skosconcept', to='vocabs.SkosConcept', verbose_name='Creator of metadata')),
                ('excavation_object_id', models.ManyToManyField(blank=True, related_name='rvn_fundinventarkonvolutnummern_excavation_object_id_excavationobjectid', to='archiv.ExcavationObjectID', verbose_name='Excavation object ID')),
            ],
            options={
                'verbose_name': 'Fundinventar Konvolutnummern',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='FundinventarInventarnummern',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('find_comment', models.TextField(blank=True, verbose_name='Find comment')),
                ('digitisation_comment', models.TextField(blank=True, verbose_name='Comment from digitisation')),
                ('access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fundinventarinventarnummern_access_skosconcept', to='vocabs.SkosConcept', verbose_name='Access')),
                ('archaeological_object_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fundinventarinventarnummern_archaeological_object_id_archaeologicalobjectid', to='archiv.ArchaeologicalObjectID', verbose_name='Archaeological object ID')),
                ('creator_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fundinventarinventarnummern_creator_metadata_actor', to='archiv.Actor', verbose_name='Creator of metadata')),
                ('excavation_object_id', models.ManyToManyField(blank=True, related_name='rvn_fundinventarinventarnummern_excavation_object_id_excavationobjectid', to='archiv.ExcavationObjectID', verbose_name='Excavation object ID')),
                ('find_material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fundinventarinventarnummern_find_material_skosconcept', to='vocabs.SkosConcept', verbose_name='Find material')),
                ('find_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fundinventarinventarnummern_find_type_skosconcept', to='vocabs.SkosConcept', verbose_name='Find type')),
                ('uncertainty_excavation_digitisation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fundinventarinventarnummern_uncertainty_excavation_digitisation_skosconcept', to='vocabs.SkosConcept', verbose_name='Whether it was created during excavation or digital')),
            ],
            options={
                'verbose_name': 'Fundinventar Inventarnummern',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Fundinventar4DPuzzleID',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('find_comment', models.TextField(blank=True, verbose_name='Find comment')),
                ('digitisation_comment', models.TextField(blank=True, verbose_name='Comment from digitisation')),
                ('access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fundinventar4dpuzzleid_access_skosconcept', to='vocabs.SkosConcept', verbose_name='Access')),
                ('creator_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fundinventar4dpuzzleid_creator_metadata_skosconcept', to='vocabs.SkosConcept', verbose_name='Creator of metadata')),
                ('excavation_object_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fundinventar4dpuzzleid_excavation_object_id_excavationobjectid', to='archiv.ExcavationObjectID', verbose_name='Excavation object ID')),
                ('find_material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fundinventar4dpuzzleid_find_material_skosconcept', to='vocabs.SkosConcept', verbose_name='Find material')),
                ('find_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fundinventar4dpuzzleid_find_type_skosconcept', to='vocabs.SkosConcept', verbose_name='Find type')),
                ('uncertainty_excavation_digitisation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fundinventar4dpuzzleid_uncertainty_excavation_digitisation_skosconcept', to='vocabs.SkosConcept', verbose_name='Whether it was created during excavation or digital')),
            ],
            options={
                'verbose_name': 'Fundinventar 4DPuzzle ID',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Fotosgescannt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('film_number', models.IntegerField(blank=True, null=True, verbose_name='Film number')),
                ('photo_number', models.IntegerField(blank=True, null=True, verbose_name='Photo number')),
                ('creation_date_original', models.DateField(blank=True, null=True, verbose_name='Creation date of original document')),
                ('creation_date_scan', models.DateField(blank=True, null=True, verbose_name='Creation date of scan')),
                ('creation_date_metadata', models.DateField(blank=True, null=True, verbose_name='Creation date of metadata')),
                ('resolution_scan_ppi', models.IntegerField(blank=True, null=True, verbose_name='Resolution of scan')),
                ('original_comment', models.TextField(blank=True, verbose_name='Comment on the original document')),
                ('digitisation_comment', models.TextField(blank=True, verbose_name='Comment from digitisation')),
                ('access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fotosgescannt_access_skosconcept', to='vocabs.SkosConcept', verbose_name='Access')),
                ('archaeological_object_id', models.ManyToManyField(blank=True, related_name='rvn_fotosgescannt_archaeological_object_id_archaeologicalobjectid', to='archiv.ArchaeologicalObjectID', verbose_name='Archaeological object ID')),
                ('archaeological_object_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fotosgescannt_archaeological_object_type_skosconcept', to='vocabs.SkosConcept', verbose_name='Archeological object type')),
                ('copyright', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fotosgescannt_copyright_skosconcept', to='vocabs.SkosConcept', verbose_name='Copyright')),
                ('creator_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fotosgescannt_creator_metadata_actor', to='archiv.Actor', verbose_name='Creator of metadata')),
                ('creator_original', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fotosgescannt_creator_original_actor', to='archiv.Actor', verbose_name='Creator of original')),
                ('creator_scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fotosgescannt_creator_scan_actor', to='archiv.Actor', verbose_name='Creator of scan')),
                ('document_subtype', models.ManyToManyField(blank=True, related_name='rvn_fotosgescannt_document_subtype_documenttypes', to='archiv.DocumentTypes', verbose_name='Document subtype')),
                ('document_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fotosgescannt_document_type_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type')),
                ('dst_abbreviation', models.ManyToManyField(blank=True, related_name='rvn_fotosgescannt_dst_abbreviation_documenttypes', to='archiv.DocumentTypes', verbose_name='Document subtype abbreviated')),
                ('dt_abbr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fotosgescannt_dt_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type abbreviated')),
                ('equipment_scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fotosgescannt_equipment_scan_skosconcept', to='vocabs.SkosConcept', verbose_name='Equipment for scan')),
                ('excavation_object_id', models.ManyToManyField(blank=True, related_name='rvn_fotosgescannt_excavation_object_id_excavationobjectid', to='archiv.ExcavationObjectID', verbose_name='Excavation object ID')),
                ('excavation_post_excavation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fotosgescannt_excavation_post_excavation_skosconcept', to='vocabs.SkosConcept', verbose_name='Whether it was created during excavation or after (post-excavation)Whether it was created during excavation or after')),
                ('file_extension', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fotosgescannt_file_extension_skosconcept', to='vocabs.SkosConcept', verbose_name='File extension')),
                ('film_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fotosgescannt_film_id_filme', to='archiv.Filme', verbose_name='Film ID')),
                ('find_material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fotosgescannt_find_material_skosconcept', to='vocabs.SkosConcept', verbose_name='Find material')),
                ('find_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fotosgescannt_find_type_skosconcept', to='vocabs.SkosConcept', verbose_name='Find type')),
                ('site_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fotosgescannt_site_id_skosconcept', to='vocabs.SkosConcept', verbose_name='Site ID')),
                ('source_original_copy_edited_copy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fotosgescannt_source_original_copy_edited_copy_skosconcept', to='vocabs.SkosConcept', verbose_name='Wheter source is a original or a copy')),
            ],
            options={
                'verbose_name': 'Fotos gescannt',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Fotoborndigital',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('creation_date_metadata', models.DateField(blank=True, null=True, verbose_name='Creation date metadata')),
                ('original_comment', models.TextField(blank=True, verbose_name='Comment on the original document')),
                ('digitisation_comment', models.TextField(blank=True, verbose_name='Comment from digitisation')),
                ('access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fotoborndigital_access_skosconcept', to='vocabs.SkosConcept', verbose_name='Access')),
                ('copyright', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fotoborndigital_copyright_skosconcept', to='vocabs.SkosConcept', verbose_name='Copyright')),
                ('creator_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fotoborndigital_creator_metadata_actor', to='archiv.Actor', verbose_name='Creator of metadata')),
                ('document_subtype', models.ManyToManyField(blank=True, related_name='rvn_fotoborndigital_document_subtype_documenttypes', to='archiv.DocumentTypes', verbose_name='Document subtype')),
                ('document_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fotoborndigital_document_type_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type')),
                ('dst_abbr', models.ManyToManyField(blank=True, related_name='rvn_fotoborndigital_dst_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document subtype abbreviated')),
                ('dt_abbr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fotoborndigital_dt_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type abbreviated')),
                ('excavation_object_id', models.ManyToManyField(blank=True, related_name='rvn_fotoborndigital_excavation_object_id_excavationobjectid', to='archiv.ExcavationObjectID', verbose_name='Excavation object ID')),
                ('site_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fotoborndigital_site_id_skosconcept', to='vocabs.SkosConcept', verbose_name='Site ID')),
            ],
            options={
                'verbose_name': 'Fotos born digital',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Findsheets',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('creation_date_original', models.DateField(blank=True, null=True, verbose_name='Creation date of original document')),
                ('creation_date_scan', models.DateField(blank=True, null=True, verbose_name='Creation date of scan')),
                ('creation_date_metadata', models.DateField(blank=True, null=True, verbose_name='Creation date of metadata')),
                ('resolution_scan_dpi', models.IntegerField(blank=True, null=True, verbose_name='Scan resolution')),
                ('original_comment', models.TextField(blank=True, verbose_name='Comment on the original document')),
                ('digitisation_comment', models.TextField(blank=True, verbose_name='Comment from digitisation')),
                ('access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_findsheets_access_skosconcept', to='vocabs.SkosConcept', verbose_name='Access')),
                ('archaeological_object_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_findsheets_archaeological_object_id_archaeologicalobjectid', to='archiv.ArchaeologicalObjectID', verbose_name='Archaeological object ID')),
                ('bone_stone_inventory_number', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_findsheets_bone_stone_inventory_number_boneinventorynumber', to='archiv.BoneInventoryNumber', verbose_name='Bone or stone inventory number')),
                ('convolute_inventory_number', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_findsheets_convolute_inventory_number_convoluteinventorynumber', to='archiv.ConvoluteInventoryNumber', verbose_name='Convolute inventory number')),
                ('copyright', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_findsheets_copyright_skosconcept', to='vocabs.SkosConcept', verbose_name='Copyright')),
                ('creator_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_findsheets_creator_metadata_actor', to='archiv.Actor', verbose_name='Creator of metadata')),
                ('creator_original', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_findsheets_creator_original_actor', to='archiv.Actor', verbose_name='Creator of original document')),
                ('creator_scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_findsheets_creator_scan_actor', to='archiv.Actor', verbose_name='Creator of scan')),
                ('document_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_findsheets_document_type_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type')),
                ('dt_abbr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_findsheets_dt_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type abbreviated')),
                ('equipment_scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_findsheets_equipment_scan_skosconcept', to='vocabs.SkosConcept', verbose_name='Equipment for scan')),
                ('excavation_object_id', models.ManyToManyField(blank=True, related_name='rvn_findsheets_excavation_object_id_excavationobjectid', to='archiv.ExcavationObjectID', verbose_name='Excavation object ID')),
                ('excavation_post_excavation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_findsheets_excavation_post_excavation_skosconcept', to='vocabs.SkosConcept', verbose_name='Whether it was created during excavation or after (post-excavation)')),
                ('file_extension', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_findsheets_file_extension_skosconcept', to='vocabs.SkosConcept', verbose_name='File extension ')),
                ('find_inventory_number', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_findsheets_find_inventory_number_findinventorynumber', to='archiv.FindInventoryNumber', verbose_name='Find inventory number')),
                ('original_material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_findsheets_original_material_skosconcept', to='vocabs.SkosConcept', verbose_name='Material of original document')),
                ('site_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_findsheets_site_id_skosconcept', to='vocabs.SkosConcept', verbose_name='Site ID')),
                ('source_original_copy_edited_copy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_findsheets_source_original_copy_edited_copy_skosconcept', to='vocabs.SkosConcept', verbose_name='Wheter source is a original or a copy')),
                ('storage_original', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_findsheets_storage_original_skosconcept', to='vocabs.SkosConcept', verbose_name='Storage of original document')),
            ],
            options={
                'verbose_name': 'Findsheets',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Finddrawing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('creation_date_original', models.DateField(blank=True, null=True, verbose_name='Creation date of original document')),
                ('creation_date_scan', models.DateField(blank=True, null=True, verbose_name='Creation date of scan')),
                ('creation_date_metadata', models.DateField(blank=True, null=True, verbose_name='Creation date of metadata')),
                ('resolution_scan_dpi', models.IntegerField(blank=True, null=True, verbose_name='Scan resolution')),
                ('find_date', models.DateField(blank=True, null=True, verbose_name='Find datum')),
                ('original_comment', models.TextField(blank=True, verbose_name='Comment on the original document')),
                ('digitisation_comment', models.TextField(blank=True, verbose_name='Comment from digitisation')),
                ('access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_finddrawing_access_skosconcept', to='vocabs.SkosConcept', verbose_name='Access')),
                ('bone_stone_inventory_number', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_finddrawing_bone_stone_inventory_number_boneinventorynumber', to='archiv.BoneInventoryNumber', verbose_name='Bone or stone inventory number')),
                ('convolute_inventory_number', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_finddrawing_convolute_inventory_number_convoluteinventorynumber', to='archiv.ConvoluteInventoryNumber', verbose_name='Convolute inventory number')),
                ('copyright', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_finddrawing_copyright_skosconcept', to='vocabs.SkosConcept', verbose_name='Copyright')),
                ('creator_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_finddrawing_creator_metadata_actor', to='archiv.Actor', verbose_name='Creator of metadata')),
                ('creator_original', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_finddrawing_creator_original_actor', to='archiv.Actor', verbose_name='Creator of original document')),
                ('creator_scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_finddrawing_creator_scan_actor', to='archiv.Actor', verbose_name='Creator of scan')),
                ('document_subtype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_finddrawing_document_subtype_documenttypes', to='archiv.DocumentTypes', verbose_name='Document subtype')),
                ('document_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_finddrawing_document_type_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type')),
                ('dst_abbr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_finddrawing_dst_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document subtype abbreviated')),
                ('dt_abbr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_finddrawing_dt_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type abbreviated')),
                ('excavation_post_excavation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_finddrawing_excavation_post_excavation_skosconcept', to='vocabs.SkosConcept', verbose_name='Whether it was created during excavation or after (post-excavation)')),
                ('file_extension', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_finddrawing_file_extension_skosconcept', to='vocabs.SkosConcept', verbose_name='File extension ')),
                ('find_inventory_number', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_finddrawing_find_inventory_number_findinventorynumber', to='archiv.FindInventoryNumber', verbose_name='Find inventory number')),
                ('original_material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_finddrawing_original_material_skosconcept', to='vocabs.SkosConcept', verbose_name='Material of original document')),
                ('site_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_finddrawing_site_id_skosconcept', to='vocabs.SkosConcept', verbose_name='Site ID')),
                ('source_original_copy_edited_copy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_finddrawing_source_original_copy_edited_copy_skosconcept', to='vocabs.SkosConcept', verbose_name='Wheter source is a original or a copy')),
            ],
            options={
                'verbose_name': 'Finddrawing',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Film',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('film_number', models.IntegerField(blank=True, null=True, verbose_name='Film number')),
                ('creation_date_metadata', models.DateField(blank=True, null=True, verbose_name='Creation date metadata')),
                ('decomposition_phenomenon', models.TextField(blank=True, verbose_name='Decomposition phenomenon')),
                ('original_comment', models.TextField(blank=True, verbose_name='Comment on the original document')),
                ('digitisation_comment', models.TextField(blank=True, verbose_name='Comment from digitisation')),
                ('creation_year_original', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_film_creation_year_original_excavationseasons', to='archiv.ExcavationSeasons', verbose_name='Creation year original')),
                ('creator_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_film_creator_metadata_actor', to='archiv.Actor', verbose_name='Creator of metadata')),
                ('document_subtype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_film_document_subtype_documenttypes', to='archiv.DocumentTypes', verbose_name='Document subtype')),
                ('document_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_film_document_type_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type')),
                ('dst_abbr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_film_dst_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document subtype abbreviated')),
                ('dt_abbr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_film_dt_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type abbreviated')),
                ('equipment_camera_brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_film_equipment_camera_brand_skosconcept', to='vocabs.SkosConcept', verbose_name='Equipment camera brand')),
                ('film_brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_film_film_brand_skosconcept', to='vocabs.SkosConcept', verbose_name='Film brand')),
                ('film_format', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_film_film_format_skosconcept', to='vocabs.SkosConcept', verbose_name='Film format')),
                ('original_material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_film_original_material_skosconcept', to='vocabs.SkosConcept', verbose_name='Material of original document')),
            ],
            options={
                'verbose_name': 'Photographic Film',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Fielddrawing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('creation_date_original', models.DateField(blank=True, help_text='Date when the field drawing was made.', null=True, verbose_name='Creation date of original document')),
                ('creation_date_scan', models.DateField(blank=True, help_text='Date when the scan was made.', null=True, verbose_name='Creation date scan')),
                ('creation_date_metadata', models.DateField(blank=True, help_text='Date when metadata was created.', null=True, verbose_name='Creation date metadata')),
                ('resolution_scan_ppi', models.IntegerField(blank=True, help_text='Scan resolution settings. Our standard for scanning field drawings is 600 ppi.', null=True, verbose_name='Scan resolution')),
                ('stratum_comment', models.TextField(blank=True, help_text='Transcript of the handwritten comments and notes on the stratum written on the field drawing. ', verbose_name='Stratum (comment)')),
                ('original_comment', models.TextField(blank=True, help_text='Transcript of additional information found on the field drawing.', verbose_name='Comment on the original document')),
                ('digitisation_comment', models.TextField(blank=True, help_text='Comments of the creator of the scan (e.g. noticing of measurement errors, etc.) ', verbose_name='Comment from digitisation')),
                ('access', models.ForeignKey(blank=True, help_text='Access is either restricted or open to the public.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fielddrawing_access_skosconcept', to='vocabs.SkosConcept', verbose_name='Access')),
                ('amendment_drawn_by', models.ManyToManyField(blank=True, help_text='Person who made amendments to the field drawing.', related_name='rvn_fielddrawing_amendment_drawn_by_actor', to='archiv.Actor', verbose_name='Drawer of amendment to the fielddrawing')),
                ('archaeological_object_id', models.ManyToManyField(blank=True, help_text='The unique identifier of an archaeological object. Archaeological objects are all objects that were created in the past, e.g. in the Bronze Age. An archaeological object ID contains the abbreviation of site_area_square trench_name of archaeological object (e.g.: TD_F-I_o19_Grab1 means Tell el-Daba, area F-I, square o19, grave 1).', related_name='rvn_fielddrawing_archaeological_object_id_archaeologicalobjectid', to='archiv.ArchaeologicalObjectID', verbose_name='Archaeological object ID')),
                ('copyright', models.ForeignKey(blank=True, help_text='Copyright holder of the document. The copyright of the field drawings is held by the OEAI (�sterreichisches Arch�ologisches Institut/Austrian Archaeological Institute).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fielddrawing_copyright_skosconcept', to='vocabs.SkosConcept', verbose_name='Copyright')),
                ('creation_year_original', models.ForeignKey(blank=True, help_text='Year when the field drawing was made.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fielddrawing_creation_year_original_excavationseasons', to='archiv.ExcavationSeasons', verbose_name='Creation year of original document')),
                ('creator_metadata', models.ManyToManyField(blank=True, help_text='Person who created the metadata.', related_name='rvn_fielddrawing_creator_metadata_actor', to='archiv.Actor', verbose_name='Creator of metadata')),
                ('creator_original', models.ManyToManyField(blank=True, help_text='Person who created the original field drawing.', related_name='rvn_fielddrawing_creator_original_actor', to='archiv.Actor', verbose_name='Creator of original')),
                ('creator_scan', models.ForeignKey(blank=True, help_text='Organisation where the scanning was done.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fielddrawing_creator_scan_skosconcept', to='vocabs.SkosConcept', verbose_name='Creator of scan')),
                ('document_subtype', models.ManyToManyField(blank=True, help_text='Type of field drawing. It is either �Planum� (field drawing of a level in a square, scale 1:50), �Profil� (field drawing of a section, scale 1:50), �Detail� (field drawing of an important part of the archaeological evidence, scale 1:20), �Sondage� (field drawing of a level in a test pit), �Skizze� (a sketch) or �Stratum�.', related_name='rvn_fielddrawing_document_subtype_documenttypes', to='archiv.DocumentTypes', verbose_name='Document subtype')),
                ('document_type', models.ForeignKey(blank=True, help_text='Type of document � for field drawing metadata this is always �Feldzeichnung� (Fielddrawing).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fielddrawing_document_type_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type')),
                ('drawer_monogram', models.ManyToManyField(blank=True, help_text='Monogram of the person who drew the field drawing.  ', related_name='rvn_fielddrawing_drawer_monogram_actor', to='archiv.Actor', verbose_name='Monogram of drawer')),
                ('dst_abbr', models.ManyToManyField(blank=True, help_text='Abbreviation of the document subtype: �Planum� (PL), �Profil� (PR), �Detail� (DZ), �Sondage� (SON), �Stratum� (ST) or �Skizze� (SK).', related_name='rvn_fielddrawing_dst_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document subtype abbreviated')),
                ('dt_abbr', models.ForeignKey(blank=True, help_text='Abbreviation of the document type � for �field drawing� it is �FZ�.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fielddrawing_dt_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type abbreviated')),
                ('equipment_scan', models.ForeignKey(blank=True, help_text='The scanner which was used (brand, product name and number).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fielddrawing_equipment_scan_skosconcept', to='vocabs.SkosConcept', verbose_name='Scanner')),
                ('excavation_object_id', models.ManyToManyField(blank=True, help_text='The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).', related_name='rvn_fielddrawing_excavation_object_id_excavationobjectid', to='archiv.ExcavationObjectID', verbose_name='Excavation object ID')),
                ('excavation_post_excavation', models.ForeignKey(blank=True, help_text='When the document was created. Field drawings were always created in the field, so the entry is always �excavation�.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fielddrawing_excavation_post_excavation_skosconcept', to='vocabs.SkosConcept', verbose_name='Whether it was created during excavation or after (post-excavation)')),
                ('file_extension', models.ForeignKey(blank=True, help_text='File extension of the document (e.g. .jpg, .tif).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fielddrawing_file_extension_skosconcept', to='vocabs.SkosConcept', verbose_name='File extension')),
                ('original_material', models.ManyToManyField(blank=True, help_text='Material of original (Millimetrepaper (Millimeterpapier), Transparentpapier (tracing paper), Kopierpapier (photocopy)).', related_name='rvn_fielddrawing_original_material_skosconcept', to='vocabs.SkosConcept', verbose_name='Material of original document')),
                ('season', models.ForeignKey(blank=True, help_text='Fieldwork season when the field drawing was made (H = Herbst = autumn; F = Fr�hling = spring).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fielddrawing_season_excavationseasons', to='archiv.ExcavationSeasons', verbose_name='Fieldwork season')),
                ('site_id', models.ForeignKey(blank=True, help_text='Abbreviation of the name of the archaeological site, which is documented in the field drawing. �TD� stands for Tell el-Daba.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fielddrawing_site_id_skosconcept', to='vocabs.SkosConcept', verbose_name='Site ID')),
                ('source_original_copy_edited_copy', models.ForeignKey(blank=True, help_text='The original document was either a original field drawing, a photocopy of a field drawing or an edited photocopy of a field drawing (with handwritten comments).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_fielddrawing_source_original_copy_edited_copy_skosconcept', to='vocabs.SkosConcept', verbose_name='Scan was either made from an original fielddrawing, a copy of a fielddrawing or copy of a fielddrawing that was edited')),
            ],
            options={
                'verbose_name': 'Fielddrawing',
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='excavationobjectid',
            name='season',
            field=models.ManyToManyField(blank=True, help_text='Season during work at an excavation object has been carried out.', related_name='rvn_excavationobjectid_season_excavationseasons', to='archiv.ExcavationSeasons', verbose_name='Season'),
        ),
        migrations.AddField(
            model_name='excavationobjectid',
            name='site_id',
            field=models.ForeignKey(blank=True, help_text='Abbreviation of the name of the archaeological site, which is documented in the field drawing. �TD� stands for Tell el-Daba.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_excavationobjectid_site_id_skosconcept', to='vocabs.SkosConcept', verbose_name='Site ID'),
        ),
        migrations.AddField(
            model_name='excavationobjectid',
            name='square_trench',
            field=models.ForeignKey(blank=True, help_text='Each excavation area has been divided into square trenches.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_excavationobjectid_square_trench_skosconcept', to='vocabs.SkosConcept', verbose_name='Square trench'),
        ),
        migrations.AddField(
            model_name='excavationobjectid',
            name='year',
            field=models.ManyToManyField(blank=True, help_text='Years during work at an excavation object has been carried out.', related_name='rvn_excavationobjectid_year_excavationseasons', to='archiv.ExcavationSeasons', verbose_name='Year'),
        ),
        migrations.CreateModel(
            name='Document4DPuzzleID',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('digitisation_comment', models.TextField(blank=True, verbose_name='Comment from digitisation')),
                ('creator_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_document4dpuzzleid_creator_metadata_actor', to='archiv.Actor', verbose_name='Creator of metadata')),
                ('document_subtype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_document4dpuzzleid_document_subtype_documenttypes', to='archiv.DocumentTypes', verbose_name='Document subtype')),
                ('document_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_document4dpuzzleid_document_type_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type')),
                ('dst_abbr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_document4dpuzzleid_dst_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document subtype abbreviated')),
                ('dt_abbr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_document4dpuzzleid_dt_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type abbreviated')),
            ],
            options={
                'verbose_name': 'Document 4DPuzzle ID',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Datenbase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('creation_date_archivalobject', models.DateField(blank=True, null=True, verbose_name='Creation year archival object')),
                ('creation_date_metadata', models.DateField(blank=True, null=True, verbose_name='Creation date metadata')),
                ('original_comment', models.TextField(blank=True, verbose_name='Comment on the original document')),
                ('digitisation_comment', models.TextField(blank=True, verbose_name='Comment from digitisation')),
                ('access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_datenbase_access_skosconcept', to='vocabs.SkosConcept', verbose_name='Access')),
                ('archaeological_object_id', models.ManyToManyField(blank=True, related_name='rvn_datenbase_archaeological_object_id_archaeologicalobjectid', to='archiv.ArchaeologicalObjectID', verbose_name='Archaeological object ID')),
                ('copyright', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_datenbase_copyright_skosconcept', to='vocabs.SkosConcept', verbose_name='Copyright')),
                ('creator_archivalobject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_datenbase_creator_archivalobject_actor', to='archiv.Actor', verbose_name='Creator of archival object')),
                ('creator_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_datenbase_creator_metadata_actor', to='archiv.Actor', verbose_name='Creator of metadata')),
                ('creator_original', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_datenbase_creator_original_actor', to='archiv.Actor', verbose_name='Creator of original')),
                ('document_subtype', models.ManyToManyField(blank=True, related_name='rvn_datenbase_document_subtype_documenttypes', to='archiv.DocumentTypes', verbose_name='Doucment subtype')),
                ('document_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_datenbase_document_type_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type')),
                ('dst_abbr', models.ManyToManyField(blank=True, related_name='rvn_datenbase_dst_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document subtype abbreviated')),
                ('dt_abbr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_datenbase_dt_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type abbreviated')),
                ('excavation_object_id', models.ManyToManyField(blank=True, related_name='rvn_datenbase_excavation_object_id_excavationobjectid', to='archiv.ExcavationObjectID', verbose_name='Excavation object ID')),
                ('excavation_post_excavation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_datenbase_excavation_post_excavation_skosconcept', to='vocabs.SkosConcept', verbose_name='Whether it was created during excavation or after (post-excavation)Whether it was created during excavation or after')),
                ('file_extension_archivalobject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_datenbase_file_extension_archivalobject_skosconcept', to='vocabs.SkosConcept', verbose_name='File extension of archival object')),
                ('file_extension_original', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_datenbase_file_extension_original_skosconcept', to='vocabs.SkosConcept', verbose_name='File extension of original')),
                ('find_material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_datenbase_find_material_skosconcept', to='vocabs.SkosConcept', verbose_name='Find material')),
                ('site_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_datenbase_site_id_skosconcept', to='vocabs.SkosConcept', verbose_name='Site ID')),
            ],
            options={
                'verbose_name': 'Database',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Convolutecards',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('creation_date_original', models.DateField(blank=True, null=True, verbose_name='Creation date of original document')),
                ('creation_date_scan', models.DateField(blank=True, null=True, verbose_name='Creation date of scan')),
                ('creation_date_metadata', models.DateField(blank=True, null=True, verbose_name='Creation date of metadata')),
                ('resolution_scan_dpi', models.IntegerField(blank=True, null=True, verbose_name='Scan resolution')),
                ('original_comment', models.TextField(blank=True, verbose_name='Comment on the original document')),
                ('digitisation_comment', models.TextField(blank=True, verbose_name='Comment from digitisation')),
                ('access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_convolutecards_access_skosconcept', to='vocabs.SkosConcept', verbose_name='Access')),
                ('copyright', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_convolutecards_copyright_skosconcept', to='vocabs.SkosConcept', verbose_name='Copyright')),
                ('creation_year_original', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_convolutecards_creation_year_original_excavationseasons', to='archiv.ExcavationSeasons', verbose_name='Creation year of original document')),
                ('creator_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_convolutecards_creator_metadata_actor', to='archiv.Actor', verbose_name='Creator of metadata')),
                ('creator_original', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_convolutecards_creator_original_actor', to='archiv.Actor', verbose_name='Creator of original document')),
                ('creator_scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_convolutecards_creator_scan_actor', to='archiv.Actor', verbose_name='Creator of scan')),
                ('document_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_convolutecards_document_type_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type')),
                ('dt_abbr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_convolutecards_dt_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type abbreviated')),
                ('equipment_scan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_convolutecards_equipment_scan_skosconcept', to='vocabs.SkosConcept', verbose_name='Equipment for scan')),
                ('excavation_post_excavation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_convolutecards_excavation_post_excavation_skosconcept', to='vocabs.SkosConcept', verbose_name='Whether it was created during excavation or after (post-excavation)')),
                ('file_extension', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_convolutecards_file_extension_skosconcept', to='vocabs.SkosConcept', verbose_name='File extension')),
                ('original_material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_convolutecards_original_material_skosconcept', to='vocabs.SkosConcept', verbose_name='Material of original document')),
                ('season', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_convolutecards_season_excavationseasons', to='archiv.ExcavationSeasons', verbose_name='Season')),
                ('site_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_convolutecards_site_id_skosconcept', to='vocabs.SkosConcept', verbose_name='Site ID')),
                ('source_original_copy_edited_copy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_convolutecards_source_original_copy_edited_copy_skosconcept', to='vocabs.SkosConcept', verbose_name='Wheter source is a original or a copy')),
            ],
            options={
                'verbose_name': 'Convolute cards',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='AutoCAD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('creation_date_archivalobject', models.DateField(blank=True, null=True, verbose_name='Creation year archival object')),
                ('creation_date_metadata', models.DateField(blank=True, null=True, verbose_name='Creation date metadata')),
                ('original_comment', models.TextField(blank=True, verbose_name='Comment on the original document')),
                ('digitisation_comment', models.TextField(blank=True, verbose_name='Comment from digitisation')),
                ('access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_autocad_access_skosconcept', to='vocabs.SkosConcept', verbose_name='Access')),
                ('archaeological_object_id', models.ManyToManyField(blank=True, related_name='rvn_autocad_archaeological_object_id_archaeologicalobjectid', to='archiv.ArchaeologicalObjectID', verbose_name='Archeological object ID')),
                ('copyright', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_autocad_copyright_skosconcept', to='vocabs.SkosConcept', verbose_name='Copyright')),
                ('creator_archivalobject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_autocad_creator_archivalobject_actor', to='archiv.Actor', verbose_name='Creator of archival object')),
                ('creator_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_autocad_creator_metadata_actor', to='archiv.Actor', verbose_name='Creator of metadata')),
                ('creator_original', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_autocad_creator_original_actor', to='archiv.Actor', verbose_name='Creator of original')),
                ('document_subtype', models.ManyToManyField(blank=True, related_name='rvn_autocad_document_subtype_documenttypes', to='archiv.DocumentTypes', verbose_name='Doucment subtype')),
                ('document_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_autocad_document_type_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type')),
                ('dst_abbr', models.ManyToManyField(blank=True, related_name='rvn_autocad_dst_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document subtype abbreviated')),
                ('dt_abbr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_autocad_dt_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type abbreviated')),
                ('excavation_object_id', models.ManyToManyField(blank=True, related_name='rvn_autocad_excavation_object_id_excavationobjectid', to='archiv.ExcavationObjectID', verbose_name='Excavation object ID')),
                ('excavation_post_excavation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_autocad_excavation_post_excavation_skosconcept', to='vocabs.SkosConcept', verbose_name='Whether it was created during excavation or after (post-excavation)Whether it was created during excavation or after')),
                ('file_extension_archivalobject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_autocad_file_extension_archivalobject_skosconcept', to='vocabs.SkosConcept', verbose_name='File extension of archival object')),
                ('file_extension_original', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_autocad_file_extension_original_skosconcept', to='vocabs.SkosConcept', verbose_name='File extension of original')),
                ('site_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_autocad_site_id_skosconcept', to='vocabs.SkosConcept', verbose_name='Site ID')),
            ],
            options={
                'verbose_name': 'AutoCAD',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ArchiveINF',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('creation_date_archivalobject', models.DateField(blank=True, null=True, verbose_name='Creation date archival object')),
                ('creation_date_metadata', models.DateField(blank=True, null=True, verbose_name='Creation date metadata')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
                ('access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_archiveinf_access_skosconcept', to='vocabs.SkosConcept', verbose_name='Access')),
                ('copyright', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_archiveinf_copyright_skosconcept', to='vocabs.SkosConcept', verbose_name='Copyright')),
                ('creator_archivalobject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_archiveinf_creator_archivalobject_actor', to='archiv.Actor', verbose_name='Creator of archival object')),
                ('creator_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_archiveinf_creator_metadata_actor', to='archiv.Actor', verbose_name='Creator of metadata')),
                ('creator_original', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_archiveinf_creator_original_actor', to='archiv.Actor', verbose_name='Creator of original')),
                ('document_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_archiveinf_document_type_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type')),
                ('dt_abbr', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_archiveinf_dt_abbr_documenttypes', to='archiv.DocumentTypes', verbose_name='Document type abbreviated')),
                ('file_extension_archivalobject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_archiveinf_file_extension_archivalobject_skosconcept', to='vocabs.SkosConcept', verbose_name='File extension of archival object')),
                ('relatedto', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_archiveinf_relatedto_documenttypes', to='archiv.DocumentTypes', verbose_name='File is related to other TD resources')),
                ('site_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_archiveinf_site_id_skosconcept', to='vocabs.SkosConcept', verbose_name='Site ID')),
            ],
            options={
                'verbose_name': 'Archive information',
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='archaeologicalobjectid',
            name='excavation_object_id',
            field=models.ManyToManyField(blank=True, related_name='rvn_archaeologicalobjectid_excavation_object_id_excavationobjectid', to='archiv.ExcavationObjectID', verbose_name='Excavation object ID'),
        ),
        migrations.CreateModel(
            name='ArchaeologicalObject4DPuzzleID',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.CharField(blank=True, max_length=300, verbose_name='Legacy ID')),
                ('archaeological_object_comment', models.TextField(blank=True, verbose_name='Archaeological object comment')),
                ('position', models.TextField(blank=True, verbose_name='Position')),
                ('digitisation_comment', models.TextField(blank=True, verbose_name='Comment from digitisation')),
                ('archaeological_object_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_archaeologicalobject4dpuzzleid_archaeological_object_id_archaeologicalobjectid', to='archiv.ArchaeologicalObjectID', verbose_name='Archaeological object ID')),
                ('archaeological_object_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_archaeologicalobject4dpuzzleid_archaeological_object_type_skosconcept', to='vocabs.SkosConcept', verbose_name='Archaeological object type')),
                ('creator_metadata', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rvn_archaeologicalobject4dpuzzleid_creator_metadata_actor', to='archiv.Actor', verbose_name='Creator of metadata')),
                ('excavation_object_id', models.ManyToManyField(blank=True, related_name='rvn_archaeologicalobject4dpuzzleid_excavation_object_id_excavationobjectid', to='archiv.ExcavationObjectID', verbose_name='Excavation object ID')),
            ],
            options={
                'verbose_name': 'ArchaeologicalObject4DPuzzleID',
                'ordering': ['id'],
            },
        ),
    ]
