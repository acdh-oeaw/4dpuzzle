# Generated by Django 5.0.6 on 2024-07-09 11:24

import django.contrib.postgres.fields.ranges
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("vocabs", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Actor",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "canonic_arche_uri",
                    models.TextField(blank=True, verbose_name="authority file URI"),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="helptext for name",
                        max_length=250,
                        verbose_name="Name",
                    ),
                ),
                (
                    "drawer_monogram",
                    models.CharField(
                        blank=True,
                        help_text="helptext for drawer_monogram",
                        max_length=250,
                        verbose_name="Drawer Monogram",
                    ),
                ),
                (
                    "excavation",
                    models.CharField(
                        blank=True,
                        help_text="helptext for excavation",
                        max_length=250,
                        verbose_name="Excavation",
                    ),
                ),
                (
                    "xx_4dpuzzle",
                    models.CharField(
                        blank=True,
                        help_text="helptext for xx_4dpuzzle",
                        max_length=250,
                        verbose_name="4DPuzzle",
                    ),
                ),
                (
                    "year",
                    models.CharField(
                        blank=True,
                        help_text="helptext for year",
                        max_length=250,
                        verbose_name="Year",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "access",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for access",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_actor_access_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Access",
                    ),
                ),
            ],
            options={
                "verbose_name": "Actor",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ArchaeologicalObjectID",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "archaeological_object_id",
                    models.CharField(
                        blank=True,
                        help_text="helptext for archaeological_object_id",
                        max_length=250,
                        verbose_name="Archaeological object ID",
                    ),
                ),
                (
                    "archaeological_object_comment",
                    models.TextField(
                        blank=True,
                        help_text="helptext for archaeological_object_comment",
                        null=True,
                        verbose_name="Archaeological object comment",
                    ),
                ),
                (
                    "position",
                    models.CharField(
                        blank=True,
                        help_text="helptext for position",
                        max_length=250,
                        verbose_name="Position",
                    ),
                ),
                (
                    "stratum_id_relative",
                    models.CharField(
                        blank=True,
                        help_text="helptext for stratum_id_relative",
                        max_length=250,
                        verbose_name="Stratum ID relative",
                    ),
                ),
                (
                    "stratum_id_absolute_prepub",
                    models.CharField(
                        blank=True,
                        help_text="helptext for stratum_id_absolute_prepub",
                        max_length=250,
                        verbose_name="Stratum ID absolute pre publication",
                    ),
                ),
                (
                    "stratum_comment",
                    models.CharField(
                        blank=True,
                        help_text="helptext for stratum_comment",
                        max_length=250,
                        verbose_name="Stratum comment",
                    ),
                ),
                (
                    "phase_id",
                    models.CharField(
                        blank=True,
                        help_text="helptext for phase_id",
                        max_length=250,
                        verbose_name="Phase ID",
                    ),
                ),
                (
                    "relatedto",
                    models.CharField(
                        blank=True,
                        help_text="helptext for relatedto",
                        max_length=250,
                        verbose_name="File is related to other TD resources",
                    ),
                ),
                (
                    "digitisation_comment",
                    models.TextField(
                        blank=True,
                        help_text="helptext for digitisation_comment",
                        null=True,
                        verbose_name="Comment from digitisation",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "archaeological_object_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for archaeological_object_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_archaeologicalobjectid_archaeological_object_type_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Archaeological object type",
                    ),
                ),
                (
                    "corresponding_to_archaeological_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="helptext for corresponding_to_archaeological_object_id",
                        related_name="rvn_archaeologicalobjectid_corresponding_to_archaeological_object_id_archaeologicalobjectid",
                        to="archiv.archaeologicalobjectid",
                        verbose_name="Corresponding to archaeological object ID",
                    ),
                ),
                (
                    "creator_metadata",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_metadata",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_archaeologicalobjectid_creator_metadata_actor",
                        to="archiv.actor",
                        verbose_name="Creator of metadata",
                    ),
                ),
            ],
            options={
                "verbose_name": "ArchaeologicalObjectID",
                "ordering": ["archaeological_object_id"],
            },
        ),
        migrations.CreateModel(
            name="DocumentTypes",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "document_type",
                    models.CharField(
                        blank=True,
                        help_text="Type of document.",
                        max_length=250,
                        verbose_name="Document type",
                    ),
                ),
                (
                    "document_maintype",
                    models.CharField(
                        blank=True,
                        help_text="Type of document.",
                        max_length=250,
                        verbose_name="Document type",
                    ),
                ),
                (
                    "dt_abbr",
                    models.CharField(
                        blank=True,
                        help_text="Abbreviation of the document.",
                        max_length=250,
                        verbose_name="Document type abbreviated",
                    ),
                ),
                (
                    "document_subtype",
                    models.CharField(
                        blank=True,
                        help_text="Subtype of a document. ",
                        max_length=250,
                        verbose_name="Document Subtype",
                    ),
                ),
                (
                    "ds_abbr",
                    models.CharField(
                        blank=True,
                        help_text="Abbreviation of the document subtype.",
                        max_length=250,
                        verbose_name="Document subtype abbreviated",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of document type.",
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "analogue_borndigital",
                    models.ForeignKey(
                        blank=True,
                        help_text="Whether the original document was analogue (and digitised during A Puzzle in 4D project) or born-digital (and converted into durable file format during A Puzzle in 4D project).",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_documenttypes_analogue_borndigital_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Analogue or born-digital",
                    ),
                ),
            ],
            options={
                "verbose_name": "Document types",
                "ordering": ["document_type"],
            },
        ),
        migrations.CreateModel(
            name="Document4DPuzzleID",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "document_id",
                    models.CharField(
                        blank=True,
                        help_text="helptext for document_id",
                        max_length=250,
                        verbose_name="Filename ",
                    ),
                ),
                (
                    "original_4dpuzzle_id",
                    models.CharField(
                        blank=True,
                        help_text="helptext for original_4dpuzzle_id",
                        max_length=250,
                        verbose_name="Document ID ",
                    ),
                ),
                (
                    "document_title",
                    models.CharField(
                        blank=True,
                        help_text="helptext for document_title",
                        max_length=250,
                        verbose_name="Document title",
                    ),
                ),
                (
                    "digitisation_comment",
                    models.TextField(
                        blank=True,
                        help_text="helptext for digitisation_comment",
                        null=True,
                        verbose_name="Comment from digitisation",
                    ),
                ),
                (
                    "corresponding_to",
                    models.CharField(
                        blank=True,
                        help_text="helptext for corresponding_to",
                        max_length=250,
                        verbose_name="corresponding_to",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "creator_metadata",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_metadata",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_document4dpuzzleid_creator_metadata_actor",
                        to="archiv.actor",
                        verbose_name="Creator of metadata",
                    ),
                ),
                (
                    "document_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for document_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_document4dpuzzleid_document_type_documenttypes",
                        to="archiv.documenttypes",
                        verbose_name="Document type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Document 4DPuzzle ID",
                "ordering": ["document_id"],
            },
        ),
        migrations.CreateModel(
            name="ArchiveINF",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        blank=True,
                        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
                        max_length=250,
                        verbose_name="Filename",
                    ),
                ),
                (
                    "document_id",
                    models.CharField(
                        blank=True,
                        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. DR for Digital Resource) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
                        max_length=250,
                        verbose_name="Document ID ",
                    ),
                ),
                (
                    "document_title",
                    models.CharField(
                        blank=True,
                        help_text="A description of the content of the document. \xa0It allows information about the contents of the file to be understood by a human being without opening it. ",
                        max_length=250,
                        verbose_name="Document title",
                    ),
                ),
                (
                    "creation_year_original",
                    models.CharField(
                        blank=True,
                        help_text="helptext for creation_year_original",
                        max_length=250,
                        verbose_name="Creation year original",
                    ),
                ),
                (
                    "creation_date_archivalobject",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_archivalobject",
                        null=True,
                        verbose_name="Creation date archival object",
                    ),
                ),
                (
                    "creation_date_metadata",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_metadata",
                        null=True,
                        verbose_name="Creation date metadata",
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        blank=True,
                        help_text="helptext for comment",
                        null=True,
                        verbose_name="Comment",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "access",
                    models.ForeignKey(
                        blank=True,
                        help_text="Whether access to the resource is restricted or if it is open to the public.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_archiveinf_access_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Access",
                    ),
                ),
                (
                    "copyright",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for copyright",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_archiveinf_copyright_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Copyright",
                    ),
                ),
                (
                    "creator_archivalobject",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_archivalobject",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_archiveinf_creator_archivalobject_actor",
                        to="archiv.actor",
                        verbose_name="Creator of archival object",
                    ),
                ),
                (
                    "creator_metadata",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_metadata",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_archiveinf_creator_metadata_actor",
                        to="archiv.actor",
                        verbose_name="Creator of metadata",
                    ),
                ),
                (
                    "creator_original",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_original",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_archiveinf_creator_original_actor",
                        to="archiv.actor",
                        verbose_name="Creator of original",
                    ),
                ),
                (
                    "file_extension_archivalobject",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for file_extension_archivalobject",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_archiveinf_file_extension_archivalobject_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File extension of archival object",
                    ),
                ),
                (
                    "site_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="Abbreviation of Tell el-Daba is 'TD'.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_archiveinf_site_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Site ID",
                    ),
                ),
                (
                    "document_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for document_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_archiveinf_document_type_documenttypes",
                        to="archiv.documenttypes",
                        verbose_name="Document type",
                    ),
                ),
                (
                    "relatedto",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for relatedto",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_archiveinf_relatedto_documenttypes",
                        to="archiv.documenttypes",
                        verbose_name="File is related to other TD resources",
                    ),
                ),
            ],
            options={
                "verbose_name": "Archive information",
                "ordering": ["filename"],
            },
        ),
        migrations.CreateModel(
            name="ExcavationObjectID",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "excavation_object_id",
                    models.CharField(
                        blank=True,
                        help_text="Identifier of an excavation object (excavation objects are objects that were created during excavation). Consists of Site_area_square_TypeOfObject, for example TD_A-II_l17_Planum1.",
                        max_length=250,
                        verbose_name="Identifier of Excavation Object",
                    ),
                ),
                (
                    "profile_orientation",
                    models.CharField(
                        blank=True,
                        help_text="The orientation of a profile.",
                        max_length=250,
                        verbose_name="Orientation of a profile",
                    ),
                ),
                (
                    "year",
                    models.TextField(
                        blank=True,
                        help_text="Years during work at an excavation object has been carried out.",
                        null=True,
                        verbose_name="Year",
                    ),
                ),
                (
                    "season",
                    models.TextField(
                        blank=True,
                        help_text="Season during work at an excavation object has been carried out.",
                        null=True,
                        verbose_name="Season",
                    ),
                ),
                (
                    "digitisation_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments of the metadata creator (e.g. noticing errors, etc.).",
                        null=True,
                        verbose_name="Comment from digitisation",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "area",
                    models.ForeignKey(
                        blank=True,
                        help_text="Excavations were carried out in 16 areas: A-I, A-II, A-III, A-IV, A-N, A-V, E-I, F-I, F-II, H-I, H-II, H-III, H-IV, H-V, H-VI, R-I.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_excavationobjectid_area_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Area",
                    ),
                ),
                (
                    "creator_metadata",
                    models.ForeignKey(
                        blank=True,
                        help_text="Person who created the metadata or organization where metadata creation was carried out.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_excavationobjectid_creator_metadata_actor",
                        to="archiv.actor",
                        verbose_name="creator_metadata",
                    ),
                ),
                (
                    "excavation_object_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Types of excavation objects: Areal, Detail, Grube, Oberflaeche, Planquadrat, Planum, Profil, Profilsteg, Schnitt, Situation, Sondage, Zwischenplanum.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_excavationobjectid_excavation_object_type_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Type of Excavation Object",
                    ),
                ),
                (
                    "part_of_excavation_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="An excavation object which was part of another excavation object.",
                        related_name="rvn_excavationobjectid_part_of_excavation_object_id_excavationobjectid",
                        to="archiv.excavationobjectid",
                        verbose_name="Part of another Excavation Object.",
                    ),
                ),
                (
                    "planum",
                    models.ForeignKey(
                        blank=True,
                        help_text="Excavations were carried out in spits and a ‘planum’ is an excavation surface. ",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_excavationobjectid_planum_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Planum",
                    ),
                ),
                (
                    "site_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="Abbreviation of the name of the archaeological site, which is documented in the field drawing. ‘TD’ stands for Tell el-Daba.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_excavationobjectid_site_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Site ID",
                    ),
                ),
                (
                    "square_trench",
                    models.ForeignKey(
                        blank=True,
                        help_text="Each excavation area has been divided into square trenches.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_excavationobjectid_square_trench_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Square trench",
                    ),
                ),
            ],
            options={
                "verbose_name": "Excavation Objects",
                "ordering": ["excavation_object_id"],
            },
        ),
        migrations.CreateModel(
            name="Datenbase",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        blank=True,
                        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
                        max_length=250,
                        verbose_name="Filename",
                    ),
                ),
                (
                    "document_id",
                    models.CharField(
                        blank=True,
                        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. DR for Digital Resource) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
                        max_length=250,
                        verbose_name="Document ID",
                    ),
                ),
                (
                    "document_title",
                    models.CharField(
                        blank=True,
                        help_text="A description of the content of the document. \xa0It allows information about the contents of the file to be understood by a human being without opening it. ",
                        max_length=250,
                        verbose_name="Document title",
                    ),
                ),
                (
                    "creation_year_original",
                    models.CharField(
                        blank=True,
                        help_text="helptext for creation_year_original",
                        max_length=250,
                        verbose_name="Creation year original",
                    ),
                ),
                (
                    "creation_date_archivalobject",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_archivalobject",
                        null=True,
                        verbose_name="Creation year archival object",
                    ),
                ),
                (
                    "creation_date_metadata",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_metadata",
                        null=True,
                        verbose_name="Creation date metadata",
                    ),
                ),
                (
                    "path_filename_old",
                    models.CharField(
                        blank=True,
                        help_text="helptext for path_filename_old",
                        max_length=250,
                        verbose_name="Data path in old TD archive",
                    ),
                ),
                (
                    "path_filename_arche",
                    models.CharField(
                        blank=True,
                        help_text="helptext for path_filename_arche",
                        max_length=250,
                        verbose_name="Data path in ARCHE",
                    ),
                ),
                (
                    "relatedto",
                    models.CharField(
                        blank=True,
                        help_text="helptext for relatedto",
                        max_length=250,
                        verbose_name="File is related to other TD resources",
                    ),
                ),
                (
                    "original_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from the creation of the original resource.",
                        null=True,
                        verbose_name="Comment on the original document",
                    ),
                ),
                (
                    "digitisation_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from digitisation.",
                        null=True,
                        verbose_name="Comment from digitisation",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "access",
                    models.ForeignKey(
                        blank=True,
                        help_text="Whether access to the resource is restricted or if it is open to the public.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_datenbase_access_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Access",
                    ),
                ),
                (
                    "archaeological_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The unique identifier of an archaeological object. Archaeological objects are all objects that were created in the past, e.g. in the Bronze Age. An archaeological object ID contains the abbreviation of site_area_square trench_name of archaeological object (e.g.: TD_F-I_o19_Grab1 means Tell el-Daba, area F-I, square o19, grave 1).",
                        related_name="rvn_datenbase_archaeological_object_id_archaeologicalobjectid",
                        to="archiv.archaeologicalobjectid",
                        verbose_name="Archaeological object ID",
                    ),
                ),
                (
                    "copyright",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for copyright",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_datenbase_copyright_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Copyright",
                    ),
                ),
                (
                    "creator_archivalobject",
                    models.ForeignKey(
                        blank=True,
                        help_text="Person who processed resource for digital long-term archiving.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_datenbase_creator_archivalobject_actor",
                        to="archiv.actor",
                        verbose_name="Creator of archival object",
                    ),
                ),
                (
                    "creator_metadata",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_metadata",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_datenbase_creator_metadata_actor",
                        to="archiv.actor",
                        verbose_name="Creator of metadata",
                    ),
                ),
                (
                    "creator_original",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_original",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_datenbase_creator_original_actor",
                        to="archiv.actor",
                        verbose_name="Creator of original",
                    ),
                ),
                (
                    "excavation_post_excavation",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for excavation_post_excavation",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_datenbase_excavation_post_excavation_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Whether it was created during excavation or after (post-excavation)",
                    ),
                ),
                (
                    "file_extension_archivalobject",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for file_extension_archivalobject",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_datenbase_file_extension_archivalobject_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File extension of archival object",
                    ),
                ),
                (
                    "file_extension_original",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for file_extension_original",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_datenbase_file_extension_original_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File extension of original",
                    ),
                ),
                (
                    "find_material",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for find_material",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_datenbase_find_material_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Find material",
                    ),
                ),
                (
                    "site_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="Abbreviation of Tell el-Daba is 'TD'.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_datenbase_site_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Site ID",
                    ),
                ),
                (
                    "document_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for document_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_datenbase_document_type_documenttypes",
                        to="archiv.documenttypes",
                        verbose_name="Document type",
                    ),
                ),
                (
                    "excavation_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).",
                        related_name="rvn_datenbase_excavation_object_id_excavationobjectid",
                        to="archiv.excavationobjectid",
                        verbose_name="Excavation object ID",
                    ),
                ),
            ],
            options={
                "verbose_name": "Database",
                "ordering": ["filename"],
            },
        ),
        migrations.CreateModel(
            name="AutoCAD",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        blank=True,
                        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
                        max_length=250,
                        verbose_name="Filename",
                    ),
                ),
                (
                    "document_id",
                    models.CharField(
                        blank=True,
                        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. DR for Digital Resource) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
                        max_length=250,
                        verbose_name="Document ID",
                    ),
                ),
                (
                    "document_title",
                    models.CharField(
                        blank=True,
                        help_text="A description of the content of the document. \xa0It allows information about the contents of the file to be understood by a human being without opening it. ",
                        max_length=250,
                        verbose_name="Document title",
                    ),
                ),
                (
                    "path_filename_old",
                    models.CharField(
                        blank=True,
                        help_text="helptext for path_filename_old",
                        max_length=250,
                        verbose_name="Data path in old TD archive",
                    ),
                ),
                (
                    "path_filename_arche",
                    models.CharField(
                        blank=True,
                        help_text="helptext for path_filename_arche",
                        max_length=250,
                        verbose_name="Data path in ARCHE",
                    ),
                ),
                (
                    "creation_year_original",
                    models.CharField(
                        blank=True,
                        help_text="helptext for creation_year_original",
                        max_length=250,
                        verbose_name="Creation year original",
                    ),
                ),
                (
                    "creation_date_archivalobject",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_archivalobject",
                        null=True,
                        verbose_name="Creation year archival object",
                    ),
                ),
                (
                    "creation_date_metadata",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_metadata",
                        null=True,
                        verbose_name="Creation date metadata",
                    ),
                ),
                (
                    "relatedto",
                    models.CharField(
                        blank=True,
                        help_text="helptext for relatedto",
                        max_length=250,
                        verbose_name="File is related to other TD resources",
                    ),
                ),
                (
                    "original_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from the creation of the original resource.",
                        null=True,
                        verbose_name="Comment on the original document",
                    ),
                ),
                (
                    "digitisation_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from digitisation.",
                        null=True,
                        verbose_name="Comment from digitisation",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "access",
                    models.ForeignKey(
                        blank=True,
                        help_text="Whether access to the resource is restricted or if it is open to the public.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_autocad_access_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Access",
                    ),
                ),
                (
                    "archaeological_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The unique identifier of an archaeological object. Archaeological objects are all objects that were created in the past, e.g. in the Bronze Age. An archaeological object ID contains the abbreviation of site_area_square trench_name of archaeological object (e.g.: TD_F-I_o19_Grab1 means Tell el-Daba, area F-I, square o19, grave 1).",
                        related_name="rvn_autocad_archaeological_object_id_archaeologicalobjectid",
                        to="archiv.archaeologicalobjectid",
                        verbose_name="Archeological object ID",
                    ),
                ),
                (
                    "copyright",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for copyright",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_autocad_copyright_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Copyright",
                    ),
                ),
                (
                    "creator_archivalobject",
                    models.ForeignKey(
                        blank=True,
                        help_text="Person who processed resource for digital long-term archiving.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_autocad_creator_archivalobject_actor",
                        to="archiv.actor",
                        verbose_name="Creator of archival object",
                    ),
                ),
                (
                    "creator_metadata",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_metadata",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_autocad_creator_metadata_actor",
                        to="archiv.actor",
                        verbose_name="Creator of metadata",
                    ),
                ),
                (
                    "creator_original",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_original",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_autocad_creator_original_actor",
                        to="archiv.actor",
                        verbose_name="Creator of original",
                    ),
                ),
                (
                    "excavation_post_excavation",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for excavation_post_excavation",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_autocad_excavation_post_excavation_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Whether it was created during excavation or after (post-excavation)",
                    ),
                ),
                (
                    "file_extension_archivalobject",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for file_extension_archivalobject",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_autocad_file_extension_archivalobject_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File extension of archival object",
                    ),
                ),
                (
                    "file_extension_original",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for file_extension_original",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_autocad_file_extension_original_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File extension of original",
                    ),
                ),
                (
                    "site_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="Abbreviation of Tell el-Daba is 'TD'.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_autocad_site_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Site ID",
                    ),
                ),
                (
                    "document_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for document_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_autocad_document_type_documenttypes",
                        to="archiv.documenttypes",
                        verbose_name="Document type",
                    ),
                ),
                (
                    "excavation_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).",
                        related_name="rvn_autocad_excavation_object_id_excavationobjectid",
                        to="archiv.excavationobjectid",
                        verbose_name="Excavation object ID",
                    ),
                ),
            ],
            options={
                "verbose_name": "AutoCAD",
                "ordering": ["filename"],
            },
        ),
        migrations.AddField(
            model_name="archaeologicalobjectid",
            name="excavation_object_id",
            field=models.ManyToManyField(
                blank=True,
                help_text="helptext for excavation_object_id",
                related_name="rvn_archaeologicalobjectid_excavation_object_id_excavationobjectid",
                to="archiv.excavationobjectid",
                verbose_name="Excavation object ID",
            ),
        ),
        migrations.CreateModel(
            name="ArchaeologicalObject4DPuzzleID",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "archaeological_object_4dpuzzle_id",
                    models.CharField(
                        blank=True,
                        help_text="helptext for archaeological_object_4dpuzzle_id",
                        max_length=250,
                        verbose_name="Archaeological object 4DPuzzle ID",
                    ),
                ),
                (
                    "archaeological_object_comment",
                    models.TextField(
                        blank=True,
                        help_text="helptext for archaeological_object_comment",
                        null=True,
                        verbose_name="Archaeological object comment",
                    ),
                ),
                (
                    "position",
                    models.TextField(
                        blank=True,
                        help_text="helptext for position",
                        null=True,
                        verbose_name="Position",
                    ),
                ),
                (
                    "stratum_comment",
                    models.TextField(
                        blank=True,
                        help_text="helptext for stratum_comment",
                        null=True,
                        verbose_name="Stratum Comment",
                    ),
                ),
                (
                    "digitisation_comment",
                    models.TextField(
                        blank=True,
                        help_text="helptext for digitisation_comment",
                        null=True,
                        verbose_name="Comment from digitisation",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "archaeological_object_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for archaeological_object_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_archaeologicalobject4dpuzzleid_archaeological_object_type_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Archaeological object type",
                    ),
                ),
                (
                    "creator_metadata",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_metadata",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_archaeologicalobject4dpuzzleid_creator_metadata_actor",
                        to="archiv.actor",
                        verbose_name="Creator of metadata",
                    ),
                ),
                (
                    "phase_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for phase_id",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_archaeologicalobject4dpuzzleid_phase_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Phase ID",
                    ),
                ),
                (
                    "stratum_id_absolute_prepub",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for stratum_id_absolute_prepub",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_archaeologicalobject4dpuzzleid_stratum_id_absolute_prepub_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Stratum ID absolute pre publication",
                    ),
                ),
                (
                    "stratum_id_relative",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for stratum_id_relative",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_archaeologicalobject4dpuzzleid_stratum_id_relative_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Stratum ID relative",
                    ),
                ),
                (
                    "archaeological_object_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for archaeological_object_id",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_archaeologicalobject4dpuzzleid_archaeological_object_id_archaeologicalobjectid",
                        to="archiv.archaeologicalobjectid",
                        verbose_name="Archaeological object ID",
                    ),
                ),
                (
                    "excavation_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="helptext for excavation_object_id",
                        related_name="rvn_archaeologicalobject4dpuzzleid_excavation_object_id_excavationobjectid",
                        to="archiv.excavationobjectid",
                        verbose_name="Excavation object ID",
                    ),
                ),
            ],
            options={
                "verbose_name": "ArchaeologicalObject4DPuzzleID",
                "ordering": ["archaeological_object_id"],
            },
        ),
        migrations.CreateModel(
            name="ExcavationSeasons",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "excavation_id",
                    models.CharField(
                        blank=True,
                        help_text="helptext for excavation_id",
                        max_length=250,
                        verbose_name="Ecxcavation ID",
                    ),
                ),
                (
                    "grabungskampagnen",
                    models.CharField(
                        blank=True,
                        help_text="helptext for grabungskampagnen",
                        max_length=250,
                        verbose_name="Excavations Seasons",
                    ),
                ),
                (
                    "start_date_end_date",
                    django.contrib.postgres.fields.ranges.DateRangeField(
                        blank=True,
                        help_text="helptext for start_date_end_date",
                        null=True,
                        verbose_name="Start date - end date",
                    ),
                ),
                (
                    "year",
                    models.CharField(
                        blank=True,
                        help_text="helptext for year",
                        max_length=250,
                        verbose_name="Year",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "access",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for access",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_excavationseasons_access_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Access",
                    ),
                ),
                (
                    "season",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for season",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_excavationseasons_season_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Season",
                    ),
                ),
            ],
            options={
                "verbose_name": "Excavation Seasons",
                "ordering": ["grabungskampagnen"],
            },
        ),
        migrations.AddField(
            model_name="excavationobjectid",
            name="excavation_id",
            field=models.ManyToManyField(
                blank=True,
                help_text="Years during work at an excavation object has been carried out.",
                related_name="rvn_excavationobjectid_excavation_id_excavationseasons",
                to="archiv.excavationseasons",
                verbose_name="Excavation Season",
            ),
        ),
        migrations.CreateModel(
            name="Convolutecards",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "creation_year_original",
                    models.TextField(
                        blank=True,
                        help_text="helptext for creation_year_original",
                        null=True,
                        verbose_name="Creation year of original document",
                    ),
                ),
                (
                    "season",
                    models.TextField(
                        blank=True,
                        help_text="helptext for season",
                        null=True,
                        verbose_name="Season",
                    ),
                ),
                (
                    "filename_document_id",
                    models.CharField(
                        blank=True,
                        help_text="The filename of convolute cards consists of the document_ID (unique identifier). The document ID is a project-specific unique identifier which consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. KK for Konvolutkarte) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
                        max_length=250,
                        verbose_name="Filename ",
                    ),
                ),
                (
                    "convolute_inventory_number",
                    models.CharField(
                        blank=True,
                        help_text="helptext for convolute_inventory_number",
                        max_length=250,
                        verbose_name="Inventory number of the convolute",
                    ),
                ),
                (
                    "convolute_subnumber",
                    models.CharField(
                        blank=True,
                        help_text="helptext for convolute_subnumber",
                        max_length=250,
                        verbose_name="Convolute subnumber",
                    ),
                ),
                (
                    "filename_old",
                    models.CharField(
                        blank=True,
                        help_text="helptext for filename_old",
                        max_length=250,
                        verbose_name="Filename old",
                    ),
                ),
                (
                    "creation_date_original",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_original",
                        null=True,
                        verbose_name="Creation date of original document",
                    ),
                ),
                (
                    "creation_date_scan",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_scan",
                        null=True,
                        verbose_name="Creation date of scan",
                    ),
                ),
                (
                    "creation_date_metadata",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_metadata",
                        null=True,
                        verbose_name="Creation date of metadata",
                    ),
                ),
                (
                    "storage_folder_original",
                    models.CharField(
                        blank=True,
                        help_text="helptext for storage_folder_original",
                        max_length=250,
                        verbose_name="Storage folder of original document",
                    ),
                ),
                (
                    "resolution_scan_dpi",
                    models.IntegerField(
                        blank=True,
                        help_text="helptext for resolution_scan_dpi",
                        null=True,
                        verbose_name="Scan resolution",
                    ),
                ),
                (
                    "month",
                    models.CharField(
                        blank=True,
                        help_text="helptext for month",
                        max_length=250,
                        verbose_name="Month",
                    ),
                ),
                (
                    "position",
                    models.CharField(
                        blank=True,
                        help_text="helptext for position",
                        max_length=250,
                        verbose_name="Position",
                    ),
                ),
                (
                    "lowest_height_meters_standard_elevation_zero",
                    models.CharField(
                        blank=True,
                        help_text="helptext for lowest_height_meters_standard_elevation_zero",
                        max_length=250,
                        verbose_name="lowest_height_meters_standard_elevation_zero",
                    ),
                ),
                (
                    "maximum_height_meters_standard_elevation_zero",
                    models.CharField(
                        blank=True,
                        help_text="helptext for maximum_height_meters_standard_elevation_zero",
                        max_length=250,
                        verbose_name="maximum_height_meters_standard_elevation_zero",
                    ),
                ),
                (
                    "original_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from the creation of the original resource.",
                        null=True,
                        verbose_name="Comment on the original document",
                    ),
                ),
                (
                    "digitisation_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from digitisation.",
                        null=True,
                        verbose_name="Comment from digitisation",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "access",
                    models.ForeignKey(
                        blank=True,
                        help_text="Whether access to the resource is restricted or if it is open to the public.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_convolutecards_access_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Access",
                    ),
                ),
                (
                    "copyright",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for copyright",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_convolutecards_copyright_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Copyright",
                    ),
                ),
                (
                    "creator_metadata",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_metadata",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_convolutecards_creator_metadata_actor",
                        to="archiv.actor",
                        verbose_name="Creator of metadata",
                    ),
                ),
                (
                    "creator_original",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_original",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_convolutecards_creator_original_actor",
                        to="archiv.actor",
                        verbose_name="Creator of original document",
                    ),
                ),
                (
                    "creator_scan",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_scan",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_convolutecards_creator_scan_actor",
                        to="archiv.actor",
                        verbose_name="Creator of scan",
                    ),
                ),
                (
                    "equipment_scan",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for equipment_scan",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_convolutecards_equipment_scan_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Equipment used for scanning",
                    ),
                ),
                (
                    "excavation_post_excavation",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for excavation_post_excavation",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_convolutecards_excavation_post_excavation_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Whether it was created during excavation or after (post-excavation)",
                    ),
                ),
                (
                    "file_extension",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for file_extension",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_convolutecards_file_extension_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File extension",
                    ),
                ),
                (
                    "original_material",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for original_material",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_convolutecards_original_material_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Material of original document",
                    ),
                ),
                (
                    "site_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="Abbreviation of Tell el-Daba is 'TD'.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_convolutecards_site_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Site ID",
                    ),
                ),
                (
                    "source_original_copy_edited_copy",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for source_original_copy_edited_copy",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_convolutecards_source_original_copy_edited_copy_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Wheter source is a original or a copy",
                    ),
                ),
                (
                    "document_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for document_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_convolutecards_document_type_documenttypes",
                        to="archiv.documenttypes",
                        verbose_name="Document type",
                    ),
                ),
                (
                    "excavation_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="helptext for excavation_id",
                        related_name="rvn_convolutecards_excavation_id_excavationseasons",
                        to="archiv.excavationseasons",
                        verbose_name="Excavation Season",
                    ),
                ),
            ],
            options={
                "verbose_name": "Convolute cards",
                "ordering": ["filename_document_id"],
            },
        ),
        migrations.CreateModel(
            name="Fielddrawing",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        blank=True,
                        help_text="Consists of document_ID and document_title, separated by two underscores. For example file name ‘TD_FZ_1234__TD_F-I_j21_Planum1’ consists of the document_ID ‘TD_FZ_1234’ which is separated by two underscores from the document title describing the contents of the document ‘TD(Tell el-Daba)_F/I(area)_j21(square)_ Planum 1’.",
                        max_length=250,
                        verbose_name="Filename",
                    ),
                ),
                (
                    "document_id",
                    models.CharField(
                        blank=True,
                        help_text="The project-specific unique identifier of the document which was scanned. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (FZ for Feldzeichnung) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234). For example document ID ‘TD_FZ_1234’ means ‘Tell el-Daba_field drawing_inventory number 1234’).",
                        max_length=250,
                        verbose_name="Document ID",
                    ),
                ),
                (
                    "document_title",
                    models.CharField(
                        blank=True,
                        help_text="A description of the content of the document.  It allows information about the contents of the file to be understood by a human being without opening it. For field drawings the document title consists of abbreviation for site_excavation area_square trench_content of field drawing (e.g.: TD_F-I_j21_Planum1).",
                        max_length=250,
                        verbose_name="Document title",
                    ),
                ),
                (
                    "creation_date_original",
                    models.DateField(
                        blank=True,
                        help_text="Date when the field drawing was made.",
                        null=True,
                        verbose_name="Creation date of original document",
                    ),
                ),
                (
                    "creation_date_scan",
                    models.DateField(
                        blank=True,
                        help_text="Date when the scan was made.",
                        null=True,
                        verbose_name="Creation date scan",
                    ),
                ),
                (
                    "creation_date_metadata",
                    models.DateField(
                        blank=True,
                        help_text="Date when metadata was created.",
                        null=True,
                        verbose_name="Creation date metadata",
                    ),
                ),
                (
                    "storage_folder_original",
                    models.CharField(
                        blank=True,
                        help_text="The text on the label of the folder in the analogue TD archive, where the original is held.",
                        max_length=250,
                        verbose_name="Title of the folder where the original fielddrawing is kept",
                    ),
                ),
                (
                    "resolution_scan_ppi",
                    models.IntegerField(
                        blank=True,
                        help_text="Scan resolution settings. ",
                        null=True,
                        verbose_name="Scan resolution",
                    ),
                ),
                (
                    "original_inventory_number",
                    models.CharField(
                        blank=True,
                        help_text="Inventory number of the original fielddrawing. An inventory number was given to each field drawing during the excavations. The inventory number is part of the unique identifier of the field drawing. If a field drawing did not have an inventory number, or there was an error with the inventory number, then a new inventory number consisting of the project name ‘4DPuzzle’ and a running number was created, e.g.: 4DPuzzle1234). The list of the new inventory numbers is kept in the Excel file ‘Metadaten.xlsl’, worksheet  ‘Resource_4DPuzzle_number’).",
                        max_length=250,
                        verbose_name="Inventory number of original",
                    ),
                ),
                (
                    "find_inventory_number",
                    models.CharField(
                        blank=True,
                        help_text="Inventory number of a find which is shown on the fielddrawing.",
                        max_length=250,
                        verbose_name="Inventory number of a find drawn on the fielddrawing",
                    ),
                ),
                (
                    "amendment_date",
                    models.CharField(
                        blank=True,
                        help_text="Date when the amendment was made.",
                        max_length=250,
                        verbose_name="Amendment date",
                    ),
                ),
                (
                    "stratum_id_relative",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of a relative stratum. Relative stratum is a group of stratigraphic units which are thought to belong to a chronological phase (the ID contains: abbreviation of site_excavation area_relative stratum e.g.: TD_F-I_a is the ID of stratum a in area F-I in Tell el-Daba).",
                        max_length=250,
                        verbose_name="Stratum (relative)",
                    ),
                ),
                (
                    "stratum_id_absolute_prepub",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier of an absolute stratum. An absolute stratum is a group of stratigraphic units which were confirmed to belong to a chronological phase during post-excavation analysis but before publication (the ID contains: abbreviation of site_excavation area_absolute stratum e.g.: TD_F-I_A is the ID of the absolute stratum A in area F-I in Tell el-Daba). ",
                        max_length=250,
                        verbose_name="Stratum (absolute)",
                    ),
                ),
                (
                    "stratum_comment",
                    models.TextField(
                        blank=True,
                        help_text="Transcript of the handwritten comments and notes on the stratum written on the field drawing. ",
                        null=True,
                        verbose_name="Stratum (comment)",
                    ),
                ),
                (
                    "month",
                    models.CharField(
                        blank=True,
                        help_text="Month when the field drawing was made.",
                        max_length=250,
                        verbose_name="Fieldwork month",
                    ),
                ),
                (
                    "scale",
                    models.CharField(
                        blank=True,
                        help_text="Drawing scale of the field drawing.",
                        max_length=250,
                        verbose_name="Scale of drawing",
                    ),
                ),
                (
                    "original_comment",
                    models.TextField(
                        blank=True,
                        help_text="Transcript of additional information found on the field drawing.",
                        null=True,
                        verbose_name="Comment on the original document",
                    ),
                ),
                (
                    "digitisation_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from creation of the scan (e.g. noticing of measurement errors, etc.) ",
                        null=True,
                        verbose_name="Comment from digitisation",
                    ),
                ),
                (
                    "creation_year_original",
                    models.TextField(
                        blank=True,
                        help_text="Year when the field drawing was made.",
                        null=True,
                        verbose_name="Creation year of original document",
                    ),
                ),
                (
                    "season",
                    models.TextField(
                        blank=True,
                        help_text="Fieldwork season when the field drawing was made (H = Herbst = autumn; F = Frühling = spring).",
                        null=True,
                        verbose_name="Fieldwork season",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "access",
                    models.ForeignKey(
                        blank=True,
                        help_text="Whether access to the resource is restricted or if it is open to the public.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fielddrawing_access_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Access",
                    ),
                ),
                (
                    "amendment_drawn_by",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Person who made amendments to the field drawing.",
                        related_name="rvn_fielddrawing_amendment_drawn_by_actor",
                        to="archiv.actor",
                        verbose_name="Drawer of amendment to the fielddrawing",
                    ),
                ),
                (
                    "archaeological_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text=" ",
                        related_name="rvn_fielddrawing_archaeological_object_id_archaeologicalobjectid",
                        to="archiv.archaeologicalobjectid",
                        verbose_name="Archaeological object ID",
                    ),
                ),
                (
                    "copyright",
                    models.ForeignKey(
                        blank=True,
                        help_text="Copyright holder of the document. ",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fielddrawing_copyright_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Copyright",
                    ),
                ),
                (
                    "creator_metadata",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Person who created the metadata.",
                        related_name="rvn_fielddrawing_creator_metadata_actor",
                        to="archiv.actor",
                        verbose_name="Creator of metadata",
                    ),
                ),
                (
                    "creator_original",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Person who created the original field drawing.",
                        related_name="rvn_fielddrawing_creator_original_actor",
                        to="archiv.actor",
                        verbose_name="Creator of original",
                    ),
                ),
                (
                    "creator_scan",
                    models.ForeignKey(
                        blank=True,
                        help_text="Organisation who carried out the scanning.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fielddrawing_creator_scan_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Creator of scan",
                    ),
                ),
                (
                    "document_type",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Type of document – for field drawing metadata this is always ‘Feldzeichnung’ (Fielddrawing).",
                        related_name="rvn_fielddrawing_document_type_documenttypes",
                        to="archiv.documenttypes",
                        verbose_name="Document type",
                    ),
                ),
                (
                    "drawer_monogram",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Monogram of the person who drew the field drawing.  ",
                        related_name="rvn_fielddrawing_drawer_monogram_actor",
                        to="archiv.actor",
                        verbose_name="Monogram of drawer",
                    ),
                ),
                (
                    "equipment_scan",
                    models.ForeignKey(
                        blank=True,
                        help_text="The scanner which was used (brand, product name and number).",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fielddrawing_equipment_scan_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Scanner",
                    ),
                ),
                (
                    "excavation_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="helptext for excavation_id",
                        related_name="rvn_fielddrawing_excavation_id_excavationseasons",
                        to="archiv.excavationseasons",
                        verbose_name="Excavation Season",
                    ),
                ),
                (
                    "excavation_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).",
                        related_name="rvn_fielddrawing_excavation_object_id_excavationobjectid",
                        to="archiv.excavationobjectid",
                        verbose_name="Excavation object ID",
                    ),
                ),
                (
                    "excavation_post_excavation",
                    models.ForeignKey(
                        blank=True,
                        help_text="When the document was created. Field drawings were always created in the field, so the entry is always ‘excavation’.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fielddrawing_excavation_post_excavation_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Whether it was created during excavation or after (post-excavation)",
                    ),
                ),
                (
                    "file_extension",
                    models.ForeignKey(
                        blank=True,
                        help_text="File extension of the scan.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fielddrawing_file_extension_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File extension",
                    ),
                ),
                (
                    "original_material",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Material of original (Millimetrepaper (Millimeterpapier), Transparentpapier (tracing paper), Kopierpapier (photocopy)).",
                        related_name="rvn_fielddrawing_original_material_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Material of original document",
                    ),
                ),
                (
                    "site_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="Abbreviation of Tell el-Daba is 'TD'.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fielddrawing_site_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Site ID",
                    ),
                ),
                (
                    "source_original_copy_edited_copy",
                    models.ForeignKey(
                        blank=True,
                        help_text="The original document was either a original field drawing, a photocopy of a field drawing or an edited photocopy of a field drawing (with handwritten comments).",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fielddrawing_source_original_copy_edited_copy_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Scan was either made from an original fielddrawing, a copy of a fielddrawing or copy of a fielddrawing that was edited",
                    ),
                ),
            ],
            options={
                "verbose_name": "Fielddrawing",
                "ordering": ["filename"],
            },
        ),
        migrations.CreateModel(
            name="Film",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "film_id",
                    models.CharField(
                        blank=True,
                        help_text="The film ID is a project-specific unique identifier. The film IDs consist of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. SWnegfilm for black &white negative film, FDfilm for colour slide film, FDdig for colour slide film digitised ) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
                        max_length=250,
                        verbose_name="Film ID",
                    ),
                ),
                (
                    "film_number",
                    models.IntegerField(
                        blank=True,
                        help_text="helptext for film_number",
                        null=True,
                        verbose_name="Film number",
                    ),
                ),
                (
                    "addition_film_identifier",
                    models.CharField(
                        blank=True,
                        help_text="helptext for addition_film_identifier",
                        max_length=250,
                        verbose_name="Addition film identifier",
                    ),
                ),
                (
                    "foto_numbers_missing",
                    models.CharField(
                        blank=True,
                        help_text="helptext for foto_numbers_missing",
                        max_length=250,
                        verbose_name="Foto numbers missing",
                    ),
                ),
                (
                    "decomposition_phenomenon",
                    models.TextField(
                        blank=True,
                        help_text="The films were visually examined if they show signs of damage and decomposition. This field contains a description of the results.",
                        null=True,
                        verbose_name="Decomposition phenomenon",
                    ),
                ),
                (
                    "acetic_acid_smell",
                    models.CharField(
                        blank=True,
                        help_text="If acidic smell could be identified it is noted here.",
                        max_length=250,
                        verbose_name="Acetic acid smell",
                    ),
                ),
                (
                    "storage_folder_original",
                    models.CharField(
                        blank=True,
                        help_text="Inscription visible on the label on the folder where the film is kept.",
                        max_length=250,
                        verbose_name="Storage folder original",
                    ),
                ),
                (
                    "original_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from the creation of the original resource.",
                        null=True,
                        verbose_name="Comment on the original document",
                    ),
                ),
                (
                    "digitisation_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from digitisation.",
                        null=True,
                        verbose_name="Comment from digitisation",
                    ),
                ),
                (
                    "creation_year_original",
                    models.TextField(
                        blank=True,
                        help_text="helptext for creation_year_original",
                        null=True,
                        verbose_name="Creation year original",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "document_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for document_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_film_document_type_documenttypes",
                        to="archiv.documenttypes",
                        verbose_name="Document type",
                    ),
                ),
                (
                    "equipment_camera_brand",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for equipment_camera_brand",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_film_equipment_camera_brand_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Equipment camera brand",
                    ),
                ),
                (
                    "excavation_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="helptext for excavation_id",
                        related_name="rvn_film_excavation_id_excavationseasons",
                        to="archiv.excavationseasons",
                        verbose_name="Excavation Season",
                    ),
                ),
                (
                    "film_brand",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for film_brand",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_film_film_brand_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Film brand",
                    ),
                ),
                (
                    "film_format",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for film_format",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_film_film_format_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Film format",
                    ),
                ),
                (
                    "original_material",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_film_original_material_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Material of original document",
                    ),
                ),
            ],
            options={
                "verbose_name": "Photographic Film",
                "ordering": ["film_id"],
            },
        ),
        migrations.CreateModel(
            name="Fotoborndigital",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "folder_name",
                    models.CharField(
                        blank=True,
                        help_text="Folder name is composed like the filenames: it consists of a folder ID and a folder title, separated by two underscores. ",
                        max_length=250,
                        verbose_name="Folder name",
                    ),
                ),
                (
                    "folder_id",
                    models.CharField(
                        blank=True,
                        help_text="The project-specific unique identifier of the folder. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (DF for digital photo) and a 4DPuzzle inventory number.",
                        max_length=250,
                        verbose_name="Folder ID",
                    ),
                ),
                (
                    "folder_title",
                    models.CharField(
                        blank=True,
                        help_text="A description of the content of the folder. \xa0It allows information about the contents of the file to be understood by a human being without opening it. It contains information about inventory numbers, excavation objects, find types etc.",
                        max_length=250,
                        verbose_name="Folder title",
                    ),
                ),
                (
                    "folder_name_old",
                    models.CharField(
                        blank=True,
                        help_text="helptext for folder_name_old",
                        max_length=250,
                        verbose_name="Old folder name",
                    ),
                ),
                (
                    "path_filename_old",
                    models.CharField(
                        blank=True,
                        help_text="helptext for path_filename_old",
                        max_length=250,
                        verbose_name="Data path in old TD archive",
                    ),
                ),
                (
                    "path_filename_arche",
                    models.CharField(
                        blank=True,
                        help_text="helptext for path_filename_arche",
                        max_length=250,
                        verbose_name="Data path in ARCHE",
                    ),
                ),
                (
                    "creation_date_metadata",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_metadata",
                        null=True,
                        verbose_name="Creation date metadata",
                    ),
                ),
                (
                    "find_inventory_number_from_to",
                    models.CharField(
                        blank=True,
                        help_text="helptext for find_inventory_number_from_to",
                        max_length=250,
                        verbose_name="Inventory number of a find ",
                    ),
                ),
                (
                    "creation_year_original",
                    models.CharField(
                        blank=True,
                        help_text="helptext for creation_year_original",
                        max_length=250,
                        verbose_name="Creation year original",
                    ),
                ),
                (
                    "original_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from the creation of the original resource.",
                        null=True,
                        verbose_name="Comment on the original document",
                    ),
                ),
                (
                    "digitisation_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from digitisation.",
                        null=True,
                        verbose_name="Comment from digitisation",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "access",
                    models.ForeignKey(
                        blank=True,
                        help_text="Whether access to the resource is restricted or if it is open to the public.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fotoborndigital_access_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Access",
                    ),
                ),
                (
                    "copyright",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for copyright",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fotoborndigital_copyright_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Copyright",
                    ),
                ),
                (
                    "creator_metadata",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_metadata",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fotoborndigital_creator_metadata_actor",
                        to="archiv.actor",
                        verbose_name="Creator of metadata",
                    ),
                ),
                (
                    "document_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for document_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fotoborndigital_document_type_documenttypes",
                        to="archiv.documenttypes",
                        verbose_name="Document type",
                    ),
                ),
                (
                    "excavation_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).",
                        related_name="rvn_fotoborndigital_excavation_object_id_excavationobjectid",
                        to="archiv.excavationobjectid",
                        verbose_name="Excavation object ID",
                    ),
                ),
                (
                    "site_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="Abbreviation of Tell el-Daba is 'TD'.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fotoborndigital_site_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Site ID",
                    ),
                ),
            ],
            options={
                "verbose_name": "Fotos born digital",
                "ordering": ["folder_name"],
            },
        ),
        migrations.CreateModel(
            name="Fotosgescannt",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        blank=True,
                        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
                        max_length=250,
                        verbose_name="Filename",
                    ),
                ),
                (
                    "document_id",
                    models.CharField(
                        blank=True,
                        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. DR for Digital Resource) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
                        max_length=250,
                        verbose_name="Document ID",
                    ),
                ),
                (
                    "document_title",
                    models.CharField(
                        blank=True,
                        help_text="A description of the content of the document. \xa0It allows information about the contents of the file to be understood by a human being without opening it. ",
                        max_length=250,
                        verbose_name="Document title",
                    ),
                ),
                (
                    "filename_old",
                    models.CharField(
                        blank=True,
                        help_text="helptext for filename_old",
                        max_length=250,
                        verbose_name="Filename old ",
                    ),
                ),
                (
                    "film_number",
                    models.IntegerField(
                        blank=True,
                        help_text="helptext for film_number",
                        null=True,
                        verbose_name="Film number",
                    ),
                ),
                (
                    "photo_number",
                    models.CharField(
                        blank=True,
                        help_text="helptext for photo_number",
                        max_length=250,
                        verbose_name="Photo number",
                    ),
                ),
                (
                    "creation_date_original",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_original",
                        null=True,
                        verbose_name="Creation date of analogue photo",
                    ),
                ),
                (
                    "creation_year_original",
                    models.CharField(
                        blank=True,
                        help_text="helptext for creation_year_original",
                        max_length=250,
                        verbose_name="Creation year of analogue photo",
                    ),
                ),
                (
                    "creation_date_scan",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_scan",
                        null=True,
                        verbose_name="Creation date of scan",
                    ),
                ),
                (
                    "creation_date_metadata",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_metadata",
                        null=True,
                        verbose_name="Creation date of metadata",
                    ),
                ),
                (
                    "resolution_scan_ppi",
                    models.IntegerField(
                        blank=True,
                        help_text="helptext for resolution_scan_ppi",
                        null=True,
                        verbose_name="Resolution of scan",
                    ),
                ),
                (
                    "pixel_size",
                    models.CharField(
                        blank=True,
                        help_text="helptext for pixel_size",
                        max_length=250,
                        verbose_name="Pixel size",
                    ),
                ),
                (
                    "find_inventory_number",
                    models.CharField(
                        blank=True,
                        help_text="helptext for find_inventory_number",
                        max_length=250,
                        verbose_name="Find inventor number",
                    ),
                ),
                (
                    "season",
                    models.CharField(
                        blank=True,
                        help_text="helptext for season",
                        max_length=250,
                        verbose_name="Season ",
                    ),
                ),
                (
                    "original_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from the creation of the original resource.",
                        null=True,
                        verbose_name="Comment on the original document",
                    ),
                ),
                (
                    "digitisation_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from digitisation.",
                        null=True,
                        verbose_name="Comment from digitisation",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "access",
                    models.ForeignKey(
                        blank=True,
                        help_text="Whether access to the resource is restricted or if it is open to the public.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fotosgescannt_access_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Access",
                    ),
                ),
                (
                    "archaeological_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The unique identifier of an archaeological object. Archaeological objects are all objects that were created in the past, e.g. in the Bronze Age. An archaeological object ID contains the abbreviation of site_area_square trench_name of archaeological object (e.g.: TD_F-I_o19_Grab1 means Tell el-Daba, area F-I, square o19, grave 1).",
                        related_name="rvn_fotosgescannt_archaeological_object_id_archaeologicalobjectid",
                        to="archiv.archaeologicalobjectid",
                        verbose_name="Archaeological object ID",
                    ),
                ),
                (
                    "archaeological_object_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for archaeological_object_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fotosgescannt_archaeological_object_type_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Archeological object type",
                    ),
                ),
                (
                    "copyright",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for copyright",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fotosgescannt_copyright_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Copyright",
                    ),
                ),
                (
                    "creator_metadata",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_metadata",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fotosgescannt_creator_metadata_actor",
                        to="archiv.actor",
                        verbose_name="Creator of metadata",
                    ),
                ),
                (
                    "creator_original",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_original",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fotosgescannt_creator_original_actor",
                        to="archiv.actor",
                        verbose_name="Creator of original photo",
                    ),
                ),
                (
                    "creator_scan",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_scan",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fotosgescannt_creator_scan_actor",
                        to="archiv.actor",
                        verbose_name="Creator of scan",
                    ),
                ),
                (
                    "document_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Digitised photo",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fotosgescannt_document_type_documenttypes",
                        to="archiv.documenttypes",
                        verbose_name="Document type",
                    ),
                ),
                (
                    "equipment_scan",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for equipment_scan",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fotosgescannt_equipment_scan_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Equipment used for scanning",
                    ),
                ),
                (
                    "excavation_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="helptext for excavation_id",
                        related_name="rvn_fotosgescannt_excavation_id_excavationseasons",
                        to="archiv.excavationseasons",
                        verbose_name="Excavation Season",
                    ),
                ),
                (
                    "excavation_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).",
                        related_name="rvn_fotosgescannt_excavation_object_id_excavationobjectid",
                        to="archiv.excavationobjectid",
                        verbose_name="Excavation object ID",
                    ),
                ),
                (
                    "excavation_post_excavation",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for excavation_post_excavation",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fotosgescannt_excavation_post_excavation_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Whether it was created during excavation or after (post-excavation)",
                    ),
                ),
                (
                    "file_extension",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for file_extension",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fotosgescannt_file_extension_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File extension of scan",
                    ),
                ),
                (
                    "film_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for film_id",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fotosgescannt_film_id_film",
                        to="archiv.film",
                        verbose_name="Film ID",
                    ),
                ),
                (
                    "find_material",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for find_material",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fotosgescannt_find_material_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Find material",
                    ),
                ),
                (
                    "find_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for find_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fotosgescannt_find_type_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Find type",
                    ),
                ),
                (
                    "site_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="Abbreviation of Tell el-Daba is 'TD'.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fotosgescannt_site_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Site ID",
                    ),
                ),
                (
                    "source_original_copy_edited_copy",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for source_original_copy_edited_copy",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fotosgescannt_source_original_copy_edited_copy_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Wheter source is a original or a copy",
                    ),
                ),
            ],
            options={
                "verbose_name": "Fotos gescannt",
                "ordering": ["filename"],
            },
        ),
        migrations.CreateModel(
            name="Fundinventar4DPuzzleID",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "find_inventory_4dpuzzle_number",
                    models.CharField(
                        blank=True,
                        help_text="helptext for find_inventory_4dpuzzle_number",
                        max_length=250,
                        verbose_name="Find inventory 4DPuzzle number",
                    ),
                ),
                (
                    "find_local_number",
                    models.CharField(
                        blank=True,
                        help_text="helptext for find_local_number",
                        max_length=250,
                        verbose_name="Find local number",
                    ),
                ),
                (
                    "convolute_inventory_number",
                    models.CharField(
                        blank=True,
                        help_text="helptext for convolute_inventory_number",
                        max_length=250,
                        verbose_name="Convolute inventory number",
                    ),
                ),
                (
                    "corresponding_to_inventory_number",
                    models.CharField(
                        blank=True,
                        help_text="helptext for corresponding_to_inventory_number",
                        max_length=250,
                        verbose_name="Corresponding to inventory number",
                    ),
                ),
                (
                    "find_comment",
                    models.TextField(
                        blank=True,
                        help_text="helptext for find_comment",
                        null=True,
                        verbose_name="Find comment",
                    ),
                ),
                (
                    "stratum_comment",
                    models.TextField(
                        blank=True,
                        help_text="helptext for stratum_comment",
                        null=True,
                        verbose_name="Stratum Comment",
                    ),
                ),
                (
                    "find_date",
                    models.DateField(
                        blank=True,
                        help_text="helptext for find_date",
                        null=True,
                        verbose_name="Find date",
                    ),
                ),
                (
                    "storage_find",
                    models.CharField(
                        blank=True,
                        help_text="helptext for storage_find",
                        max_length=250,
                        verbose_name="Storage of find",
                    ),
                ),
                (
                    "digitisation_comment",
                    models.TextField(
                        blank=True,
                        help_text="helptext for digitisation_comment",
                        null=True,
                        verbose_name="Comment from digitisation",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "access",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for access",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventar4dpuzzleid_access_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Access",
                    ),
                ),
                (
                    "archaeological_object_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for archaeological_object_id",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventar4dpuzzleid_archaeological_object_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Archaeological object ID",
                    ),
                ),
                (
                    "creator_metadata",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_metadata",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventar4dpuzzleid_creator_metadata_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Creator of metadata",
                    ),
                ),
                (
                    "excavation_object_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for excavation_object_id",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventar4dpuzzleid_excavation_object_id_excavationobjectid",
                        to="archiv.excavationobjectid",
                        verbose_name="Excavation object ID",
                    ),
                ),
                (
                    "find_material",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for find_material",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventar4dpuzzleid_find_material_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Find material",
                    ),
                ),
                (
                    "find_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for find_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventar4dpuzzleid_find_type_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Find type",
                    ),
                ),
                (
                    "phase_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for phase_id",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventar4dpuzzleid_phase_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Phase ID",
                    ),
                ),
                (
                    "relatedto",
                    models.ManyToManyField(
                        blank=True,
                        help_text="helptext for relatedto",
                        related_name="rvn_fundinventar4dpuzzleid_relatedto_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File is related to other TD resources",
                    ),
                ),
                (
                    "stratum_id_absolute_prepub",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for stratum_id_absolute_prepub",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventar4dpuzzleid_stratum_id_absolute_prepub_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Stratum ID absolute pre publication",
                    ),
                ),
                (
                    "stratum_id_relative",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for stratum_id_relative",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventar4dpuzzleid_stratum_id_relative_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Stratum ID relative",
                    ),
                ),
                (
                    "uncertainty_excavation_digitisation",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for uncertainty_excavation_digitisation",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventar4dpuzzleid_uncertainty_excavation_digitisation_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Whether it was created during excavation or digital",
                    ),
                ),
            ],
            options={
                "verbose_name": "Fundinventar 4DPuzzle ID",
                "ordering": ["find_inventory_4dpuzzle_number"],
            },
        ),
        migrations.CreateModel(
            name="FundinventarInventarnummern",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "find_inventory_number",
                    models.CharField(
                        blank=True,
                        help_text="helptext for find_inventory_number",
                        max_length=250,
                        verbose_name="Find inventory number",
                    ),
                ),
                (
                    "find_local_number",
                    models.CharField(
                        blank=True,
                        help_text="helptext for find_local_number",
                        max_length=250,
                        verbose_name="Find local number",
                    ),
                ),
                (
                    "convolute_inventory_number",
                    models.CharField(
                        blank=True,
                        help_text="helptext for convolute_inventory_number",
                        max_length=250,
                        verbose_name="Convolute inventory number",
                    ),
                ),
                (
                    "find_comment",
                    models.TextField(
                        blank=True,
                        help_text="helptext for find_comment",
                        null=True,
                        verbose_name="Find comment",
                    ),
                ),
                (
                    "stratum_comment",
                    models.TextField(
                        blank=True,
                        help_text="helptext for stratum_comment",
                        null=True,
                        verbose_name="Stratum Comment",
                    ),
                ),
                (
                    "find_date",
                    models.DateField(
                        blank=True,
                        help_text="helptext for find_date",
                        null=True,
                        verbose_name="Find date",
                    ),
                ),
                (
                    "storage_find",
                    models.CharField(
                        blank=True,
                        help_text="helptext for storage_find",
                        max_length=250,
                        verbose_name="Storage of find",
                    ),
                ),
                (
                    "digitisation_comment",
                    models.TextField(
                        blank=True,
                        help_text="helptext for digitisation_comment",
                        null=True,
                        verbose_name="Comment from digitisation",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "access",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for access",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarinventarnummern_access_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Access",
                    ),
                ),
                (
                    "archaeological_object_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for archaeological_object_id",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarinventarnummern_archaeological_object_id_archaeologicalobjectid",
                        to="archiv.archaeologicalobjectid",
                        verbose_name="Archaeological object ID",
                    ),
                ),
                (
                    "corresponding_to_inventory_number",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for corresponding_to_inventory_number",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarinventarnummern_corresponding_to_inventory_number_fundinventarinventarnummern",
                        to="archiv.fundinventarinventarnummern",
                        verbose_name="Corresponding to inventory number",
                    ),
                ),
                (
                    "creator_metadata",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_metadata",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarinventarnummern_creator_metadata_actor",
                        to="archiv.actor",
                        verbose_name="Creator of metadata",
                    ),
                ),
                (
                    "excavation_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="helptext for excavation_object_id",
                        related_name="rvn_fundinventarinventarnummern_excavation_object_id_excavationobjectid",
                        to="archiv.excavationobjectid",
                        verbose_name="Excavation object ID",
                    ),
                ),
                (
                    "find_material",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for find_material",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarinventarnummern_find_material_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Find material",
                    ),
                ),
                (
                    "find_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for find_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarinventarnummern_find_type_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Find type",
                    ),
                ),
                (
                    "phase_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for phase_id",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarinventarnummern_phase_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Phase ID",
                    ),
                ),
                (
                    "relatedto",
                    models.ManyToManyField(
                        blank=True,
                        help_text="helptext for relatedto",
                        related_name="rvn_fundinventarinventarnummern_relatedto_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File is related to other TD resources",
                    ),
                ),
                (
                    "stratum_id_absolute_prepub",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for stratum_id_absolute_prepub",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarinventarnummern_stratum_id_absolute_prepub_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Stratum ID absolute pre publication",
                    ),
                ),
                (
                    "stratum_id_relative",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for stratum_id_relative",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarinventarnummern_stratum_id_relative_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Stratum ID relative",
                    ),
                ),
                (
                    "uncertainty_excavation_digitisation",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for uncertainty_excavation_digitisation",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarinventarnummern_uncertainty_excavation_digitisation_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Whether it was created during excavation or digital",
                    ),
                ),
            ],
            options={
                "verbose_name": "Fundinventar Inventarnummern",
                "ordering": ["find_inventory_number"],
            },
        ),
        migrations.CreateModel(
            name="FundinventarKonvolutnummern",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "convolute_inventory_number",
                    models.CharField(
                        blank=True,
                        help_text="helptext for convolute_inventory_number",
                        max_length=250,
                        verbose_name="Convolute inventory number",
                    ),
                ),
                (
                    "convolute_subnumber",
                    models.CharField(
                        blank=True,
                        help_text="helptext for convolute_subnumber",
                        max_length=250,
                        verbose_name="Convolute subnumber",
                    ),
                ),
                (
                    "find_local_number",
                    models.CharField(
                        blank=True,
                        help_text="helptext for find_local_number",
                        max_length=250,
                        verbose_name="Find local number",
                    ),
                ),
                (
                    "corresponding_to_inventory_number",
                    models.CharField(
                        blank=True,
                        help_text="helptext for corresponding_to_inventory_number",
                        max_length=250,
                        verbose_name="Corresponding to inventory number",
                    ),
                ),
                (
                    "find_comment",
                    models.TextField(
                        blank=True,
                        help_text="helptext for find_comment",
                        null=True,
                        verbose_name="Find comment",
                    ),
                ),
                (
                    "stratum_comment",
                    models.TextField(
                        blank=True,
                        help_text="helptext for stratum_comment",
                        null=True,
                        verbose_name="Stratum Comment",
                    ),
                ),
                (
                    "find_date",
                    models.DateField(
                        blank=True,
                        help_text="helptext for find_date",
                        null=True,
                        verbose_name="Find date",
                    ),
                ),
                (
                    "relatedto",
                    models.CharField(
                        blank=True,
                        help_text="helptext for relatedto",
                        max_length=250,
                        verbose_name="File is related to other TD resources",
                    ),
                ),
                (
                    "digitisation_comment",
                    models.TextField(
                        blank=True,
                        help_text="helptext for digitisation_comment",
                        null=True,
                        verbose_name="Comment from digitisation",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "access",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for access",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarkonvolutnummern_access_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Access",
                    ),
                ),
                (
                    "archaeological_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="helptext for archaeological_object_id",
                        related_name="rvn_fundinventarkonvolutnummern_archaeological_object_id_archaeologicalobjectid",
                        to="archiv.archaeologicalobjectid",
                        verbose_name="Archaeological object ID",
                    ),
                ),
                (
                    "creator_metadata",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_metadata",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarkonvolutnummern_creator_metadata_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Creator of metadata",
                    ),
                ),
                (
                    "excavation_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="helptext for excavation_object_id",
                        related_name="rvn_fundinventarkonvolutnummern_excavation_object_id_excavationobjectid",
                        to="archiv.excavationobjectid",
                        verbose_name="Excavation object ID",
                    ),
                ),
                (
                    "find_material",
                    models.ManyToManyField(
                        blank=True,
                        help_text="helptext for find_material",
                        related_name="rvn_fundinventarkonvolutnummern_find_material_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Find material",
                    ),
                ),
                (
                    "find_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for find_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarkonvolutnummern_find_type_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Find type",
                    ),
                ),
                (
                    "phase_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for phase_id",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarkonvolutnummern_phase_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Phase ID",
                    ),
                ),
                (
                    "storage_find",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for storage_find",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarkonvolutnummern_storage_find_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Storage of find",
                    ),
                ),
                (
                    "stratum_id_absolute_prepub",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for stratum_id_absolute_prepub",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarkonvolutnummern_stratum_id_absolute_prepub_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Stratum ID absolute pre publication",
                    ),
                ),
                (
                    "stratum_id_relative",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for stratum_id_relative",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarkonvolutnummern_stratum_id_relative_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Stratum ID relative",
                    ),
                ),
                (
                    "uncertainty_excavation_digitisation",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for uncertainty_excavation_digitisation",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarkonvolutnummern_uncertainty_excavation_digitisation_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Whether it was created during excavation or digital",
                    ),
                ),
            ],
            options={
                "verbose_name": "Fundinventar Konvolutnummern",
                "ordering": ["convolute_inventory_number"],
            },
        ),
        migrations.CreateModel(
            name="FundinventarMaterialproben",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "material_sample_inventory_number",
                    models.CharField(
                        blank=True,
                        help_text="helptext for material_sample_inventory_number",
                        max_length=250,
                        verbose_name="Material sample inventory number",
                    ),
                ),
                (
                    "find_local_number",
                    models.CharField(
                        blank=True,
                        help_text="helptext for find_local_number",
                        max_length=250,
                        verbose_name="Find local number",
                    ),
                ),
                (
                    "convolute_inventory_number",
                    models.CharField(
                        blank=True,
                        help_text="helptext for convolute_inventory_number",
                        max_length=250,
                        verbose_name="Convolute inventory number",
                    ),
                ),
                (
                    "corresponding_to_inventory_number",
                    models.CharField(
                        blank=True,
                        help_text="helptext for corresponding_to_inventory_number",
                        max_length=250,
                        verbose_name="Corresponding to inventory number",
                    ),
                ),
                (
                    "find_comment",
                    models.TextField(
                        blank=True,
                        help_text="helptext for find_comment",
                        null=True,
                        verbose_name="Find comment",
                    ),
                ),
                (
                    "stratum_comment",
                    models.TextField(
                        blank=True,
                        help_text="helptext for stratum_comment",
                        null=True,
                        verbose_name="Stratum Comment",
                    ),
                ),
                (
                    "find_year",
                    models.DateField(
                        blank=True,
                        help_text="helptext for find_year",
                        null=True,
                        verbose_name="Find year",
                    ),
                ),
                (
                    "digitisation_comment",
                    models.TextField(
                        blank=True,
                        help_text="helptext for digitisation_comment",
                        null=True,
                        verbose_name="Comment from digitisation",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "access",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for access",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarmaterialproben_access_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Access",
                    ),
                ),
                (
                    "archaeological_object_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for archaeological_object_id",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarmaterialproben_archaeological_object_id_excavationobjectid",
                        to="archiv.excavationobjectid",
                        verbose_name="Arachaeological object ID",
                    ),
                ),
                (
                    "creator_metadata",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_metadata",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarmaterialproben_creator_metadata_actor",
                        to="archiv.actor",
                        verbose_name="Creator of metadata",
                    ),
                ),
                (
                    "excavation_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="helptext for excavation_object_id",
                        related_name="rvn_fundinventarmaterialproben_excavation_object_id_excavationobjectid",
                        to="archiv.excavationobjectid",
                        verbose_name="Excavation object ID",
                    ),
                ),
                (
                    "find_material",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for find_material",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarmaterialproben_find_material_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Find material",
                    ),
                ),
                (
                    "find_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for find_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarmaterialproben_find_type_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Find type",
                    ),
                ),
                (
                    "phase_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for phase_id",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarmaterialproben_phase_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Phase ID",
                    ),
                ),
                (
                    "relatedto",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for relatedto",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarmaterialproben_relatedto_fundinventar4dpuzzleid",
                        to="archiv.fundinventar4dpuzzleid",
                        verbose_name="File is related to other TD resources",
                    ),
                ),
                (
                    "storage_find",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for storage_find",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarmaterialproben_storage_find_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Storage find",
                    ),
                ),
                (
                    "stratum_id_absolute_prepub",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for stratum_id_absolute_prepub",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarmaterialproben_stratum_id_absolute_prepub_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Stratum ID absolute pre publication",
                    ),
                ),
                (
                    "stratum_id_relative",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for stratum_id_relative",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarmaterialproben_stratum_id_relative_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Stratum ID relative",
                    ),
                ),
                (
                    "uncertainty_excavation_digitisation",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for uncertainty_excavation_digitisation",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarmaterialproben_uncertainty_excavation_digitisation_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Whether it was created during excavation or digital",
                    ),
                ),
            ],
            options={
                "verbose_name": "Fundinventar Materialproben",
                "ordering": ["material_sample_inventory_number"],
            },
        ),
        migrations.CreateModel(
            name="FundinventarSteininventar",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "find_inventory_number",
                    models.CharField(
                        blank=True,
                        help_text="helptext for find_inventory_number",
                        max_length=250,
                        verbose_name="Find inventory number",
                    ),
                ),
                (
                    "find_local_number",
                    models.CharField(
                        blank=True,
                        help_text="helptext for find_local_number",
                        max_length=250,
                        verbose_name="Find local number",
                    ),
                ),
                (
                    "convolute_inventory_number",
                    models.CharField(
                        blank=True,
                        help_text="helptext for convolute_inventory_number",
                        max_length=250,
                        verbose_name="Convolute inventory number",
                    ),
                ),
                (
                    "corresponding_to_inventory_number",
                    models.CharField(
                        blank=True,
                        help_text="helptext for corresponding_to_inventory_number",
                        max_length=250,
                        verbose_name="Corresponding to inventory number",
                    ),
                ),
                (
                    "find_comment",
                    models.TextField(
                        blank=True,
                        help_text="helptext for find_comment",
                        null=True,
                        verbose_name="Find comment",
                    ),
                ),
                (
                    "stratum_comment",
                    models.TextField(
                        blank=True,
                        help_text="helptext for stratum_comment",
                        null=True,
                        verbose_name="Stratum Comment",
                    ),
                ),
                (
                    "find_date",
                    models.DateField(
                        blank=True,
                        help_text="helptext for find_date",
                        null=True,
                        verbose_name="Find date",
                    ),
                ),
                (
                    "digitisation_comment",
                    models.TextField(
                        blank=True,
                        help_text="helptext for digitisation_comment",
                        null=True,
                        verbose_name="Comment from digitisation",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "access",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for access",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarsteininventar_access_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Access",
                    ),
                ),
                (
                    "archaeological_object_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for archaeological_object_id",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarsteininventar_archaeological_object_id_excavationobjectid",
                        to="archiv.excavationobjectid",
                        verbose_name="Arachaeological object ID",
                    ),
                ),
                (
                    "creator_metadata",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_metadata",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarsteininventar_creator_metadata_actor",
                        to="archiv.actor",
                        verbose_name="Creator of metadata",
                    ),
                ),
                (
                    "excavation_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="helptext for excavation_object_id",
                        related_name="rvn_fundinventarsteininventar_excavation_object_id_excavationobjectid",
                        to="archiv.excavationobjectid",
                        verbose_name="Excavation object ID",
                    ),
                ),
                (
                    "find_material",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for find_material",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarsteininventar_find_material_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Find material",
                    ),
                ),
                (
                    "find_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for find_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarsteininventar_find_type_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Find type",
                    ),
                ),
                (
                    "phase_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for phase_id",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarsteininventar_phase_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Phase ID",
                    ),
                ),
                (
                    "relatedto",
                    models.ManyToManyField(
                        blank=True,
                        help_text="helptext for relatedto",
                        related_name="rvn_fundinventarsteininventar_relatedto_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File is related to other TD resources",
                    ),
                ),
                (
                    "storage_find",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for storage_find",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarsteininventar_storage_find_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Storage of find",
                    ),
                ),
                (
                    "stratum_id_absolute_prepub",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for stratum_id_absolute_prepub",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarsteininventar_stratum_id_absolute_prepub_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Stratum ID absolute pre publication",
                    ),
                ),
                (
                    "stratum_id_relative",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for stratum_id_relative",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarsteininventar_stratum_id_relative_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Stratum ID relative",
                    ),
                ),
                (
                    "uncertainty_excavation_digitisation",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for uncertainty_excavation_digitisation",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_fundinventarsteininventar_uncertainty_excavation_digitisation_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Whether it was created during excavation or digital",
                    ),
                ),
            ],
            options={
                "verbose_name": "FundinventarSteininventar",
                "ordering": ["find_inventory_number"],
            },
        ),
        migrations.CreateModel(
            name="Findsheets",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        blank=True,
                        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
                        max_length=250,
                        verbose_name="Filename ",
                    ),
                ),
                (
                    "document_id",
                    models.CharField(
                        blank=True,
                        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. DR for Digital Resource) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
                        max_length=250,
                        verbose_name="Document ID ",
                    ),
                ),
                (
                    "document_title",
                    models.CharField(
                        blank=True,
                        help_text="A description of the content of the document. \xa0It allows information about the contents of the file to be understood by a human being without opening it. ",
                        max_length=250,
                        verbose_name="Document title",
                    ),
                ),
                (
                    "filename_old",
                    models.CharField(
                        blank=True,
                        help_text="helptext for filename_old",
                        max_length=250,
                        verbose_name="Filename old",
                    ),
                ),
                (
                    "creation_date_original",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_original",
                        null=True,
                        verbose_name="Creation date of original document",
                    ),
                ),
                (
                    "creation_year_original",
                    models.CharField(
                        blank=True,
                        help_text="helptext for creation_year_original",
                        max_length=250,
                        verbose_name="Creation year of original document",
                    ),
                ),
                (
                    "creation_date_scan",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_scan",
                        null=True,
                        verbose_name="Creation date of scan",
                    ),
                ),
                (
                    "creation_date_metadata",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_metadata",
                        null=True,
                        verbose_name="Creation date of metadata",
                    ),
                ),
                (
                    "resolution_scan_dpi",
                    models.IntegerField(
                        blank=True,
                        help_text="helptext for resolution_scan_dpi",
                        null=True,
                        verbose_name="Scan resolution",
                    ),
                ),
                (
                    "original_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from the creation of the original resource.",
                        null=True,
                        verbose_name="Comment on the original document",
                    ),
                ),
                (
                    "digitisation_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from digitisation.",
                        null=True,
                        verbose_name="Comment from digitisation",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "access",
                    models.ForeignKey(
                        blank=True,
                        help_text="Whether access to the resource is restricted or if it is open to the public.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_findsheets_access_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Access",
                    ),
                ),
                (
                    "archaeological_object_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="The unique identifier of an archaeological object. Archaeological objects are all objects that were created in the past, e.g. in the Bronze Age. An archaeological object ID contains the abbreviation of site_area_square trench_name of archaeological object (e.g.: TD_F-I_o19_Grab1 means Tell el-Daba, area F-I, square o19, grave 1).",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_findsheets_archaeological_object_id_archaeologicalobjectid",
                        to="archiv.archaeologicalobjectid",
                        verbose_name="Archaeological object ID",
                    ),
                ),
                (
                    "copyright",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for copyright",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_findsheets_copyright_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Copyright",
                    ),
                ),
                (
                    "creator_metadata",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_metadata",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_findsheets_creator_metadata_actor",
                        to="archiv.actor",
                        verbose_name="Creator of metadata",
                    ),
                ),
                (
                    "creator_original",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_original",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_findsheets_creator_original_actor",
                        to="archiv.actor",
                        verbose_name="Creator of original document",
                    ),
                ),
                (
                    "creator_scan",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_scan",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_findsheets_creator_scan_actor",
                        to="archiv.actor",
                        verbose_name="Creator of scan",
                    ),
                ),
                (
                    "document_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for document_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_findsheets_document_type_documenttypes",
                        to="archiv.documenttypes",
                        verbose_name="Document type",
                    ),
                ),
                (
                    "equipment_scan",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for equipment_scan",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_findsheets_equipment_scan_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Equipment for scan",
                    ),
                ),
                (
                    "excavation_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).",
                        related_name="rvn_findsheets_excavation_object_id_excavationobjectid",
                        to="archiv.excavationobjectid",
                        verbose_name="Excavation object ID",
                    ),
                ),
                (
                    "excavation_post_excavation",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for excavation_post_excavation",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_findsheets_excavation_post_excavation_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Whether it was created during excavation or after (post-excavation)",
                    ),
                ),
                (
                    "file_extension",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for file_extension",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_findsheets_file_extension_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File extension ",
                    ),
                ),
                (
                    "original_material",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for original_material",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_findsheets_original_material_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Material of original document",
                    ),
                ),
                (
                    "site_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="Abbreviation of Tell el-Daba is 'TD'.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_findsheets_site_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Site ID",
                    ),
                ),
                (
                    "source_original_copy_edited_copy",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for source_original_copy_edited_copy",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_findsheets_source_original_copy_edited_copy_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Wheter source is a original or a copy",
                    ),
                ),
                (
                    "storage_original",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for storage_original",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_findsheets_storage_original_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Storage of original document",
                    ),
                ),
                (
                    "find_inventory_number",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for find_inventory_number",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_findsheets_find_inventory_number_fundinventarinventarnummern",
                        to="archiv.fundinventarinventarnummern",
                        verbose_name="Find inventory number",
                    ),
                ),
                (
                    "convolute_inventory_number",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for convolute_inventory_number",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_findsheets_convolute_inventory_number_fundinventarkonvolutnummern",
                        to="archiv.fundinventarkonvolutnummern",
                        verbose_name="Convolute inventory number",
                    ),
                ),
                (
                    "bone_stone_inventory_number",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for bone_stone_inventory_number",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_findsheets_bone_stone_inventory_number_fundinventarsteininventar",
                        to="archiv.fundinventarsteininventar",
                        verbose_name="Bone or stone inventory number",
                    ),
                ),
            ],
            options={
                "verbose_name": "Findsheets",
                "ordering": ["filename"],
            },
        ),
        migrations.CreateModel(
            name="Finddrawing",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        blank=True,
                        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
                        max_length=250,
                        verbose_name="Filename ",
                    ),
                ),
                (
                    "document_id",
                    models.CharField(
                        blank=True,
                        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. DR for Digital Resource) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
                        max_length=250,
                        verbose_name="Document ID ",
                    ),
                ),
                (
                    "document_title",
                    models.CharField(
                        blank=True,
                        help_text="A description of the content of the document. \xa0It allows information about the contents of the file to be understood by a human being without opening it. ",
                        max_length=250,
                        verbose_name="Document title",
                    ),
                ),
                (
                    "filename_old",
                    models.CharField(
                        blank=True,
                        help_text="helptext for filename_old",
                        max_length=250,
                        verbose_name="Filename old",
                    ),
                ),
                (
                    "creation_date_original",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_original",
                        null=True,
                        verbose_name="Creation date of original document",
                    ),
                ),
                (
                    "creation_year_original",
                    models.CharField(
                        blank=True,
                        help_text="helptext for creation_year_original",
                        max_length=250,
                        verbose_name="Creation year of original document",
                    ),
                ),
                (
                    "creation_date_scan",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_scan",
                        null=True,
                        verbose_name="Creation date of scan",
                    ),
                ),
                (
                    "creation_date_metadata",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_metadata",
                        null=True,
                        verbose_name="Creation date of metadata",
                    ),
                ),
                (
                    "storage_folder_original",
                    models.CharField(
                        blank=True,
                        help_text="helptext for storage_folder_original",
                        max_length=250,
                        verbose_name="Storage folder of original document",
                    ),
                ),
                (
                    "equipment",
                    models.CharField(
                        blank=True,
                        help_text="helptext for equipment",
                        max_length=250,
                        verbose_name="Equiment",
                    ),
                ),
                (
                    "resolution_scan_dpi",
                    models.IntegerField(
                        blank=True,
                        help_text="helptext for resolution_scan_dpi",
                        null=True,
                        verbose_name="Scan resolution",
                    ),
                ),
                (
                    "find_date",
                    models.DateField(
                        blank=True,
                        help_text="helptext for find_date",
                        null=True,
                        verbose_name="Find datum",
                    ),
                ),
                (
                    "rendered_in_ink",
                    models.CharField(
                        blank=True,
                        help_text="helptext for rendered_in_ink",
                        max_length=250,
                        verbose_name="Rendered in ink",
                    ),
                ),
                (
                    "original_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from the creation of the original resource.",
                        null=True,
                        verbose_name="Comment on the original document",
                    ),
                ),
                (
                    "digitisation_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from digitisation.",
                        null=True,
                        verbose_name="Comment from digitisation",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "access",
                    models.ForeignKey(
                        blank=True,
                        help_text="Whether access to the resource is restricted or if it is open to the public.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_finddrawing_access_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Access",
                    ),
                ),
                (
                    "copyright",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for copyright",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_finddrawing_copyright_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Copyright",
                    ),
                ),
                (
                    "creator_metadata",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_metadata",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_finddrawing_creator_metadata_actor",
                        to="archiv.actor",
                        verbose_name="Creator of metadata",
                    ),
                ),
                (
                    "creator_original",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_original",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_finddrawing_creator_original_actor",
                        to="archiv.actor",
                        verbose_name="Creator of original document",
                    ),
                ),
                (
                    "creator_scan",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_scan",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_finddrawing_creator_scan_actor",
                        to="archiv.actor",
                        verbose_name="Creator of scan",
                    ),
                ),
                (
                    "document_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for document_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_finddrawing_document_type_documenttypes",
                        to="archiv.documenttypes",
                        verbose_name="Document type",
                    ),
                ),
                (
                    "excavation_post_excavation",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for excavation_post_excavation",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_finddrawing_excavation_post_excavation_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Whether it was created during excavation or after (post-excavation)",
                    ),
                ),
                (
                    "file_extension",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for file_extension",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_finddrawing_file_extension_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File extension ",
                    ),
                ),
                (
                    "original_material",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for original_material",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_finddrawing_original_material_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Material of original document",
                    ),
                ),
                (
                    "site_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="Abbreviation of Tell el-Daba is 'TD'.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_finddrawing_site_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Site ID",
                    ),
                ),
                (
                    "source_original_copy_edited_copy",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for source_original_copy_edited_copy",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_finddrawing_source_original_copy_edited_copy_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Wheter source is a original or a copy",
                    ),
                ),
                (
                    "find_inventory_number",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for find_inventory_number",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_finddrawing_find_inventory_number_fundinventarinventarnummern",
                        to="archiv.fundinventarinventarnummern",
                        verbose_name="Find inventory number",
                    ),
                ),
                (
                    "convolute_inventory_number",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for convolute_inventory_number",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_finddrawing_convolute_inventory_number_fundinventarkonvolutnummern",
                        to="archiv.fundinventarkonvolutnummern",
                        verbose_name="Convolute inventory number",
                    ),
                ),
                (
                    "bone_stone_inventory_number",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for bone_stone_inventory_number",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_finddrawing_bone_stone_inventory_number_fundinventarsteininventar",
                        to="archiv.fundinventarsteininventar",
                        verbose_name="Bone or stone inventory number",
                    ),
                ),
            ],
            options={
                "verbose_name": "Finddrawing",
                "ordering": ["filename"],
            },
        ),
        migrations.CreateModel(
            name="Geophysics",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        blank=True,
                        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
                        max_length=250,
                        verbose_name="Filename ",
                    ),
                ),
                (
                    "document_id",
                    models.CharField(
                        blank=True,
                        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. DR for Digital Resource) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
                        max_length=250,
                        verbose_name="Document ID ",
                    ),
                ),
                (
                    "document_title",
                    models.CharField(
                        blank=True,
                        help_text="A description of the content of the document. \xa0It allows information about the contents of the file to be understood by a human being without opening it. ",
                        max_length=250,
                        verbose_name="Document title",
                    ),
                ),
                (
                    "filename_old",
                    models.CharField(
                        blank=True,
                        help_text="helptext for filename_old",
                        max_length=250,
                        verbose_name="Filename old",
                    ),
                ),
                (
                    "creation_date_original",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_original",
                        null=True,
                        verbose_name="Creation date of original document",
                    ),
                ),
                (
                    "creation_date_archivalobject",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_archivalobject",
                        null=True,
                        verbose_name="Creation date of archival object",
                    ),
                ),
                (
                    "creation_date_metadata",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_metadata",
                        null=True,
                        verbose_name="Creation date of metadata",
                    ),
                ),
                (
                    "path_filename_old",
                    models.CharField(
                        blank=True,
                        help_text="helptext for path_filename_old",
                        max_length=250,
                        verbose_name="Data path in old TD archive",
                    ),
                ),
                (
                    "original_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from the creation of the original resource.",
                        null=True,
                        verbose_name="Comment on the original document",
                    ),
                ),
                (
                    "digitisation_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from digitisation.",
                        null=True,
                        verbose_name="Comment from digitisation",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "access",
                    models.ForeignKey(
                        blank=True,
                        help_text="Whether access to the resource is restricted or if it is open to the public.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_geophysics_access_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Access",
                    ),
                ),
                (
                    "copyright",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for copyright",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_geophysics_copyright_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Copyright",
                    ),
                ),
                (
                    "creator_archivalobject",
                    models.ForeignKey(
                        blank=True,
                        help_text="Person who processed resource for digital long-term archiving.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_geophysics_creator_archivalobject_actor",
                        to="archiv.actor",
                        verbose_name="Creator of archival object",
                    ),
                ),
                (
                    "creator_metadata",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_metadata",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_geophysics_creator_metadata_actor",
                        to="archiv.actor",
                        verbose_name="Creator of metadata",
                    ),
                ),
                (
                    "creator_original",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_original",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_geophysics_creator_original_actor",
                        to="archiv.actor",
                        verbose_name="Creator of original document",
                    ),
                ),
                (
                    "document_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for document_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_geophysics_document_type_documenttypes",
                        to="archiv.documenttypes",
                        verbose_name="Document type",
                    ),
                ),
                (
                    "equipment",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for equipment",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_geophysics_equipment_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Equipment",
                    ),
                ),
                (
                    "excavation_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).",
                        related_name="rvn_geophysics_excavation_object_id_excavationobjectid",
                        to="archiv.excavationobjectid",
                        verbose_name="Excavation object ID",
                    ),
                ),
                (
                    "excavation_post_excavation",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for excavation_post_excavation",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_geophysics_excavation_post_excavation_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Whether it was created during excavation or after (post-excavation)",
                    ),
                ),
                (
                    "file_extension_archivalobject",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for file_extension_archivalobject",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_geophysics_file_extension_archivalobject_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File extension of archival object",
                    ),
                ),
                (
                    "file_extension_original",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for file_extension_original",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_geophysics_file_extension_original_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File extension of original document",
                    ),
                ),
                (
                    "method",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for method",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_geophysics_method_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Method",
                    ),
                ),
                (
                    "site_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="Abbreviation of Tell el-Daba is 'TD'.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_geophysics_site_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Site ID",
                    ),
                ),
            ],
            options={
                "verbose_name": "Geophysics",
                "ordering": ["filename"],
            },
        ),
        migrations.CreateModel(
            name="GIS",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        blank=True,
                        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
                        max_length=250,
                        verbose_name="Filename ",
                    ),
                ),
                (
                    "document_id",
                    models.CharField(
                        blank=True,
                        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. DR for Digital Resource) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
                        max_length=250,
                        verbose_name="Document ID ",
                    ),
                ),
                (
                    "document_title",
                    models.CharField(
                        blank=True,
                        help_text="A description of the content of the document. \xa0It allows information about the contents of the file to be understood by a human being without opening it. ",
                        max_length=250,
                        verbose_name="Document title",
                    ),
                ),
                (
                    "path_filename_old",
                    models.CharField(
                        blank=True,
                        help_text="helptext for path_filename_old",
                        max_length=250,
                        verbose_name="Data path in old TD archive",
                    ),
                ),
                (
                    "path_filename_arche",
                    models.CharField(
                        blank=True,
                        help_text="helptext for path_filename_arche",
                        max_length=250,
                        verbose_name="Data path in ARCHE",
                    ),
                ),
                (
                    "creation_date_original",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_original",
                        null=True,
                        verbose_name="Creation date of original document",
                    ),
                ),
                (
                    "software_used",
                    models.CharField(
                        blank=True,
                        help_text="helptext for software_used",
                        max_length=250,
                        verbose_name="Software used",
                    ),
                ),
                (
                    "creation_date_archivalobject",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_archivalobject",
                        null=True,
                        verbose_name="Creation date of archival object",
                    ),
                ),
                (
                    "creation_date_metadata",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_metadata",
                        null=True,
                        verbose_name="Creation date of metadata",
                    ),
                ),
                (
                    "original_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from the creation of the original resource.",
                        null=True,
                        verbose_name="Comment on the original document",
                    ),
                ),
                (
                    "digitisation_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from digitisation.",
                        null=True,
                        verbose_name="Comment from digitisation",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "access",
                    models.ForeignKey(
                        blank=True,
                        help_text="Whether access to the resource is restricted or if it is open to the public.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_gis_access_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Access",
                    ),
                ),
                (
                    "archaeological_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The unique identifier of an archaeological object. Archaeological objects are all objects that were created in the past, e.g. in the Bronze Age. An archaeological object ID contains the abbreviation of site_area_square trench_name of archaeological object (e.g.: TD_F-I_o19_Grab1 means Tell el-Daba, area F-I, square o19, grave 1).",
                        related_name="rvn_gis_archaeological_object_id_archaeologicalobjectid",
                        to="archiv.archaeologicalobjectid",
                        verbose_name="Archaeological object ID",
                    ),
                ),
                (
                    "copyright",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for copyright",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_gis_copyright_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Copyright",
                    ),
                ),
                (
                    "creator_archivalobject",
                    models.ForeignKey(
                        blank=True,
                        help_text="Person who processed resource for digital long-term archiving.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_gis_creator_archivalobject_actor",
                        to="archiv.actor",
                        verbose_name="creator of archival object",
                    ),
                ),
                (
                    "creator_metadata",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_metadata",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_gis_creator_metadata_actor",
                        to="archiv.actor",
                        verbose_name="Creator of metadata",
                    ),
                ),
                (
                    "creator_original",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_original",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_gis_creator_original_actor",
                        to="archiv.actor",
                        verbose_name="Creator of original document",
                    ),
                ),
                (
                    "document_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for document_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_gis_document_type_documenttypes",
                        to="archiv.documenttypes",
                        verbose_name="Document type",
                    ),
                ),
                (
                    "excavation_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).",
                        related_name="rvn_gis_excavation_object_id_excavationobjectid",
                        to="archiv.excavationobjectid",
                        verbose_name="Excavation object ID",
                    ),
                ),
                (
                    "excavation_post_excavation",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for excavation_post_excavation",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_gis_excavation_post_excavation_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Whether it was created during excavation or after (post-excavation)",
                    ),
                ),
                (
                    "file_extension_archivalobject",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for file_extension_archivalobject",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_gis_file_extension_archivalobject_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File extension of archival object",
                    ),
                ),
                (
                    "file_extension_original",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for file_extension_original",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_gis_file_extension_original_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File extension of original document",
                    ),
                ),
                (
                    "relatedto",
                    models.ManyToManyField(
                        blank=True,
                        help_text="helptext for relatedto",
                        related_name="rvn_gis_relatedto_documenttypes",
                        to="archiv.documenttypes",
                        verbose_name="File is related to other TD resources",
                    ),
                ),
                (
                    "site_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="Abbreviation of Tell el-Daba is 'TD'.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_gis_site_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Site ID",
                    ),
                ),
            ],
            options={
                "verbose_name": "GIS",
                "ordering": ["filename"],
            },
        ),
        migrations.CreateModel(
            name="Inventorybooks",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        blank=True,
                        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
                        max_length=250,
                        verbose_name="Filename ",
                    ),
                ),
                (
                    "document_id",
                    models.CharField(
                        blank=True,
                        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. DR for Digital Resource) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
                        max_length=250,
                        verbose_name="Document ID ",
                    ),
                ),
                (
                    "document_title",
                    models.CharField(
                        blank=True,
                        help_text="A description of the content of the document. \xa0It allows information about the contents of the file to be understood by a human being without opening it. ",
                        max_length=250,
                        verbose_name="Document title",
                    ),
                ),
                (
                    "filename_old",
                    models.CharField(
                        blank=True,
                        help_text="helptext for filename_old",
                        max_length=250,
                        verbose_name="Filename old",
                    ),
                ),
                (
                    "creation_date_original",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_original",
                        null=True,
                        verbose_name="Creation date of original document",
                    ),
                ),
                (
                    "creation_year_original",
                    models.CharField(
                        blank=True,
                        help_text="helptext for creation_year_original",
                        max_length=250,
                        verbose_name="Creation year of original document",
                    ),
                ),
                (
                    "creation_date_scan",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_scan",
                        null=True,
                        verbose_name="Creation date of scan",
                    ),
                ),
                (
                    "creation_date_metadata",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_metadata",
                        null=True,
                        verbose_name="Creation date of metadata",
                    ),
                ),
                (
                    "storage_folder_original",
                    models.CharField(
                        blank=True,
                        help_text="helptext for storage_folder_original",
                        max_length=250,
                        verbose_name="Storage folder of original document",
                    ),
                ),
                (
                    "resolution_scan_dpi",
                    models.IntegerField(
                        blank=True,
                        help_text="helptext for resolution_scan_dpi",
                        null=True,
                        verbose_name="Scan resolution",
                    ),
                ),
                (
                    "original_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from the creation of the original resource.",
                        null=True,
                        verbose_name="Comment on the original document",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "access",
                    models.ForeignKey(
                        blank=True,
                        help_text="Whether access to the resource is restricted or if it is open to the public.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_inventorybooks_access_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Access",
                    ),
                ),
                (
                    "bone_stone_inventory_number",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for bone_stone_inventory_number",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_inventorybooks_bone_stone_inventory_number_fundinventarsteininventar",
                        to="archiv.fundinventarsteininventar",
                        verbose_name="Bone or stone inventory number",
                    ),
                ),
                (
                    "convolute_inventory_number",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for convolute_inventory_number",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_inventorybooks_convolute_inventory_number_fundinventarkonvolutnummern",
                        to="archiv.fundinventarkonvolutnummern",
                        verbose_name="Convolute inventory number",
                    ),
                ),
                (
                    "copyright",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for copyright",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_inventorybooks_copyright_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Copyright",
                    ),
                ),
                (
                    "creator_metadata",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_metadata",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_inventorybooks_creator_metadata_actor",
                        to="archiv.actor",
                        verbose_name="Creator of metadata",
                    ),
                ),
                (
                    "creator_original",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_original",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_inventorybooks_creator_original_actor",
                        to="archiv.actor",
                        verbose_name="Creator of original document",
                    ),
                ),
                (
                    "creator_scan",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_scan",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_inventorybooks_creator_scan_actor",
                        to="archiv.actor",
                        verbose_name="Creator of scan",
                    ),
                ),
                (
                    "document_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for document_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_inventorybooks_document_type_documenttypes",
                        to="archiv.documenttypes",
                        verbose_name="Document type",
                    ),
                ),
                (
                    "equipment_scan",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for equipment_scan",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_inventorybooks_equipment_scan_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Equipment used for scanning",
                    ),
                ),
                (
                    "excavation_post_excavation",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for excavation_post_excavation",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_inventorybooks_excavation_post_excavation_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Whether it was created during excavation or after (post-excavation)",
                    ),
                ),
                (
                    "file_extension",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for file_extension",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_inventorybooks_file_extension_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File extension",
                    ),
                ),
                (
                    "find_inventory_number",
                    models.ManyToManyField(
                        blank=True,
                        help_text="helptext for find_inventory_number",
                        related_name="rvn_inventorybooks_find_inventory_number_fundinventarinventarnummern",
                        to="archiv.fundinventarinventarnummern",
                        verbose_name="Find inventory number",
                    ),
                ),
                (
                    "original_material",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for original_material",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_inventorybooks_original_material_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Material of original document",
                    ),
                ),
                (
                    "site_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="Abbreviation of Tell el-Daba is 'TD'.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_inventorybooks_site_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Site ID",
                    ),
                ),
                (
                    "source_original_copy_edited_copy",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for source_original_copy_edited_copy",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_inventorybooks_source_original_copy_edited_copy_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Wheter source is a original or a copy",
                    ),
                ),
            ],
            options={
                "verbose_name": "Inventory books",
                "ordering": ["filename"],
            },
        ),
        migrations.CreateModel(
            name="PhasenID",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "phase_id",
                    models.CharField(
                        blank=True,
                        help_text="helptext for phase_id",
                        max_length=250,
                        verbose_name="Phase ID",
                    ),
                ),
                (
                    "phase_title",
                    models.CharField(
                        blank=True,
                        help_text="helptext for phase_title",
                        max_length=250,
                        verbose_name="Phase title",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "area",
                    models.ManyToManyField(
                        blank=True,
                        help_text="helptext for area",
                        related_name="rvn_phasenid_area_excavationobjectid",
                        to="archiv.excavationobjectid",
                        verbose_name="Area",
                    ),
                ),
                (
                    "containing_phase_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="helptext for containing_phase_id",
                        related_name="rvn_phasenid_containing_phase_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Containing phase ID",
                    ),
                ),
                (
                    "phase_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for phase_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_phasenid_phase_type_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Phase type",
                    ),
                ),
                (
                    "site_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for site_id",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_phasenid_site_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Site ID",
                    ),
                ),
            ],
            options={
                "verbose_name": "Phasen ID",
                "ordering": ["phase_id"],
            },
        ),
        migrations.CreateModel(
            name="Protocols",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        blank=True,
                        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
                        max_length=250,
                        verbose_name="Filename ",
                    ),
                ),
                (
                    "document_id",
                    models.CharField(
                        blank=True,
                        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. P for Protocol) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
                        max_length=250,
                        verbose_name="Document ID ",
                    ),
                ),
                (
                    "document_title",
                    models.CharField(
                        blank=True,
                        help_text="A description of the content of the document. \xa0It allows information about the contents of the file to be understood by a human being without opening it. ",
                        max_length=250,
                        verbose_name="Document title",
                    ),
                ),
                (
                    "filename_old",
                    models.CharField(
                        blank=True,
                        help_text="helptext for filename_old",
                        max_length=250,
                        verbose_name="Filename old",
                    ),
                ),
                (
                    "creation_date_original",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_original",
                        null=True,
                        verbose_name="Creation date of original document",
                    ),
                ),
                (
                    "creation_year_original",
                    models.CharField(
                        blank=True,
                        help_text="helptext for creation_year_original",
                        max_length=250,
                        verbose_name="Creation year of original document",
                    ),
                ),
                (
                    "creation_date_scan",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_scan",
                        null=True,
                        verbose_name="Creation date of scan",
                    ),
                ),
                (
                    "creation_date_metadata",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_metadata",
                        null=True,
                        verbose_name="Creation date of metadata",
                    ),
                ),
                (
                    "storage_folder_original",
                    models.CharField(
                        blank=True,
                        help_text="helptext for storage_folder_original",
                        max_length=250,
                        verbose_name="Storage folder of original document",
                    ),
                ),
                (
                    "resolution_scan_dpi",
                    models.IntegerField(
                        blank=True,
                        help_text="helptext for resolution_scan_dpi",
                        null=True,
                        verbose_name="Scan resolution",
                    ),
                ),
                (
                    "number_of_pages",
                    models.IntegerField(
                        blank=True,
                        help_text="helptext for number_of_pages",
                        null=True,
                        verbose_name="Number of pages",
                    ),
                ),
                (
                    "original_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from the creation of the original resource.",
                        null=True,
                        verbose_name="Comment on the original document",
                    ),
                ),
                (
                    "digitisation_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from digitisation.",
                        null=True,
                        verbose_name="Comment from digitisation",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "access",
                    models.ForeignKey(
                        blank=True,
                        help_text="Whether access to the resource is restricted or if it is open to the public.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_protocols_access_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Access",
                    ),
                ),
                (
                    "archaeological_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The unique identifier of an archaeological object. Archaeological objects are all objects that were created in the past, e.g. in the Bronze Age. An archaeological object ID contains the abbreviation of site_area_square trench_name of archaeological object (e.g.: TD_F-I_o19_Grab1 means Tell el-Daba, area F-I, square o19, grave 1).",
                        related_name="rvn_protocols_archaeological_object_id_archaeologicalobjectid",
                        to="archiv.archaeologicalobjectid",
                        verbose_name="Archaeological object ID",
                    ),
                ),
                (
                    "copyright",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for copyright",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_protocols_copyright_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Copyright",
                    ),
                ),
                (
                    "creator_metadata",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_metadata",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_protocols_creator_metadata_actor",
                        to="archiv.actor",
                        verbose_name="Creator of metadata",
                    ),
                ),
                (
                    "creator_original",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_original",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_protocols_creator_original_actor",
                        to="archiv.actor",
                        verbose_name="Creator of original document",
                    ),
                ),
                (
                    "creator_scan",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_scan",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_protocols_creator_scan_actor",
                        to="archiv.actor",
                        verbose_name="Creator of scan",
                    ),
                ),
                (
                    "document_type",
                    models.ManyToManyField(
                        blank=True,
                        help_text="helptext for document_type",
                        related_name="rvn_protocols_document_type_documenttypes",
                        to="archiv.documenttypes",
                        verbose_name="Document type",
                    ),
                ),
                (
                    "equipment_scan",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for equipment_scan",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_protocols_equipment_scan_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Equipment used for scanning",
                    ),
                ),
                (
                    "excavation_object_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_protocols_excavation_object_id_excavationobjectid",
                        to="archiv.excavationobjectid",
                        verbose_name="Excavation object ID",
                    ),
                ),
                (
                    "excavation_post_excavation",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for excavation_post_excavation",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_protocols_excavation_post_excavation_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Whether it was created during excavation or after (post-excavation)",
                    ),
                ),
                (
                    "file_extension",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for file_extension",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_protocols_file_extension_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File extension",
                    ),
                ),
                (
                    "original_material",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for original_material",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_protocols_original_material_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Material of original document",
                    ),
                ),
                (
                    "site_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="Abbreviation of Tell el-Daba is 'TD'.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_protocols_site_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Site ID",
                    ),
                ),
                (
                    "source_original_copy_edited_copy",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for source_original_copy_edited_copy",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_protocols_source_original_copy_edited_copy_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Wheter source is a original or a copy",
                    ),
                ),
                (
                    "storage",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for storage",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_protocols_storage_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Storage folder of original document",
                    ),
                ),
            ],
            options={
                "verbose_name": "Protocols",
                "ordering": ["filename"],
            },
        ),
        migrations.CreateModel(
            name="StratenID",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "stratum_id",
                    models.CharField(
                        blank=True,
                        help_text="helptext for stratum_id",
                        max_length=250,
                        verbose_name="Stratum ID",
                    ),
                ),
                (
                    "stratum_title",
                    models.CharField(
                        blank=True,
                        help_text="helptext for stratum_title",
                        max_length=250,
                        verbose_name="Stratum title",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "area",
                    models.ManyToManyField(
                        blank=True,
                        help_text="helptext for area",
                        related_name="rvn_stratenid_area_excavationobjectid",
                        to="archiv.excavationobjectid",
                        verbose_name="Area",
                    ),
                ),
                (
                    "containing_stratum_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="helptext for containing_stratum_id",
                        related_name="rvn_stratenid_containing_stratum_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Containing stratum ID",
                    ),
                ),
                (
                    "site_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for site_id",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_stratenid_site_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Site ID",
                    ),
                ),
                (
                    "stratum_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for stratum_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_stratenid_stratum_type_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Stratum type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Straten ID",
                "ordering": ["stratum_id"],
            },
        ),
        migrations.CreateModel(
            name="Tables",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        blank=True,
                        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
                        max_length=250,
                        verbose_name="Filename ",
                    ),
                ),
                (
                    "document_id",
                    models.CharField(
                        blank=True,
                        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. P for Protocol) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
                        max_length=250,
                        verbose_name="Document ID ",
                    ),
                ),
                (
                    "document_title",
                    models.CharField(
                        blank=True,
                        help_text="A description of the content of the document. \xa0It allows information about the contents of the file to be understood by a human being without opening it. ",
                        max_length=250,
                        verbose_name="Document title",
                    ),
                ),
                (
                    "path_filename_old",
                    models.CharField(
                        blank=True,
                        help_text="helptext for path_filename_old",
                        max_length=250,
                        verbose_name="Data path in old TD archive",
                    ),
                ),
                (
                    "creation_year_original",
                    models.CharField(
                        blank=True,
                        help_text="helptext for creation_year_original",
                        max_length=250,
                        verbose_name="Creation year of original document",
                    ),
                ),
                (
                    "creation_date_archivalobject",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_archivalobject",
                        null=True,
                        verbose_name="Creation date of archival object",
                    ),
                ),
                (
                    "creation_date_metadata",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_metadata",
                        null=True,
                        verbose_name="Creation date of metadata",
                    ),
                ),
                (
                    "folder_original",
                    models.CharField(
                        blank=True,
                        help_text="helptext for folder_original",
                        max_length=250,
                        verbose_name="Folder original",
                    ),
                ),
                (
                    "original_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from the creation of the original resource.",
                        null=True,
                        verbose_name="Comment on the original document",
                    ),
                ),
                (
                    "digitisation_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from digitisation.",
                        null=True,
                        verbose_name="Comment from digitisation",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "access",
                    models.ForeignKey(
                        blank=True,
                        help_text="Whether access to the resource is restricted or if it is open to the public.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_tables_access_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Access",
                    ),
                ),
                (
                    "archaeological_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The unique identifier of an archaeological object. Archaeological objects are all objects that were created in the past, e.g. in the Bronze Age. An archaeological object ID contains the abbreviation of site_area_square trench_name of archaeological object (e.g.: TD_F-I_o19_Grab1 means Tell el-Daba, area F-I, square o19, grave 1).",
                        related_name="rvn_tables_archaeological_object_id_archaeologicalobjectid",
                        to="archiv.archaeologicalobjectid",
                        verbose_name="Archaeological object ID",
                    ),
                ),
                (
                    "copyright",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for copyright",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_tables_copyright_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Copyright",
                    ),
                ),
                (
                    "creator_archivalobject",
                    models.ForeignKey(
                        blank=True,
                        help_text="Person who processed resource for digital long-term archiving.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_tables_creator_archivalobject_actor",
                        to="archiv.actor",
                        verbose_name="creator of archival object",
                    ),
                ),
                (
                    "creator_metadata",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_metadata",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_tables_creator_metadata_actor",
                        to="archiv.actor",
                        verbose_name="Creator of metadata",
                    ),
                ),
                (
                    "creator_original",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_original",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_tables_creator_original_actor",
                        to="archiv.actor",
                        verbose_name="Creator of original document",
                    ),
                ),
                (
                    "document_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for document_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_tables_document_type_documenttypes",
                        to="archiv.documenttypes",
                        verbose_name="Document type",
                    ),
                ),
                (
                    "excavation_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).",
                        related_name="rvn_tables_excavation_object_id_excavationobjectid",
                        to="archiv.excavationobjectid",
                        verbose_name="Excavation object ID",
                    ),
                ),
                (
                    "excavation_post_excavation",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for excavation_post_excavation",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_tables_excavation_post_excavation_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Whether it was created during excavation or after (post-excavation)",
                    ),
                ),
                (
                    "file_extension_archivalobject",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for file_extension_archivalobject",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_tables_file_extension_archivalobject_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File extension of archival object",
                    ),
                ),
                (
                    "file_extension_original",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for file_extension_original",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_tables_file_extension_original_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File extension of original document",
                    ),
                ),
                (
                    "relatedto",
                    models.ManyToManyField(
                        blank=True,
                        help_text="helptext for relatedto",
                        related_name="rvn_tables_relatedto_documenttypes",
                        to="archiv.documenttypes",
                        verbose_name="File is related to other TD resources",
                    ),
                ),
                (
                    "site_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="Abbreviation of Tell el-Daba is 'TD'.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_tables_site_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Site ID",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tables",
                "ordering": ["filename"],
            },
        ),
        migrations.CreateModel(
            name="ThreeDimensionalModel",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        blank=True,
                        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
                        max_length=250,
                        verbose_name="Filename",
                    ),
                ),
                (
                    "document_id",
                    models.CharField(
                        blank=True,
                        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. DR for Digital Resource) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
                        max_length=250,
                        verbose_name="Document ID",
                    ),
                ),
                (
                    "document_title",
                    models.CharField(
                        blank=True,
                        help_text="A description of the content of the document. \xa0It allows information about the contents of the file to be understood by a human being without opening it. ",
                        max_length=250,
                        verbose_name="Document title",
                    ),
                ),
                (
                    "path_filename_old",
                    models.CharField(
                        blank=True,
                        help_text="Data path in the old TD archive.",
                        max_length=250,
                        verbose_name="Data path in old TD archive",
                    ),
                ),
                (
                    "creation_year_original",
                    models.CharField(
                        blank=True,
                        help_text="helptext for creation_year_original",
                        max_length=250,
                        verbose_name="Creation year original",
                    ),
                ),
                (
                    "software_used",
                    models.CharField(
                        blank=True,
                        help_text="helptext for software_used",
                        max_length=250,
                        verbose_name="Software which was used to create original",
                    ),
                ),
                (
                    "creation_date_archivalobject",
                    models.DateField(
                        blank=True,
                        help_text="Date when the resource was prepared for long-term archiving.",
                        null=True,
                        verbose_name="Creation date of archival object",
                    ),
                ),
                (
                    "creation_date_metadata",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_metadata",
                        null=True,
                        verbose_name="Creation date metadata",
                    ),
                ),
                (
                    "relatedto",
                    models.CharField(
                        blank=True,
                        help_text="helptext for relatedto",
                        max_length=250,
                        verbose_name="File is related to other TD resources",
                    ),
                ),
                (
                    "original_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from the creation of the original resource.",
                        null=True,
                        verbose_name="Comment on the original document",
                    ),
                ),
                (
                    "digitisation_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from digitisation.",
                        null=True,
                        verbose_name="Comment from digitisation",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "access",
                    models.ForeignKey(
                        blank=True,
                        help_text="Whether access to the resource is restricted or if it is open to the public.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_threedimensionalmodel_access_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Access",
                    ),
                ),
                (
                    "archaeological_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The unique identifier of an archaeological object. Archaeological objects are all objects that were created in the past, e.g. in the Bronze Age. An archaeological object ID contains the abbreviation of site_area_square trench_name of archaeological object (e.g.: TD_F-I_o19_Grab1 means Tell el-Daba, area F-I, square o19, grave 1).",
                        related_name="rvn_threedimensionalmodel_archaeological_object_id_archaeologicalobjectid",
                        to="archiv.archaeologicalobjectid",
                        verbose_name="Archaeological object ID",
                    ),
                ),
                (
                    "copyright",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for copyright",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_threedimensionalmodel_copyright_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Copyright",
                    ),
                ),
                (
                    "creator_archivalobject",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_archivalobject",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_threedimensionalmodel_creator_archivalobject_actor",
                        to="archiv.actor",
                        verbose_name="Creator of archival object",
                    ),
                ),
                (
                    "creator_metadata",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_metadata",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_threedimensionalmodel_creator_metadata_actor",
                        to="archiv.actor",
                        verbose_name="Creator of metadata",
                    ),
                ),
                (
                    "creator_original",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_original",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_threedimensionalmodel_creator_original_actor",
                        to="archiv.actor",
                        verbose_name="Creator of original ",
                    ),
                ),
                (
                    "document_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for document_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_threedimensionalmodel_document_type_documenttypes",
                        to="archiv.documenttypes",
                        verbose_name="Document type",
                    ),
                ),
                (
                    "excavation_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).",
                        related_name="rvn_threedimensionalmodel_excavation_object_id_excavationobjectid",
                        to="archiv.excavationobjectid",
                        verbose_name="Excavation object ID",
                    ),
                ),
                (
                    "excavation_post_excavation",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for excavation_post_excavation",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_threedimensionalmodel_excavation_post_excavation_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="The document ID is a project-specific unique identifier which consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. SWnegfilm for black &white negative film, FDfilm for colour slide film, FDdig for colour slide film digitised ) and the inventory numbers (from_to).",
                    ),
                ),
                (
                    "file_extension_archivalobject",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for file_extension_archivalobject",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_threedimensionalmodel_file_extension_archivalobject_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File extension of archival data",
                    ),
                ),
                (
                    "file_extension_original",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_threedimensionalmodel_file_extension_original_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File extension of original 3D model",
                    ),
                ),
                (
                    "site_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="Abbreviation of Tell el-Daba is 'TD'.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_threedimensionalmodel_site_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Site ID",
                    ),
                ),
            ],
            options={
                "verbose_name": "3D models",
                "ordering": ["filename"],
            },
        ),
        migrations.CreateModel(
            name="Videos",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        blank=True,
                        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
                        max_length=250,
                        verbose_name="Filename ",
                    ),
                ),
                (
                    "document_id",
                    models.CharField(
                        blank=True,
                        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. P for Protocol) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
                        max_length=250,
                        verbose_name="Document ID ",
                    ),
                ),
                (
                    "document_title",
                    models.CharField(
                        blank=True,
                        help_text="A description of the content of the document. \xa0It allows information about the contents of the file to be understood by a human being without opening it. ",
                        max_length=250,
                        verbose_name="Document title",
                    ),
                ),
                (
                    "creation_date_original",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_original",
                        null=True,
                        verbose_name="Creation date of original document",
                    ),
                ),
                (
                    "creation_date_archivalobject",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_archivalobject",
                        null=True,
                        verbose_name="Creation date of archival object",
                    ),
                ),
                (
                    "creation_date_metadata",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_metadata",
                        null=True,
                        verbose_name="Creation date of metadata",
                    ),
                ),
                (
                    "path_filename_old",
                    models.CharField(
                        blank=True,
                        help_text="helptext for path_filename_old",
                        max_length=250,
                        verbose_name="Data path in old TD archive",
                    ),
                ),
                (
                    "path_filename_arche",
                    models.CharField(
                        blank=True,
                        help_text="helptext for path_filename_arche",
                        max_length=250,
                        verbose_name="Data path in ARCHE",
                    ),
                ),
                (
                    "original_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from the creation of the original resource.",
                        null=True,
                        verbose_name="Comment on the original document",
                    ),
                ),
                (
                    "digitisation_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from digitisation.",
                        null=True,
                        verbose_name="Comment from digitisation",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "access",
                    models.ForeignKey(
                        blank=True,
                        help_text="Whether access to the resource is restricted or if it is open to the public.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_videos_access_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Access",
                    ),
                ),
                (
                    "archaeological_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The unique identifier of an archaeological object. Archaeological objects are all objects that were created in the past, e.g. in the Bronze Age. An archaeological object ID contains the abbreviation of site_area_square trench_name of archaeological object (e.g.: TD_F-I_o19_Grab1 means Tell el-Daba, area F-I, square o19, grave 1).",
                        related_name="rvn_videos_archaeological_object_id_archaeologicalobjectid",
                        to="archiv.archaeologicalobjectid",
                        verbose_name="Archaeological object ID",
                    ),
                ),
                (
                    "copyright",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for copyright",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_videos_copyright_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Copyright",
                    ),
                ),
                (
                    "creator_archivalobject",
                    models.ForeignKey(
                        blank=True,
                        help_text="Person who processed resource for digital long-term archiving.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_videos_creator_archivalobject_actor",
                        to="archiv.actor",
                        verbose_name="creator of archival object",
                    ),
                ),
                (
                    "creator_metadata",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_metadata",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_videos_creator_metadata_actor",
                        to="archiv.actor",
                        verbose_name="Creator of metadata",
                    ),
                ),
                (
                    "creator_original",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_original",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_videos_creator_original_actor",
                        to="archiv.actor",
                        verbose_name="Creator of original document",
                    ),
                ),
                (
                    "document_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for document_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_videos_document_type_documenttypes",
                        to="archiv.documenttypes",
                        verbose_name="Document type",
                    ),
                ),
                (
                    "excavation_object_id",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).",
                        related_name="rvn_videos_excavation_object_id_excavationobjectid",
                        to="archiv.excavationobjectid",
                        verbose_name="Excavation object ID",
                    ),
                ),
                (
                    "file_extension_archivalobject",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for file_extension_archivalobject",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_videos_file_extension_archivalobject_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File extension of archival object",
                    ),
                ),
                (
                    "file_extension_original",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for file_extension_original",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_videos_file_extension_original_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File extension of original document",
                    ),
                ),
                (
                    "find_inventory_number",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for find_inventory_number",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_videos_find_inventory_number_fundinventarinventarnummern",
                        to="archiv.fundinventarinventarnummern",
                        verbose_name="Find inventory number",
                    ),
                ),
                (
                    "site_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="Abbreviation of Tell el-Daba is 'TD'.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_videos_site_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Site ID",
                    ),
                ),
            ],
            options={
                "verbose_name": "Videos",
                "ordering": ["filename"],
            },
        ),
        migrations.CreateModel(
            name="WallpaintingInventory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "legacy_id",
                    models.CharField(
                        blank=True, max_length=300, verbose_name="Legacy ID"
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        blank=True,
                        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
                        max_length=250,
                        verbose_name="Filename",
                    ),
                ),
                (
                    "document_id",
                    models.CharField(
                        blank=True,
                        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. DR for Digital Resource) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
                        max_length=250,
                        verbose_name="Document ID",
                    ),
                ),
                (
                    "document_title",
                    models.CharField(
                        blank=True,
                        help_text="A description of the content of the document. \xa0It allows information about the contents of the file to be understood by a human being without opening it. ",
                        max_length=250,
                        verbose_name="Document title",
                    ),
                ),
                (
                    "filename_old",
                    models.CharField(
                        blank=True,
                        help_text="helptext for filename_old",
                        max_length=250,
                        verbose_name="Filename old",
                    ),
                ),
                (
                    "creation_date_original",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_original",
                        null=True,
                        verbose_name="Creation date of original document",
                    ),
                ),
                (
                    "creation_year_original",
                    models.CharField(
                        blank=True,
                        help_text="helptext for creation_year_original",
                        max_length=250,
                        verbose_name="Creation year of original document",
                    ),
                ),
                (
                    "creation_date_scan",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_scan",
                        null=True,
                        verbose_name="Creation date of scan",
                    ),
                ),
                (
                    "creation_date_metadata",
                    models.DateField(
                        blank=True,
                        help_text="helptext for creation_date_metadata",
                        null=True,
                        verbose_name="Creation date of metadata",
                    ),
                ),
                (
                    "storage_folder_original",
                    models.CharField(
                        blank=True,
                        help_text="helptext for storage_folder_original",
                        max_length=250,
                        verbose_name="Storage folder of original wallpainting",
                    ),
                ),
                (
                    "resolution_scan_dpi",
                    models.IntegerField(
                        blank=True,
                        help_text="helptext for resolution_scan_dpi",
                        null=True,
                        verbose_name="Scan resolution",
                    ),
                ),
                (
                    "fresco_inventory_number",
                    models.CharField(
                        blank=True,
                        help_text="helptext for fresco_inventory_number",
                        max_length=250,
                        verbose_name="Fresco inventory number",
                    ),
                ),
                (
                    "original_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from the creation of the original resource.",
                        null=True,
                        verbose_name="Comment on the original document",
                    ),
                ),
                (
                    "digitisation_comment",
                    models.TextField(
                        blank=True,
                        help_text="Comments from digitisation.",
                        null=True,
                        verbose_name="Comment from digitisation",
                    ),
                ),
                (
                    "orig_data_csv",
                    models.TextField(
                        blank=True, null=True, verbose_name="The original data"
                    ),
                ),
                (
                    "fc_name",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field name"
                    ),
                ),
                (
                    "fc_directory",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="filechecker field directory",
                    ),
                ),
                (
                    "fc_type",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field type",
                    ),
                ),
                (
                    "fc_filename",
                    models.TextField(
                        blank=True, null=True, verbose_name="filechecker field filename"
                    ),
                ),
                (
                    "fc_extension",
                    models.CharField(
                        blank=True,
                        max_length=40,
                        null=True,
                        verbose_name="filechecker field extension",
                    ),
                ),
                (
                    "fc_match",
                    models.BooleanField(
                        default=False, verbose_name="Matches FileChecker Entry"
                    ),
                ),
                (
                    "access",
                    models.ForeignKey(
                        blank=True,
                        help_text="Whether access to the resource is restricted or if it is open to the public.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_wallpaintinginventory_access_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Access",
                    ),
                ),
                (
                    "copyright",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for copyright",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_wallpaintinginventory_copyright_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Copyright",
                    ),
                ),
                (
                    "creator_metadata",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_metadata",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_wallpaintinginventory_creator_metadata_actor",
                        to="archiv.actor",
                        verbose_name="Creator of metadata",
                    ),
                ),
                (
                    "creator_original",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_original",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_wallpaintinginventory_creator_original_actor",
                        to="archiv.actor",
                        verbose_name="Creator of original ",
                    ),
                ),
                (
                    "creator_scan",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for creator_scan",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_wallpaintinginventory_creator_scan_actor",
                        to="archiv.actor",
                        verbose_name="Creator of scan",
                    ),
                ),
                (
                    "document_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for document_type",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_wallpaintinginventory_document_type_documenttypes",
                        to="archiv.documenttypes",
                        verbose_name="Document type",
                    ),
                ),
                (
                    "equipment_scan",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for equipment_scan",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_wallpaintinginventory_equipment_scan_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Equipment for scan",
                    ),
                ),
                (
                    "excavation_post_excavation",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for excavation_post_excavation",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_wallpaintinginventory_excavation_post_excavation_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Whether it was created during excavation or after (post-excavation)",
                    ),
                ),
                (
                    "file_extension",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for file_extension",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_wallpaintinginventory_file_extension_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="File extension ",
                    ),
                ),
                (
                    "original_material",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for original_material",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_wallpaintinginventory_original_material_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Material of original document",
                    ),
                ),
                (
                    "site_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="Abbreviation of Tell el-Daba is 'TD'.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_wallpaintinginventory_site_id_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Site ID",
                    ),
                ),
                (
                    "source_original_copy_edited_copy",
                    models.ForeignKey(
                        blank=True,
                        help_text="helptext for source_original_copy_edited_copy",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rvn_wallpaintinginventory_source_original_copy_edited_copy_skosconcept",
                        to="vocabs.skosconcept",
                        verbose_name="Wheter source is a original or a copy",
                    ),
                ),
            ],
            options={
                "verbose_name": "Freskeninventar",
                "ordering": ["filename"],
            },
        ),
    ]
