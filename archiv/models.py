# generated by appcreator

from django.db import models
from django.urls import reverse
from django.contrib.postgres.fields import DateRangeField

from vocabs.models import SkosConcept

from browsing.browsing_utils import model_to_dict


def set_extra(self, **kwargs):
    self.extra = kwargs
    return self


models.Field.set_extra = set_extra


class Actor(models.Model):
    ### Person involved in TD excavations and/or A Puzzle in 4D project ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Name",
        help_text="helptext for name",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Actor/Actor.csv__first_name",
    )
    drawer_monogram = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Drawer Monogram",
        help_text="helptext for drawer_monogram",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Actor/Actor.csv__drawer_monogram",
    )
    excavation = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Excavation",
        help_text="helptext for excavation",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Actor/Actor.csv__Excavation",
    )
    xx_4dpuzzle = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="4DPuzzle",
        help_text="helptext for xx_4dpuzzle",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Actor/Actor.csv__4DPuzzle",
    )
    year = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Year",
        help_text="helptext for year",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Actor/Actor.csv__year",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_actor_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="helptext for access",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Actor/Actor.csv__Access",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'name',
        ]
        verbose_name = "Actor"

    def __str__(self):
        return "{}".format(self.name)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:actor_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:actor_create')

    def get_absolute_url(self):
        return reverse('archiv:actor_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:actor_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:actor_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:actor_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:actor_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:actor_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class ArchaeologicalObject4DPuzzleID(models.Model):
    ### A 4DPuzzleID was created for archaeological objects that did not have an ID ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_archaeologicalobject4dpuzzleid_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="helptext for creator_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchaeologicalObject4DPuzzleID/Archaeological_object_4DPuzzle.scv__Creator_metadata",
    )
    archaeological_object_id = models.ForeignKey(
        "ArchaeologicalObjectID",
        related_name='rvn_archaeologicalobject4dpuzzleid_archaeological_object_id_archaeologicalobjectid',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Archaeological object ID",
        help_text="helptext for archaeological_object_id",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchaeologicalObject4DPuzzleID/Archaeological_object_4DPuzzle.scv__Archaeological_object_ID",
    )
    archaeological_object_4dpuzzle_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Archaeological object 4DPuzzle ID",
        help_text="helptext for archaeological_object_4dpuzzle_id",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchaeologicalObject4DPuzzleID/Archaeological_object_4DPuzzle.scv__Archaeological_object_4DPuzzle_ID",
    )
    archaeological_object_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Archaeological object comment",
        help_text="helptext for archaeological_object_comment",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchaeologicalObject4DPuzzleID/Archaeological_object_4DPuzzle.scv__Archaeological_object_comment",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_archaeologicalobject4dpuzzleid_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="helptext for excavation_object_id",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchaeologicalObject4DPuzzleID/Archaeological_object_4DPuzzle.scv__Excavation_object_ID",
    )
    position = models.TextField(
        blank=True, null=True,
        verbose_name="Position",
        help_text="helptext for position",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchaeologicalObject4DPuzzleID/Archaeological_object_4DPuzzle.scv__Position",
    )
    stratum_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Stratum Comment",
        help_text="helptext for stratum_comment",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchaeologicalObject4DPuzzleID/Archaeological_object_4DPuzzle.scv__Stratum_comment",
    )
    digitisation_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment from digitisation",
        help_text="helptext for digitisation_comment",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchaeologicalObject4DPuzzleID/Archaeological_object_4DPuzzle.scv__Digitisation_comment",
    )
    archaeological_object_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_archaeologicalobject4dpuzzleid_archaeological_object_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Archaeological object type",
        help_text="helptext for archaeological_object_type",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchaeologicalObject4DPuzzleID/Archaeological_object_4DPuzzle.scv__Archaeological_object_type",
    )
    stratum_id_relative = models.ForeignKey(
        SkosConcept,
        related_name='rvn_archaeologicalobject4dpuzzleid_stratum_id_relative_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Stratum ID relative",
        help_text="helptext for stratum_id_relative",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchaeologicalObject4DPuzzleID/Archaeological_object_4DPuzzle.scv__Stratum_ID_relative",
    )
    stratum_id_absolute_prepub = models.ForeignKey(
        SkosConcept,
        related_name='rvn_archaeologicalobject4dpuzzleid_stratum_id_absolute_prepub_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Stratum ID absolute pre publication",
        help_text="helptext for stratum_id_absolute_prepub",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchaeologicalObject4DPuzzleID/Archaeological_object_4DPuzzle.scv__Stratum_ID_absolute_prepub",
    )
    phase_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_archaeologicalobject4dpuzzleid_phase_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Phase ID",
        help_text="helptext for phase_id",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchaeologicalObject4DPuzzleID/Archaeological_object_4DPuzzle.scv__Phase_ID",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'archaeological_object_id',
        ]
        verbose_name = "ArchaeologicalObject4DPuzzleID"

    def __str__(self):
        return "{}".format(self.archaeological_object_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:archaeologicalobject4dpuzzleid_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:archaeologicalobject4dpuzzleid_create')

    def get_absolute_url(self):
        return reverse('archiv:archaeologicalobject4dpuzzleid_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:archaeologicalobject4dpuzzleid_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:archaeologicalobject4dpuzzleid_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:archaeologicalobject4dpuzzleid_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:archaeologicalobject4dpuzzleid_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:archaeologicalobject4dpuzzleid_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class ArchaeologicalObjectID(models.Model):
    ### ID of archaeological object  ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_archaeologicalobjectid_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="helptext for creator_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchaeologicalObjectID/Archaeological_object_ID.csv__Creator_metadata",
    )
    archaeological_object_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Archaeological object ID",
        help_text="helptext for archaeological_object_id",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchaeologicalObjectID/Archaeological_object_ID.csv__Archaeological_object_ID",
    )
    archaeological_object_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Archaeological object comment",
        help_text="helptext for archaeological_object_comment",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchaeologicalObjectID/Archaeological_object_ID.csv__Archaeological_object_comment",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_archaeologicalobjectid_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="helptext for excavation_object_id",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchaeologicalObjectID/Archaeological_object_ID.csv__Excavation_object_ID",
    )
    position = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Position",
        help_text="helptext for position",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchaeologicalObjectID/Archaeological_object_ID.csv__Position",
    )
    stratum_id_relative = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Stratum ID relative",
        help_text="helptext for stratum_id_relative",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchaeologicalObjectID/Archaeological_object_ID.csv__Stratum_ID_relative",
    )
    stratum_id_absolute_prepub = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Stratum ID absolute pre publication",
        help_text="helptext for stratum_id_absolute_prepub",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchaeologicalObjectID/Archaeological_object_ID.csv__Stratum_ID_absolute_prepub",
    )
    stratum_comment = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Stratum comment",
        help_text="helptext for stratum_comment",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchaeologicalObjectID/Archaeological_object_ID.csv__Stratum_comment",
    )
    phase_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Phase ID",
        help_text="helptext for phase_id",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchaeologicalObjectID/Archaeological_object_ID.csv__Phase_ID",
    )
    corresponding_to_archaeological_object_id = models.ManyToManyField(
        "ArchaeologicalObjectID",
        related_name='rvn_archaeologicalobjectid_corresponding_to_archaeological_object_id_archaeologicalobjectid',
        blank=True,
        verbose_name="Corresponding to archaeological object ID",
        help_text="helptext for corresponding_to_archaeological_object_id",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchaeologicalObjectID/Archaeological_object_ID.csv__Corresponding_to_archaeological_object_ID",
    )
    relatedto = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="File is related to other TD resources",
        help_text="helptext for relatedto",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchaeologicalObjectID/Archaeological_object_ID.csv__RelatedTo",
    )
    digitisation_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment from digitisation",
        help_text="helptext for digitisation_comment",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchaeologicalObjectID/Archaeological_object_ID.csv__Digitisation_comment",
    )
    archaeological_object_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_archaeologicalobjectid_archaeological_object_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Archaeological object type",
        help_text="helptext for archaeological_object_type",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchaeologicalObjectID/Archaeological_object_ID.csv__Archaeological_object_type",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'archaeological_object_id',
        ]
        verbose_name = "ArchaeologicalObjectID"

    def __str__(self):
        return "{}".format(self.archaeological_object_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:archaeologicalobjectid_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:archaeologicalobjectid_create')

    def get_absolute_url(self):
        return reverse('archiv:archaeologicalobjectid_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:archaeologicalobjectid_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:archaeologicalobjectid_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:archaeologicalobjectid_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:archaeologicalobjectid_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:archaeologicalobjectid_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class ArchiveINF(models.Model):
    ### Document with information about the Tell el-Daba documentation archive ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_archiveinf_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="helptext for creator_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchiveINF/ArchiveINF_metadata.csv__Creator_metadata",
        arche_prop="hasMetadataCreator",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_archiveinf_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original",
        help_text="helptext for creator_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchiveINF/ArchiveINF_metadata.csv__Creator_original",
    )
    creator_archivalobject = models.ForeignKey(
        "Actor",
        related_name='rvn_archiveinf_creator_archivalobject_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of archival object",
        help_text="helptext for creator_archivalobject",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchiveINF/ArchiveINF_metadata.csv__creator_archivalObject",
        arche_prop="hasContributor",
    )
    filename = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Filename",
        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchiveINF/ArchiveINF_metadata.csv__Filename",
        arche_prop="hasTitle",
    )
    document_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document ID ",
        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. DR for Digital Resource) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchiveINF/ArchiveINF_metadata.csv__Document_ID",
        arche_prop="hasNonLinkedIdentifier",
    )
    document_title = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document title",
        help_text="A description of the content of the document.  It allows information about the contents of the file to be understood by a human being without opening it. ",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchiveINF/ArchiveINF_metadata.csv__Document_title",
    )
    creation_year_original = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Creation year original",
        help_text="helptext for creation_year_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchiveINF/ArchiveINF_metadata.csv__Creation_year_original",
    )
    creation_date_archivalobject = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date archival object",
        help_text="helptext for creation_date_archivalobject",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchiveINF/ArchiveINF_metadata.csv__Creation_date_archivalObject",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date metadata",
        help_text="helptext for creation_date_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchiveINF/ArchiveINF_metadata.csv__Creation_date_metadata",
    )
    comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment",
        help_text="helptext for comment",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchiveINF/ArchiveINF_metadata.csv__Comment",
        arche_prop="hasNote",
    )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_archiveinf_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="helptext for document_type",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchiveINF/ArchiveINF_metadata.csv__Document_type",
    )
    relatedto = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_archiveinf_relatedto_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File is related to other TD resources",
        help_text="helptext for relatedto",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchiveINF/ArchiveINF_metadata.csv__RelatedTo",
    )
    file_extension_archivalobject = models.ForeignKey(
        SkosConcept,
        related_name='rvn_archiveinf_file_extension_archivalobject_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of archival object",
        help_text="helptext for file_extension_archivalobject",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchiveINF/ArchiveINF_metadata.csv__File_extension_archivalObject",
        arche_prop="hasTechnicalInfo",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_archiveinf_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="helptext for copyright",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchiveINF/ArchiveINF_metadata.csv__Copyright",
        arche_prop="hasOwner",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_archiveinf_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="Whether access to the resource is restricted or if it is open to the public.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchiveINF/ArchiveINF_metadata.csv__Access",
        arche_prop="hasAccessRestriction",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_archiveinf_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="Abbreviation of Tell el-Daba is 'TD'.",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ArchiveINF/ArchiveINF_metadata.csv__Site_ID",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'filename',
        ]
        verbose_name = "Archive information"

    def __str__(self):
        return "{}".format(self.filename)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:archiveinf_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:archiveinf_create')

    def get_absolute_url(self):
        return reverse('archiv:archiveinf_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:archiveinf_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:archiveinf_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:archiveinf_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:archiveinf_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:archiveinf_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class AutoCAD(models.Model):
    ### AutoCAD Files ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_autocad_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="helptext for creator_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_AutoCAD/AutoCAD_metadata__Creator_metadata",
        arche_prop="hasMetadataCreator",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_autocad_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original",
        help_text="helptext for creator_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_AutoCAD/AutoCAD_metadata__Creator_original",
    )
    creator_archivalobject = models.ForeignKey(
        "Actor",
        related_name='rvn_autocad_creator_archivalobject_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of archival object",
        help_text="Person who processed resource for digital long-term archiving.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_AutoCAD/AutoCAD_metadata__creator_archivalObject",
        arche_prop="hasContributor",
    )
    filename = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Filename",
        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_AutoCAD/AutoCAD_metadata__Filename",
        arche_prop="hasTitle",
    )
    document_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document ID",
        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. DR for Digital Resource) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_AutoCAD/AutoCAD_metadata__Document_ID",
        arche_prop="hasNonLinkedIdentifier",
    )
    document_title = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document title",
        help_text="A description of the content of the document.  It allows information about the contents of the file to be understood by a human being without opening it. ",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_AutoCAD/AutoCAD_metadata__Document_title",
    )
    path_filename_old = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Data path in old TD archive",
        help_text="helptext for path_filename_old",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_AutoCAD/AutoCAD_metadata__Path_filename_old",
    )
    path_filename_arche = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Data path in ARCHE",
        help_text="helptext for path_filename_arche",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_AutoCAD/AutoCAD_metadata__Path_filename_ARCHE",
        arche_prop="hasLocationPath",
    )
    creation_year_original = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Creation year original",
        help_text="helptext for creation_year_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_AutoCAD/AutoCAD_metadata__Creation_year_original",
    )
    creation_date_archivalobject = models.DateField(
        blank=True, null=True,
        verbose_name="Creation year archival object",
        help_text="helptext for creation_date_archivalobject",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_AutoCAD/AutoCAD_metadata__Creation_date_archivalObject",
        arche_prop="hasCreatedDate",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date metadata",
        help_text="helptext for creation_date_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_AutoCAD/AutoCAD_metadata__Creation_date_metadata",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_autocad_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_AutoCAD/AutoCAD_metadata__Excavation_object_ID",
    )
    archaeological_object_id = models.ManyToManyField(
        "ArchaeologicalObjectID",
        related_name='rvn_autocad_archaeological_object_id_archaeologicalobjectid',
        blank=True,
        verbose_name="Archeological object ID",
        help_text="The unique identifier of an archaeological object. Archaeological objects are all objects that were created in the past, e.g. in the Bronze Age. An archaeological object ID contains the abbreviation of site_area_square trench_name of archaeological object (e.g.: TD_F-I_o19_Grab1 means Tell el-Daba, area F-I, square o19, grave 1).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_AutoCAD/AutoCAD_metadata__Archaeological_object_ID",
    )
    relatedto = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="File is related to other TD resources",
        help_text="helptext for relatedto",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_AutoCAD/AutoCAD_metadata__RelatedTo",
    )
    original_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment on the original document",
        help_text="Comments from the creation of the original resource.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_AutoCAD/AutoCAD_metadata__Original_comment",
    )
    digitisation_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment from digitisation",
        help_text="Comments from digitisation.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_AutoCAD/AutoCAD_metadata__Digitisation_comment",
        arche_prop="hasNote",
    )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_autocad_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="helptext for document_type",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_AutoCAD/AutoCAD_metadata__Document_type",
    )
    file_extension_original = models.ForeignKey(
        SkosConcept,
        related_name='rvn_autocad_file_extension_original_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of original",
        help_text="helptext for file_extension_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_AutoCAD/AutoCAD_metadata__File_extension_original",
    )
    file_extension_archivalobject = models.ForeignKey(
        SkosConcept,
        related_name='rvn_autocad_file_extension_archivalobject_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of archival object",
        help_text="helptext for file_extension_archivalobject",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_AutoCAD/AutoCAD_metadata__File_extension_archivalObject",
        arche_prop="hasTechnicalInfo",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_autocad_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="helptext for copyright",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_AutoCAD/AutoCAD_metadata__Copyright",
        arche_prop="hasOwner",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_autocad_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="Whether access to the resource is restricted or if it is open to the public.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_AutoCAD/AutoCAD_metadata__Access",
        arche_prop="hasAccessRestriction",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_autocad_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="Abbreviation of Tell el-Daba is 'TD'.",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_AutoCAD/AutoCAD_metadata__Site_ID",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_autocad_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)",
        help_text="helptext for excavation_post_excavation",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_AutoCAD/AutoCAD_metadata__Excavation__post_excavation",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'filename',
        ]
        verbose_name = "AutoCAD"

    def __str__(self):
        return "{}".format(self.filename)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:autocad_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:autocad_create')

    def get_absolute_url(self):
        return reverse('archiv:autocad_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:autocad_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:autocad_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:autocad_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:autocad_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:autocad_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Convolutecards(models.Model):
    ### Digitised convolute cards ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_convolutecards_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="helptext for creator_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Creator_metadata",
        arche_prop="hasMetadataCreator",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_convolutecards_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original document",
        help_text="helptext for creator_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Creator_original",
    )
    creator_scan = models.ForeignKey(
        "Actor",
        related_name='rvn_convolutecards_creator_scan_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of scan",
        help_text="helptext for creator_scan",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Creator_scan",
        arche_prop="hasContributor",
    )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_convolutecards_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="helptext for document_type",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Document_type",
    )
    excavation_id = models.ManyToManyField(
        "ExcavationSeasons",
        related_name='rvn_convolutecards_excavation_id_excavationseasons',
        blank=True,
        verbose_name="Excavation Season",
        help_text="helptext for excavation_id",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Excavation_id",
    )
    creation_year_original = models.TextField(
        blank=True, null=True,
        verbose_name="Creation year of original document",
        help_text="helptext for creation_year_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Creation_year_original",
    )
    season = models.TextField(
        blank=True, null=True,
        verbose_name="Season",
        help_text="helptext for season",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Season",
    )
    filename_document_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Filename ",
        help_text="The filename of convolute cards consists of the document_ID (unique identifier). The document ID is a project-specific unique identifier which consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. KK for Konvolutkarte) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Filename_Document_ID",
        arche_prop="hasTitle",
    )
    convolute_inventory_number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Inventory number of the convolute",
        help_text="helptext for convolute_inventory_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Convolute_inventory_number",
        arche_prop="hasNonLinkedIdentifier",
    )
    convolute_subnumber = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Convolute subnumber",
        help_text="helptext for convolute_subnumber",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Convolute_subnumber",
        arche_prop="hasNonLinkedIdentifier",
    )
    filename_old = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Filename old",
        help_text="helptext for filename_old",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Filename_old",
    )
    creation_date_original = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of original document",
        help_text="helptext for creation_date_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Creation_date_original",
    )
    creation_date_scan = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of scan",
        help_text="helptext for creation_date_scan",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Creation_date_scan",
        arche_prop="hasCreatedDate",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of metadata",
        help_text="helptext for creation_date_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Creation_date_metadata",
    )
    storage_folder_original = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Storage folder of original document",
        help_text="helptext for storage_folder_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Storage_folder_original",
    )
    resolution_scan_dpi = models.IntegerField(
        blank=True, null=True,
        verbose_name="Scan resolution",
        help_text="helptext for resolution_scan_dpi",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Resolution_scan_dpi",
        arche_prop="hasTechnicalInfo",
    )
    month = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Month",
        help_text="helptext for month",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Month",
    )
    position = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Position",
        help_text="helptext for position",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Position",
    )
    lowest_height_meters_standard_elevation_zero = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="lowest_height_meters_standard_elevation_zero",
        help_text="helptext for lowest_height_meters_standard_elevation_zero",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Lowest_height_meters_standard_elevation_zero",
    )
    maximum_height_meters_standard_elevation_zero = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="maximum_height_meters_standard_elevation_zero",
        help_text="helptext for maximum_height_meters_standard_elevation_zero",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Maximum_height_meters_standard_elevation_zero",
    )
    original_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment on the original document",
        help_text="Comments from the creation of the original resource.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Original_comment",
    )
    digitisation_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment from digitisation",
        help_text="Comments from digitisation.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Digitisation_comment",
        arche_prop="hasNote",
    )
    file_extension = models.ForeignKey(
        SkosConcept,
        related_name='rvn_convolutecards_file_extension_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension",
        help_text="helptext for file_extension",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__File_extension",
        arche_prop="hasTechnicalInfo",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_convolutecards_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="helptext for copyright",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Copyright",
        arche_prop="hasOwner",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_convolutecards_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="Whether access to the resource is restricted or if it is open to the public.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Access",
        arche_prop="hasAccessRestriction",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_convolutecards_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="Abbreviation of Tell el-Daba is 'TD'.",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Site_ID",
    )
    equipment_scan = models.ForeignKey(
        SkosConcept,
        related_name='rvn_convolutecards_equipment_scan_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Equipment used for scanning",
        help_text="helptext for equipment_scan",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Equipment_scan",
        arche_prop="HasUsedHardware",
    )
    source_original_copy_edited_copy = models.ForeignKey(
        SkosConcept,
        related_name='rvn_convolutecards_source_original_copy_edited_copy_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Wheter source is a original or a copy",
        help_text="helptext for source_original_copy_edited_copy",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Source__original_copy_edited-copy",
    )
    original_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_convolutecards_original_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Material of original document",
        help_text="helptext for original_material",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Original_material",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_convolutecards_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)",
        help_text="helptext for excavation_post_excavation",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Konvolutkarten/Convolute_ID.csv__Excavation__post_excavation",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'filename_document_id',
        ]
        verbose_name = "Convolute cards"

    def __str__(self):
        return "{}".format(self.filename_document_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:convolutecards_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:convolutecards_create')

    def get_absolute_url(self):
        return reverse('archiv:convolutecards_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:convolutecards_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:convolutecards_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:convolutecards_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:convolutecards_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:convolutecards_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Datenbase(models.Model):
    ### Database files ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_datenbase_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="helptext for creator_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Datenbanken/Database_metadata__Creator_metadata",
        arche_prop="hasMetadataCreator",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_datenbase_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original",
        help_text="helptext for creator_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Datenbanken/Database_metadata__Creator_original",
    )
    creator_archivalobject = models.ForeignKey(
        "Actor",
        related_name='rvn_datenbase_creator_archivalobject_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of archival object",
        help_text="Person who processed resource for digital long-term archiving.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Datenbanken/Database_metadata__creator_archivalObject",
        arche_prop="hasContributor",
    )
    filename = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Filename",
        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Datenbanken/Database_metadata__Filename",
        arche_prop="hasTitle",
    )
    document_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document ID",
        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. DR for Digital Resource) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Datenbanken/Database_metadata__Document_ID",
        arche_prop="hasNonLinkedIdentifier",
    )
    document_title = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document title",
        help_text="A description of the content of the document.  It allows information about the contents of the file to be understood by a human being without opening it. ",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Datenbanken/Database_metadata__Document_title",
    )
    creation_year_original = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Creation year original",
        help_text="helptext for creation_year_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Datenbanken/Database_metadata__Creation_year_original",
    )
    creation_date_archivalobject = models.DateField(
        blank=True, null=True,
        verbose_name="Creation year archival object",
        help_text="helptext for creation_date_archivalobject",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Datenbanken/Database_metadata__Creation_date_archivalObject",
        arche_prop="hasCreatedDate",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date metadata",
        help_text="helptext for creation_date_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Datenbanken/Database_metadata__Creation_date_metadata",
    )
    path_filename_old = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Data path in old TD archive",
        help_text="helptext for path_filename_old",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Datenbanken/Database_metadata__Path_filename_old",
    )
    path_filename_arche = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Data path in ARCHE",
        help_text="helptext for path_filename_arche",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Datenbanken/Database_metadata__Path_filename_ARCHE",
        arche_prop="hasLocationPath",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_datenbase_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Datenbanken/Database_metadata__Excavation_object_ID",
    )
    archaeological_object_id = models.ManyToManyField(
        "ArchaeologicalObjectID",
        related_name='rvn_datenbase_archaeological_object_id_archaeologicalobjectid',
        blank=True,
        verbose_name="Archaeological object ID",
        help_text="The unique identifier of an archaeological object. Archaeological objects are all objects that were created in the past, e.g. in the Bronze Age. An archaeological object ID contains the abbreviation of site_area_square trench_name of archaeological object (e.g.: TD_F-I_o19_Grab1 means Tell el-Daba, area F-I, square o19, grave 1).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Datenbanken/Database_metadata__Archaeological_object_ID",
    )
    relatedto = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="File is related to other TD resources",
        help_text="helptext for relatedto",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Datenbanken/Database_metadata__RelatedTo",
    )
    original_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment on the original document",
        help_text="Comments from the creation of the original resource.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Datenbanken/Database_metadata__Original_comment",
    )
    digitisation_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment from digitisation",
        help_text="Comments from digitisation.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Datenbanken/Database_metadata__Digitisation_comment",
        arche_prop="hasNote",
    )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_datenbase_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="helptext for document_type",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Datenbanken/Database_metadata__Document_type",
    )
    file_extension_original = models.ForeignKey(
        SkosConcept,
        related_name='rvn_datenbase_file_extension_original_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of original",
        help_text="helptext for file_extension_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Datenbanken/Database_metadata__File_extension_original",
    )
    file_extension_archivalobject = models.ForeignKey(
        SkosConcept,
        related_name='rvn_datenbase_file_extension_archivalobject_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of archival object",
        help_text="helptext for file_extension_archivalobject",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Datenbanken/Database_metadata__File_extension_archivalObject",
        arche_prop="hasTechnicalInfo",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_datenbase_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="helptext for copyright",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Datenbanken/Database_metadata__Copyright",
        arche_prop="hasOwner",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_datenbase_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="Whether access to the resource is restricted or if it is open to the public.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Datenbanken/Database_metadata__Access",
        arche_prop="hasAccessRestriction",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_datenbase_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="Abbreviation of Tell el-Daba is 'TD'.",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Datenbanken/Database_metadata__Site_ID",
    )
    find_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_datenbase_find_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find material",
        help_text="helptext for find_material",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Datenbanken/Database_metadata__Find_material",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_datenbase_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)",
        help_text="helptext for excavation_post_excavation",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Datenbanken/Database_metadata__Excavation__post_excavation",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'filename',
        ]
        verbose_name = "Database"

    def __str__(self):
        return "{}".format(self.filename)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:datenbase_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:datenbase_create')

    def get_absolute_url(self):
        return reverse('archiv:datenbase_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:datenbase_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:datenbase_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:datenbase_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:datenbase_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:datenbase_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Document4DPuzzleID(models.Model):
    ### A 4DPuzzleID was created for documents that did not have an ID ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_document4dpuzzleid_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="helptext for creator_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Document_4DPuzzleID/Document_4DPuzzleID.csv__Creator_metadata",
    )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_document4dpuzzleid_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="helptext for document_type",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Document_4DPuzzleID/Document_4DPuzzleID.csv__Document_type",
    )
    document_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Filename ",
        help_text="helptext for document_id",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Document_4DPuzzleID/Document_4DPuzzleID.csv__Document_ID",
    )
    original_4dpuzzle_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document ID ",
        help_text="helptext for original_4dpuzzle_id",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Document_4DPuzzleID/Document_4DPuzzleID.csv__Original_4DPuzzle_ID",
    )
    document_title = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document title",
        help_text="helptext for document_title",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Document_4DPuzzleID/Document_4DPuzzleID.csv__Document_title",
    )
    digitisation_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment from digitisation",
        help_text="helptext for digitisation_comment",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Document_4DPuzzleID/Document_4DPuzzleID.csv__Digitisation_comment",
    )
    corresponding_to = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="corresponding_to",
        help_text="helptext for corresponding_to",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Document_4DPuzzleID/Document_4DPuzzleID.csv__Corresponding_to",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'document_id',
        ]
        verbose_name = "Document 4DPuzzle ID"

    def __str__(self):
        return "{}".format(self.document_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:document4dpuzzleid_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:document4dpuzzleid_create')

    def get_absolute_url(self):
        return reverse('archiv:document4dpuzzleid_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:document4dpuzzleid_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:document4dpuzzleid_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:document4dpuzzleid_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:document4dpuzzleid_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:document4dpuzzleid_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class DocumentTypes(models.Model):
    ### Types of documents ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    document_type = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document type",
        help_text="Type of document.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_DocumentTypes/Tabelle1.csv__Document_type",
    )
    document_maintype = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document type",
        help_text="Type of document.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_DocumentTypes/Tabelle1.csv__Document_maintype",
    )
    dt_abbr = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document type abbreviated",
        help_text="Abbreviation of the document.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_DocumentTypes/Tabelle1.csv__DT_abbr",
    )
    document_subtype = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document Subtype",
        help_text="Subtype of a document. ",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_DocumentTypes/Tabelle1.csv__Document_subtype",
    )
    ds_abbr = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document subtype abbreviated",
        help_text="Abbreviation of the document subtype.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_DocumentTypes/Tabelle1.csv__DS_abbr",
    )
    description = models.TextField(
        blank=True, null=True,
        verbose_name="Description",
        help_text="Description of document type.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_DocumentTypes/Tabelle1.csv__Description",
    )
    analogue_borndigital = models.ForeignKey(
        SkosConcept,
        related_name='rvn_documenttypes_analogue_borndigital_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Analogue or born-digital",
        help_text="Whether the original document was analogue (and digitised during A Puzzle in 4D project) or born-digital (and converted into durable file format during A Puzzle in 4D project).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_DocumentTypes/Tabelle1.csv__Analog_bornDigital",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'document_type',
        ]
        verbose_name = "Document types"

    def __str__(self):
        return "{}".format(self.document_type)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:documenttypes_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:documenttypes_create')

    def get_absolute_url(self):
        return reverse('archiv:documenttypes_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:documenttypes_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:documenttypes_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:documenttypes_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:documenttypes_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:documenttypes_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class ExcavationObjectID(models.Model):
    ### ID of excavation object (area, square etc.) ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_excavationobjectid_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="creator_metadata",
        help_text="Person who created the metadata or organization where metadata creation was carried out.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Metadaten/Excavation_object_ID.csv__Creator_metadata",
    )
    excavation_object_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Identifier of Excavation Object",
        help_text="Identifier of an excavation object (excavation objects are objects that were created during excavation). Consists of Site_area_square_TypeOfObject, for example TD_A-II_l17_Planum1.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Metadaten/Excavation_object_ID.csv__Excavation_object_ID",
    )
    profile_orientation = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Orientation of a profile",
        help_text="The orientation of a profile.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Metadaten/Excavation_object_ID.csv__Profile_orientation",
    )
    excavation_id = models.ManyToManyField(
        "ExcavationSeasons",
        related_name='rvn_excavationobjectid_excavation_id_excavationseasons',
        blank=True,
        verbose_name="Excavation Season",
        help_text="Years during work at an excavation object has been carried out.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Metadaten/Excavation_object_ID.csv__Excavation_id",
    )
    year = models.TextField(
        blank=True, null=True,
        verbose_name="Year",
        help_text="Years during work at an excavation object has been carried out.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Metadaten/Excavation_object_ID.csv__Year",
    )
    season = models.TextField(
        blank=True, null=True,
        verbose_name="Season",
        help_text="Season during work at an excavation object has been carried out.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Metadaten/Excavation_object_ID.csv__Season",
    )
    part_of_excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_excavationobjectid_part_of_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Part of another Excavation Object.",
        help_text="An excavation object which was part of another excavation object.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Metadaten/Excavation_object_ID.csv__Part_of_excavation_object_ID",
    )
    digitisation_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment from digitisation",
        help_text="Comments of the metadata creator (e.g. noticing errors, etc.).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Metadaten/Excavation_object_ID.csv__Digitisation_comment",
    )
    excavation_object_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_excavationobjectid_excavation_object_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Type of Excavation Object",
        help_text="Types of excavation objects: Areal, Detail, Grube, Oberflaeche, Planquadrat, Planum, Profil, Profilsteg, Schnitt, Situation, Sondage, Zwischenplanum.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Metadaten/Excavation_object_ID.csv__Excavation_object_type",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_excavationobjectid_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="Abbreviation of the name of the archaeological site, which is documented in the field drawing. ‘TD’ stands for Tell el-Daba.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Metadaten/Excavation_object_ID.csv__Site_ID",
    )
    area = models.ForeignKey(
        SkosConcept,
        related_name='rvn_excavationobjectid_area_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Area",
        help_text="Excavations were carried out in 16 areas: A-I, A-II, A-III, A-IV, A-N, A-V, E-I, F-I, F-II, H-I, H-II, H-III, H-IV, H-V, H-VI, R-I.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Metadaten/Excavation_object_ID.csv__Area",
    )
    square_trench = models.ForeignKey(
        SkosConcept,
        related_name='rvn_excavationobjectid_square_trench_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Square trench",
        help_text="Each excavation area has been divided into square trenches.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Metadaten/Excavation_object_ID.csv__Square_trench",
    )
    planum = models.ForeignKey(
        SkosConcept,
        related_name='rvn_excavationobjectid_planum_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Planum",
        help_text="Excavations were carried out in spits and a ‘planum’ is an excavation surface. ",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Metadaten/Excavation_object_ID.csv__Planum",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'excavation_object_id',
        ]
        verbose_name = "Excavation Objects"

    def __str__(self):
        return "{}".format(self.excavation_object_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:excavationobjectid_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:excavationobjectid_create')

    def get_absolute_url(self):
        return reverse('archiv:excavationobjectid_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:excavationobjectid_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:excavationobjectid_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:excavationobjectid_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:excavationobjectid_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:excavationobjectid_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class ExcavationSeasons(models.Model):
    ### Excavation season ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    excavation_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Ecxcavation ID",
        help_text="helptext for excavation_id",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ExcavationSeasons/ExcavationSeasons.csv__Excavation_id",
    )
    grabungskampagnen = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Excavations Seasons",
        help_text="helptext for grabungskampagnen",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ExcavationSeasons/ExcavationSeasons.csv__Grabungskampagnen",
    )
    start_date_end_date = DateRangeField(
        blank=True, null=True,
        verbose_name="Start date - end date",
        help_text="helptext for start_date_end_date",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ExcavationSeasons/ExcavationSeasons.csv__start-date/end-date",
    )
    year = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Year",
        help_text="helptext for year",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ExcavationSeasons/ExcavationSeasons.csv__Year",
    )
    season = models.ForeignKey(
        SkosConcept,
        related_name='rvn_excavationseasons_season_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Season",
        help_text="helptext for season",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ExcavationSeasons/ExcavationSeasons.csv__Season",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_excavationseasons_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="helptext for access",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_ExcavationSeasons/ExcavationSeasons.csv__Access",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'grabungskampagnen',
        ]
        verbose_name = "Excavation Seasons"

    def __str__(self):
        return "{}".format(self.grabungskampagnen)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:excavationseasons_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:excavationseasons_create')

    def get_absolute_url(self):
        return reverse('archiv:excavationseasons_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:excavationseasons_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:excavationseasons_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:excavationseasons_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:excavationseasons_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:excavationseasons_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Fielddrawing(models.Model):
    ### Digitised fielddrawing ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    filename = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Filename",
        help_text="Consists of document_ID and document_title, separated by two underscores. For example file name ‘TD_FZ_1234__TD_F-I_j21_Planum1’ consists of the document_ID ‘TD_FZ_1234’ which is separated by two underscores from the document title describing the contents of the document ‘TD(Tell el-Daba)_F/I(area)_j21(square)_ Planum 1’.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Filename",
        arche_prop="hasTitle",
    )
    document_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document ID",
        help_text="The project-specific unique identifier of the document which was scanned. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (FZ for Feldzeichnung) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234). For example document ID ‘TD_FZ_1234’ means ‘Tell el-Daba_field drawing_inventory number 1234’).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Document_ID",
        arche_prop="hasNonLinkedIdentifier",
    )
    document_title = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document title",
        help_text="A description of the content of the document.  It allows information about the contents of the file to be understood by a human being without opening it. For field drawings the document title consists of abbreviation for site_excavation area_square trench_content of field drawing (e.g.: TD_F-I_j21_Planum1).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Document_title",
    )
    document_type = models.ManyToManyField(
        "DocumentTypes",
        related_name='rvn_fielddrawing_document_type_documenttypes',
        blank=True,
        verbose_name="Document type",
        help_text="Type of document – for field drawing metadata this is always ‘Feldzeichnung’ (Fielddrawing).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Document_type",
    )
    creation_date_original = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of original document",
        help_text="Date when the field drawing was made.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Creation_date_original",
    )
    creation_date_scan = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date scan",
        help_text="Date when the scan was made.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Creation_date_scan",
        arche_prop="hasCreatedDate",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date metadata",
        help_text="Date when metadata was created.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Creation_date_metadata",
    )
    creator_metadata = models.ManyToManyField(
        "Actor",
        related_name='rvn_fielddrawing_creator_metadata_actor',
        blank=True,
        verbose_name="Creator of metadata",
        help_text="Person who created the metadata.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Creator_metadata",
        arche_prop="hasMetadataCreator",
    )
    creator_original = models.ManyToManyField(
        "Actor",
        related_name='rvn_fielddrawing_creator_original_actor',
        blank=True,
        verbose_name="Creator of original",
        help_text="Person who created the original field drawing.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Creator_original",
    )
    storage_folder_original = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Title of the folder where the original fielddrawing is kept",
        help_text="The text on the label of the folder in the analogue TD archive, where the original is held.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Storage_folder_original",
    )
    resolution_scan_ppi = models.IntegerField(
        blank=True, null=True,
        verbose_name="Scan resolution",
        help_text="Scan resolution settings. ",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Resolution_scan_dpi",
        arche_prop="hasTechnicalInfo",
    )
    original_material = models.ManyToManyField(
        SkosConcept,
        related_name='rvn_fielddrawing_original_material_skosconcept',
        blank=True,
        verbose_name="Material of original document",
        help_text="Material of original (Millimetrepaper (Millimeterpapier), Transparentpapier (tracing paper), Kopierpapier (photocopy)).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Original_material",
    )
    original_inventory_number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Inventory number of original",
        help_text="Inventory number of the original fielddrawing. An inventory number was given to each field drawing during the excavations. The inventory number is part of the unique identifier of the field drawing. If a field drawing did not have an inventory number, or there was an error with the inventory number, then a new inventory number consisting of the project name ‘4DPuzzle’ and a running number was created, e.g.: 4DPuzzle1234). The list of the new inventory numbers is kept in the Excel file ‘Metadaten.xlsl’, worksheet  ‘Resource_4DPuzzle_number’).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Original_inventory_number",
        arche_prop="hasNonLinkedIdentifier",
    )
    find_inventory_number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Inventory number of a find drawn on the fielddrawing",
        help_text="Inventory number of a find which is shown on the fielddrawing.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Find_inventory_number",
        arche_prop="hasNonLinkedIdentifier",
    )
    amendment_drawn_by = models.ManyToManyField(
        "Actor",
        related_name='rvn_fielddrawing_amendment_drawn_by_actor',
        blank=True,
        verbose_name="Drawer of amendment to the fielddrawing",
        help_text="Person who made amendments to the field drawing.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Amendment_drawn_by",
    )
    amendment_date = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Amendment date",
        help_text="Date when the amendment was made.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Amendment_date",
    )
    drawer_monogram = models.ManyToManyField(
        "Actor",
        related_name='rvn_fielddrawing_drawer_monogram_actor',
        blank=True,
        verbose_name="Monogram of drawer",
        help_text="Monogram of the person who drew the field drawing.  ",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Drawer_monogram",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_fielddrawing_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Excavation_object_ID",
    )
    archaeological_object_id = models.ManyToManyField(
        "ArchaeologicalObjectID",
        related_name='rvn_fielddrawing_archaeological_object_id_archaeologicalobjectid',
        blank=True,
        verbose_name="Archaeological object ID",
        help_text=" ",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Archaeological_object_ID",
    )
    stratum_id_relative = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Stratum (relative)",
        help_text="Unique identifier of a relative stratum. Relative stratum is a group of stratigraphic units which are thought to belong to a chronological phase (the ID contains: abbreviation of site_excavation area_relative stratum e.g.: TD_F-I_a is the ID of stratum a in area F-I in Tell el-Daba).",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Stratum_ID_relative",
    )
    stratum_id_absolute_prepub = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Stratum (absolute)",
        help_text="Unique identifier of an absolute stratum. An absolute stratum is a group of stratigraphic units which were confirmed to belong to a chronological phase during post-excavation analysis but before publication (the ID contains: abbreviation of site_excavation area_absolute stratum e.g.: TD_F-I_A is the ID of the absolute stratum A in area F-I in Tell el-Daba). ",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Stratum_ID_absolute_prepub",
    )
    stratum_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Stratum (comment)",
        help_text="Transcript of the handwritten comments and notes on the stratum written on the field drawing. ",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Stratum_comment",
    )
    month = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Fieldwork month",
        help_text="Month when the field drawing was made.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Month",
    )
    scale = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Scale of drawing",
        help_text="Drawing scale of the field drawing.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Scale",
        arche_prop="hasTechnicalInfo",
    )
    original_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment on the original document",
        help_text="Transcript of additional information found on the field drawing.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Original_comment",
    )
    digitisation_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment from digitisation",
        help_text="Comments from creation of the scan (e.g. noticing of measurement errors, etc.) ",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Digitisation_comment",
        arche_prop="hasNote",
    )
    excavation_id = models.ManyToManyField(
        "ExcavationSeasons",
        related_name='rvn_fielddrawing_excavation_id_excavationseasons',
        blank=True,
        verbose_name="Excavation Season",
        help_text="helptext for excavation_id",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Excavation_id",
    )
    creation_year_original = models.TextField(
        blank=True, null=True,
        verbose_name="Creation year of original document",
        help_text="Year when the field drawing was made.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Creation_year_original",
    )
    season = models.TextField(
        blank=True, null=True,
        verbose_name="Fieldwork season",
        help_text="Fieldwork season when the field drawing was made (H = Herbst = autumn; F = Frühling = spring).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Season",
    )
    file_extension = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fielddrawing_file_extension_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension",
        help_text="File extension of the scan.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__File_extension",
        arche_prop="hasTechnicalInfo",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fielddrawing_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="Copyright holder of the document. ",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Copyright",
        arche_prop="hasLicensor",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fielddrawing_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="Whether access to the resource is restricted or if it is open to the public.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Access",
        arche_prop="hasAccessRestriction",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fielddrawing_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="Abbreviation of Tell el-Daba is 'TD'.",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Site_ID",
    )
    equipment_scan = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fielddrawing_equipment_scan_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Scanner",
        help_text="The scanner which was used (brand, product name and number).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Equipment_scan",
        arche_prop="hasUsedHardware",
    )
    source_original_copy_edited_copy = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fielddrawing_source_original_copy_edited_copy_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Scan was either made from an original fielddrawing, a copy of a fielddrawing or copy of a fielddrawing that was edited",
        help_text="The original document was either a original field drawing, a photocopy of a field drawing or an edited photocopy of a field drawing (with handwritten comments).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Source__original_copy_edited_copy",
    )
    creator_scan = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fielddrawing_creator_scan_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of scan",
        help_text="Organisation who carried out the scanning.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-II/Fielddrawings.csv__Creator_scan",
        arche_prop="hasContributor",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fielddrawing_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)",
        help_text="When the document was created. Field drawings were always created in the field, so the entry is always ‘excavation’.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Feldzeichnungen_F-I/Fielddrawings.csv__Excavation__post_excavation",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'filename',
        ]
        verbose_name = "Fielddrawing"

    def __str__(self):
        return "{}".format(self.filename)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:fielddrawing_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:fielddrawing_create')

    def get_absolute_url(self):
        return reverse('archiv:fielddrawing_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:fielddrawing_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:fielddrawing_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:fielddrawing_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:fielddrawing_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:fielddrawing_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Film(models.Model):
    ### Analogue photographic film negatives ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    film_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Film ID",
        help_text="The film ID is a project-specific unique identifier. The film IDs consist of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. SWnegfilm for black &white negative film, FDfilm for colour slide film, FDdig for colour slide film digitised ) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Filme/Films.csv__Film_ID",
        arche_prop="hasTitle",
    )
    film_number = models.IntegerField(
        blank=True, null=True,
        verbose_name="Film number",
        help_text="helptext for film_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Filme/Films.csv__Film_number",
        arche_prop="hasNonLinkedIdentifier",
    )
    addition_film_identifier = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Addition film identifier",
        help_text="helptext for addition_film_identifier",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Filme/Films.csv__Addition_film_identifier",
        arche_prop="hasNonLinkedIdentifier",
    )
    foto_numbers_missing = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Foto numbers missing",
        help_text="helptext for foto_numbers_missing",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Filme/Films.csv__Foto_numbers_missing",
    )
    decomposition_phenomenon = models.TextField(
        blank=True, null=True,
        verbose_name="Decomposition phenomenon",
        help_text="The films were visually examined if they show signs of damage and decomposition. This field contains a description of the results.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Filme/Films.csv__Decomposition_phenomenon",
    )
    acetic_acid_smell = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Acetic acid smell",
        help_text="If acidic smell could be identified it is noted here.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Filme/Films.csv__Acetic_acid_smell",
    )
    storage_folder_original = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Storage folder original",
        help_text="Inscription visible on the label on the folder where the film is kept.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Filme/Films.csv__Storage_folder_original",
    )
    original_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment on the original document",
        help_text="Comments from the creation of the original resource.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Filme/Films.csv__Original_comment",
    )
    digitisation_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment from digitisation",
        help_text="Comments from digitisation.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Filme/Films.csv__Digitisation_comment",
        arche_prop="hasNote",
    )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_film_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="helptext for document_type",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Filme/Films.csv__Document_type",
    )
    excavation_id = models.ManyToManyField(
        "ExcavationSeasons",
        related_name='rvn_film_excavation_id_excavationseasons',
        blank=True,
        verbose_name="Excavation Season",
        help_text="helptext for excavation_id",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Filme/Films.csv__Excavation_id",
    )
    creation_year_original = models.TextField(
        blank=True, null=True,
        verbose_name="Creation year original",
        help_text="helptext for creation_year_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Filme/Films.csv__Creation_year_original",
    )
    film_format = models.ForeignKey(
        SkosConcept,
        related_name='rvn_film_film_format_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Film format",
        help_text="helptext for film_format",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Filme/Films.csv__Film_format",
    )
    film_brand = models.ForeignKey(
        SkosConcept,
        related_name='rvn_film_film_brand_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Film brand",
        help_text="helptext for film_brand",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Filme/Films.csv__Film_brand",
    )
    equipment_camera_brand = models.ForeignKey(
        SkosConcept,
        related_name='rvn_film_equipment_camera_brand_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Equipment camera brand",
        help_text="helptext for equipment_camera_brand",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Filme/Films.csv__Equipment_camera_brand",
    )
    original_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_film_original_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Material of original document",
        help_text="",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Filme/Films.csv__Original_material",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'film_id',
        ]
        verbose_name = "Photographic Film"

    def __str__(self):
        return "{}".format(self.film_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:film_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:film_create')

    def get_absolute_url(self):
        return reverse('archiv:film_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:film_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:film_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:film_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:film_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:film_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Finddrawing(models.Model):
    ### Digitised finddrawing ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_finddrawing_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="helptext for creator_metadata",
    ).set_extra(
        is_public=True,
        arche_prop="hasMetadataCreator",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_finddrawing_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original document",
        help_text="helptext for creator_original",
    ).set_extra(
        is_public=True,
    )
    creator_scan = models.ForeignKey(
        "Actor",
        related_name='rvn_finddrawing_creator_scan_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of scan",
        help_text="helptext for creator_scan",
    ).set_extra(
        is_public=True,
        arche_prop="hasContributor",
    )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_finddrawing_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="helptext for document_type",
    ).set_extra(
        is_public=True,
    )
    find_inventory_number = models.ForeignKey(
        "FundinventarInventarnummern",
        related_name='rvn_finddrawing_find_inventory_number_fundinventarinventarnummern',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find inventory number",
        help_text="helptext for find_inventory_number",
    ).set_extra(
        is_public=True,
        arche_prop="hasNonLinkedIdentifier",
    )
    filename = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Filename ",
        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
    ).set_extra(
        is_public=True,
        arche_prop="hasTitle",
    )
    document_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document ID ",
        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. DR for Digital Resource) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
    ).set_extra(
        is_public=True,
        arche_prop="hasNonLinkedIdentifier",
    )
    document_title = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document title",
        help_text="A description of the content of the document.  It allows information about the contents of the file to be understood by a human being without opening it. ",
    ).set_extra(
        is_public=True,
    )
    filename_old = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Filename old",
        help_text="helptext for filename_old",
    ).set_extra(
        is_public=False,
    )
    creation_date_original = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of original document",
        help_text="helptext for creation_date_original",
    ).set_extra(
        is_public=True,
    )
    creation_year_original = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Creation year of original document",
        help_text="helptext for creation_year_original",
    ).set_extra(
        is_public=True,
    )
    creation_date_scan = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of scan",
        help_text="helptext for creation_date_scan",
    ).set_extra(
        is_public=True,
        arche_prop="hasCreatedDate",
    )
    convolute_inventory_number = models.ForeignKey(
        "FundinventarKonvolutnummern",
        related_name='rvn_finddrawing_convolute_inventory_number_fundinventarkonvolutnummern',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Convolute inventory number",
        help_text="helptext for convolute_inventory_number",
    ).set_extra(
        is_public=True,
        arche_prop="hasNonLinkedIdentifier",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of metadata",
        help_text="helptext for creation_date_metadata",
    ).set_extra(
        is_public=True,
    )
    bone_stone_inventory_number = models.ForeignKey(
        "FundinventarSteininventar",
        related_name='rvn_finddrawing_bone_stone_inventory_number_fundinventarsteininventar',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Bone or stone inventory number",
        help_text="helptext for bone_stone_inventory_number",
    ).set_extra(
        is_public=True,
        arche_prop="hasNonLinkedIdentifier",
    )
    storage_folder_original = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Storage folder of original document",
        help_text="helptext for storage_folder_original",
    ).set_extra(
        is_public=True,
    )
    equipment = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Equiment",
        help_text="helptext for equipment",
    ).set_extra(
        is_public=True,
        arche_prop="hasUsedHardware",
    )
    resolution_scan_dpi = models.IntegerField(
        blank=True, null=True,
        verbose_name="Scan resolution",
        help_text="helptext for resolution_scan_dpi",
    ).set_extra(
        is_public=True,
        arche_prop="hasTechnicalInfo",
    )
    find_date = models.DateField(
        blank=True, null=True,
        verbose_name="Find datum",
        help_text="helptext for find_date",
    ).set_extra(
        is_public=True,
    )
    rendered_in_ink = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Rendered in ink",
        help_text="helptext for rendered_in_ink",
    ).set_extra(
        is_public=True,
    )
    original_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment on the original document",
        help_text="Comments from the creation of the original resource.",
    ).set_extra(
        is_public=True,
    )
    digitisation_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment from digitisation",
        help_text="Comments from digitisation.",
    ).set_extra(
        is_public=True,
        arche_prop="hasNote",
    )
    file_extension = models.ForeignKey(
        SkosConcept,
        related_name='rvn_finddrawing_file_extension_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension ",
        help_text="helptext for file_extension",
    ).set_extra(
        is_public=True,
        arche_prop="hasTechnicalInfo",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_finddrawing_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="helptext for copyright",
    ).set_extra(
        is_public=True,
        arche_prop="hasOwner",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_finddrawing_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="Whether access to the resource is restricted or if it is open to the public.",
    ).set_extra(
        is_public=True,
        arche_prop="hasAccessRestriction",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_finddrawing_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="Abbreviation of Tell el-Daba is 'TD'.",
    ).set_extra(
        is_public=False,
    )
    source_original_copy_edited_copy = models.ForeignKey(
        SkosConcept,
        related_name='rvn_finddrawing_source_original_copy_edited_copy_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Wheter source is a original or a copy",
        help_text="helptext for source_original_copy_edited_copy",
    ).set_extra(
        is_public=True,
    )
    original_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_finddrawing_original_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Material of original document",
        help_text="helptext for original_material",
    ).set_extra(
        is_public=True,
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_finddrawing_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)",
        help_text="helptext for excavation_post_excavation",
    ).set_extra(
        is_public=True,
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'filename',
        ]
        verbose_name = "Finddrawing"

    def __str__(self):
        return "{}".format(self.filename)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:finddrawing_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:finddrawing_create')

    def get_absolute_url(self):
        return reverse('archiv:finddrawing_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:finddrawing_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:finddrawing_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:finddrawing_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:finddrawing_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:finddrawing_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Findsheets(models.Model):
    ### Digitised find sheets ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_findsheets_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="helptext for creator_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Creator_metadata",
        arche_prop="hasMetadataCreator",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_findsheets_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original document",
        help_text="helptext for creator_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Creator_original",
    )
    creator_scan = models.ForeignKey(
        "Actor",
        related_name='rvn_findsheets_creator_scan_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of scan",
        help_text="helptext for creator_scan",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Creator_scan",
        arche_prop="hasContributor",
    )
    archaeological_object_id = models.ForeignKey(
        "ArchaeologicalObjectID",
        related_name='rvn_findsheets_archaeological_object_id_archaeologicalobjectid',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Archaeological object ID",
        help_text="The unique identifier of an archaeological object. Archaeological objects are all objects that were created in the past, e.g. in the Bronze Age. An archaeological object ID contains the abbreviation of site_area_square trench_name of archaeological object (e.g.: TD_F-I_o19_Grab1 means Tell el-Daba, area F-I, square o19, grave 1).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Archaeological_object_ID",
    )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_findsheets_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="helptext for document_type",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Document_type",
    )
    find_inventory_number = models.ForeignKey(
        "FundinventarInventarnummern",
        related_name='rvn_findsheets_find_inventory_number_fundinventarinventarnummern',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find inventory number",
        help_text="helptext for find_inventory_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Find_inventory_number",
        arche_prop="hasNonLinkedIdentifier",
    )
    convolute_inventory_number = models.ForeignKey(
        "FundinventarKonvolutnummern",
        related_name='rvn_findsheets_convolute_inventory_number_fundinventarkonvolutnummern',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Convolute inventory number",
        help_text="helptext for convolute_inventory_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Convolute_inventory_number",
        arche_prop="hasNonLinkedIdentifier",
    )
    bone_stone_inventory_number = models.ForeignKey(
        "FundinventarSteininventar",
        related_name='rvn_findsheets_bone_stone_inventory_number_fundinventarsteininventar',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Bone or stone inventory number",
        help_text="helptext for bone_stone_inventory_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Bone_stone_inventory_number",
        arche_prop="hasNonLinkedIdentifier",
    )
    filename = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Filename ",
        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Filename",
        arche_prop="hasTitle",
    )
    document_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document ID ",
        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. DR for Digital Resource) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Document_ID",
        arche_prop="hasNonLinkedIdentifier",
    )
    document_title = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document title",
        help_text="A description of the content of the document.  It allows information about the contents of the file to be understood by a human being without opening it. ",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Document_title",
    )
    filename_old = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Filename old",
        help_text="helptext for filename_old",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Filename_old",
    )
    creation_date_original = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of original document",
        help_text="helptext for creation_date_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Creation_date_original",
    )
    creation_year_original = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Creation year of original document",
        help_text="helptext for creation_year_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Creation_year_original",
    )
    creation_date_scan = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of scan",
        help_text="helptext for creation_date_scan",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Creation_date_scan",
        arche_prop="hasCreatedDate",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of metadata",
        help_text="helptext for creation_date_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Creation_date_metadata",
    )
    resolution_scan_dpi = models.IntegerField(
        blank=True, null=True,
        verbose_name="Scan resolution",
        help_text="helptext for resolution_scan_dpi",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Resolution_scan_dpi",
        arche_prop="hasTechnicalInfo",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_findsheets_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Excavation_object_ID",
    )
    original_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment on the original document",
        help_text="Comments from the creation of the original resource.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Original_comment",
    )
    digitisation_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment from digitisation",
        help_text="Comments from digitisation.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Digitisation_comment",
        arche_prop="hasNote",
    )
    file_extension = models.ForeignKey(
        SkosConcept,
        related_name='rvn_findsheets_file_extension_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension ",
        help_text="helptext for file_extension",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__File_extension",
        arche_prop="hasTechnicalInfo",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_findsheets_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="helptext for copyright",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Copyright",
        arche_prop="hasOwner",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_findsheets_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="Whether access to the resource is restricted or if it is open to the public.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Access",
        arche_prop="hasAccessRestriction",
    )
    storage_original = models.ForeignKey(
        SkosConcept,
        related_name='rvn_findsheets_storage_original_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Storage of original document",
        help_text="helptext for storage_original",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Storage_original",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_findsheets_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="Abbreviation of Tell el-Daba is 'TD'.",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Site_ID",
    )
    equipment_scan = models.ForeignKey(
        SkosConcept,
        related_name='rvn_findsheets_equipment_scan_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Equipment for scan",
        help_text="helptext for equipment_scan",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Equipment_scan",
        arche_prop="HasUsedHardware",
    )
    source_original_copy_edited_copy = models.ForeignKey(
        SkosConcept,
        related_name='rvn_findsheets_source_original_copy_edited_copy_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Wheter source is a original or a copy",
        help_text="helptext for source_original_copy_edited_copy",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Source__original_copy_edited-copy",
    )
    original_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_findsheets_original_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Material of original document",
        help_text="helptext for original_material",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Original_material",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_findsheets_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)",
        help_text="helptext for excavation_post_excavation",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundzettel/Find_sheets.csv__Excavation__post_excavation",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'filename',
        ]
        verbose_name = "Findsheets"

    def __str__(self):
        return "{}".format(self.filename)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:findsheets_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:findsheets_create')

    def get_absolute_url(self):
        return reverse('archiv:findsheets_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:findsheets_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:findsheets_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:findsheets_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:findsheets_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:findsheets_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Fotoborndigital(models.Model):
    ### Folder with born-digital photos ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_fotoborndigital_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="helptext for creator_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_born_digital/Fotos_born_digital.csv__Creator_metadata",
        arche_prop="hasMetadataCreator",
    )
    folder_name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Folder name",
        help_text="Folder name is composed like the filenames: it consists of a folder ID and a folder title, separated by two underscores. ",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_born_digital/Fotos_born_digital.csv__Folder_name",
        arche_prop="hasTitle",
    )
    folder_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Folder ID",
        help_text="The project-specific unique identifier of the folder. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (DF for digital photo) and a 4DPuzzle inventory number.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_born_digital/Fotos_born_digital.csv__Folder_ID",
        arche_prop="hasNonLinkedIdentifier",
    )
    folder_title = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Folder title",
        help_text="A description of the content of the folder.  It allows information about the contents of the file to be understood by a human being without opening it. It contains information about inventory numbers, excavation objects, find types etc.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_born_digital/Fotos_born_digital.csv__Folder_title",
    )
    folder_name_old = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Old folder name",
        help_text="helptext for folder_name_old",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_born_digital/Fotos_born_digital.csv__Folder_name_old",
    )
    path_filename_old = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Data path in old TD archive",
        help_text="helptext for path_filename_old",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_born_digital/Fotos_born_digital.csv__Path_filename_old",
    )
    path_filename_arche = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Data path in ARCHE",
        help_text="helptext for path_filename_arche",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_born_digital/Fotos_born_digital.csv__Path_filename_ARCHE",
        arche_prop="hasLocationPath",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date metadata",
        help_text="helptext for creation_date_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_born_digital/Fotos_born_digital.csv__Creation_date_metadata",
    )
    find_inventory_number_from_to = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Inventory number of a find ",
        help_text="helptext for find_inventory_number_from_to",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_born_digital/Fotos_born_digital.csv__Find_inventory_number|from/to",
        arche_prop="hasNonLinkedIdentifier",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_fotoborndigital_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_born_digital/Fotos_born_digital.csv__Excavation_object_ID",
    )
    creation_year_original = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Creation year original",
        help_text="helptext for creation_year_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_born_digital/Fotos_born_digital.csv__Creation_year_original",
    )
    original_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment on the original document",
        help_text="Comments from the creation of the original resource.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_born_digital/Fotos_born_digital.csv__Original_comment",
    )
    digitisation_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment from digitisation",
        help_text="Comments from digitisation.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_born_digital/Fotos_born_digital.csv__Digitisation_comment",
        arche_prop="hasNote",
    )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_fotoborndigital_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="helptext for document_type",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_born_digital/Fotos_born_digital.csv__Document_type",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotoborndigital_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="helptext for copyright",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_born_digital/Fotos_born_digital.csv__Copyright",
        arche_prop="hasOwner",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotoborndigital_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="Whether access to the resource is restricted or if it is open to the public.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_born_digital/Fotos_born_digital.csv__Access",
        arche_prop="hasAccessRestriction",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotoborndigital_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="Abbreviation of Tell el-Daba is 'TD'.",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_born_digital/Fotos_born_digital.csv__Site_ID",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'folder_name',
        ]
        verbose_name = "Fotos born digital"

    def __str__(self):
        return "{}".format(self.folder_name)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:fotoborndigital_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:fotoborndigital_create')

    def get_absolute_url(self):
        return reverse('archiv:fotoborndigital_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:fotoborndigital_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:fotoborndigital_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:fotoborndigital_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:fotoborndigital_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:fotoborndigital_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Fotosgescannt(models.Model):
    ### Digitised photos ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_fotosgescannt_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="helptext for creator_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Creator_metadata",
        arche_prop="hasMetadataCreator",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_fotosgescannt_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original photo",
        help_text="helptext for creator_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Creator_original",
    )
    creator_scan = models.ForeignKey(
        "Actor",
        related_name='rvn_fotosgescannt_creator_scan_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of scan",
        help_text="helptext for creator_scan",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Creator_scan",
        arche_prop="hasContributor",
    )
    filename = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Filename",
        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Filename",
        arche_prop="hasTitle",
    )
    document_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document ID",
        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. DR for Digital Resource) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Document_ID",
        arche_prop="hasNonLinkedIdentifier",
    )
    document_title = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document title",
        help_text="A description of the content of the document.  It allows information about the contents of the file to be understood by a human being without opening it. ",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Document_title",
    )
    filename_old = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Filename old ",
        help_text="helptext for filename_old",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Filename_old",
    )
    film_number = models.IntegerField(
        blank=True, null=True,
        verbose_name="Film number",
        help_text="helptext for film_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Film_number",
        arche_prop="hasNonLinkedIdentifier",
    )
    photo_number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Photo number",
        help_text="helptext for photo_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Photo_number",
        arche_prop="hasNonLinkedIdentifier",
    )
    creation_date_original = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of analogue photo",
        help_text="helptext for creation_date_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Creation_date_original",
    )
    excavation_id = models.ManyToManyField(
        "ExcavationSeasons",
        related_name='rvn_fotosgescannt_excavation_id_excavationseasons',
        blank=True,
        verbose_name="Excavation Season",
        help_text="helptext for excavation_id",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Excavation_id",
    )
    creation_year_original = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Creation year of analogue photo",
        help_text="helptext for creation_year_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Creation_year_original",
    )
    creation_date_scan = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of scan",
        help_text="helptext for creation_date_scan",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Creation_date_scan",
        arche_prop="hasCreatedDate",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of metadata",
        help_text="helptext for creation_date_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Creation_date_metadata",
    )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_fotosgescannt_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="Digitised photo",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Document_type",
    )
    resolution_scan_ppi = models.IntegerField(
        blank=True, null=True,
        verbose_name="Resolution of scan",
        help_text="helptext for resolution_scan_ppi",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Resolution_scan_ppi",
        arche_prop="hasTechnicalInfo",
    )
    pixel_size = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Pixel size",
        help_text="helptext for pixel_size",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Pixel_size",
        arche_prop="hasTechnicalInfo",
    )
    find_inventory_number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Find inventor number",
        help_text="helptext for find_inventory_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Find_inventory_number",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_fotosgescannt_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Excavation_object_ID",
    )
    archaeological_object_id = models.ManyToManyField(
        "ArchaeologicalObjectID",
        related_name='rvn_fotosgescannt_archaeological_object_id_archaeologicalobjectid',
        blank=True,
        verbose_name="Archaeological object ID",
        help_text="The unique identifier of an archaeological object. Archaeological objects are all objects that were created in the past, e.g. in the Bronze Age. An archaeological object ID contains the abbreviation of site_area_square trench_name of archaeological object (e.g.: TD_F-I_o19_Grab1 means Tell el-Daba, area F-I, square o19, grave 1).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Archaeological_object_ID",
    )
    season = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Season ",
        help_text="helptext for season",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Season",
    )
    original_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment on the original document",
        help_text="Comments from the creation of the original resource.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Original_comment",
    )
    digitisation_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment from digitisation",
        help_text="Comments from digitisation.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Digitisation_comment",
        arche_prop="hasNote",
    )
    film_id = models.ForeignKey(
        "Film",
        related_name='rvn_fotosgescannt_film_id_film',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Film ID",
        help_text="helptext for film_id",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Film_ID",
        arche_prop="hasNonLinkedIdentifier",
    )
    file_extension = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotosgescannt_file_extension_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of scan",
        help_text="helptext for file_extension",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__File_extension",
        arche_prop="hasTechnicalInfo",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotosgescannt_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="helptext for copyright",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Copyright",
        arche_prop="hasOwner",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotosgescannt_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="Whether access to the resource is restricted or if it is open to the public.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Access",
        arche_prop="hasAccessRestriction",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotosgescannt_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="Abbreviation of Tell el-Daba is 'TD'.",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Site_ID",
    )
    equipment_scan = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotosgescannt_equipment_scan_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Equipment used for scanning",
        help_text="helptext for equipment_scan",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Equipment_scan",
        arche_prop="hasUsedHardware",
    )
    source_original_copy_edited_copy = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotosgescannt_source_original_copy_edited_copy_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Wheter source is a original or a copy",
        help_text="helptext for source_original_copy_edited_copy",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Source__original_copy_edited-copy",
    )
    archaeological_object_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotosgescannt_archaeological_object_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Archeological object type",
        help_text="helptext for archaeological_object_type",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Archaeological_object_type",
    )
    find_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotosgescannt_find_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find type",
        help_text="helptext for find_type",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Find_type",
    )
    find_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotosgescannt_find_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find material",
        help_text="helptext for find_material",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__Find_material",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotosgescannt_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)",
        help_text="helptext for excavation_post_excavation",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fotos_gescannt/Photos.csv__excavation__post-excavation",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'filename',
        ]
        verbose_name = "Fotos gescannt"

    def __str__(self):
        return "{}".format(self.filename)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:fotosgescannt_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:fotosgescannt_create')

    def get_absolute_url(self):
        return reverse('archiv:fotosgescannt_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:fotosgescannt_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:fotosgescannt_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:fotosgescannt_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:fotosgescannt_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:fotosgescannt_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Fundinventar4DPuzzleID(models.Model):
    ### A 4DPuzzleID was created for find inventories that did not have an ID ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    excavation_object_id = models.ForeignKey(
        "ExcavationObjectID",
        related_name='rvn_fundinventar4dpuzzleid_excavation_object_id_excavationobjectid',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Excavation object ID",
        help_text="helptext for excavation_object_id",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_4DPuzzleID/Find_inventory_4DPuzzle_number.csv__Excavation_object_ID",
    )
    find_inventory_4dpuzzle_number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Find inventory 4DPuzzle number",
        help_text="helptext for find_inventory_4dpuzzle_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_4DPuzzleID/Find_inventory_4DPuzzle_number.csv__Find_inventory_4DPuzzle_number",
    )
    find_local_number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Find local number",
        help_text="helptext for find_local_number",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_4DPuzzleID/Find_inventory_4DPuzzle_number.csv__Find_local_number",
    )
    convolute_inventory_number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Convolute inventory number",
        help_text="helptext for convolute_inventory_number",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_4DPuzzleID/Find_inventory_4DPuzzle_number.csv__Convolute_inventory_number",
    )
    corresponding_to_inventory_number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Corresponding to inventory number",
        help_text="helptext for corresponding_to_inventory_number",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_4DPuzzleID/Find_inventory_4DPuzzle_number.csv__Corresponding_to_inventory_number",
    )
    find_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Find comment",
        help_text="helptext for find_comment",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_4DPuzzleID/Find_inventory_4DPuzzle_number.csv__Find_comment",
    )
    stratum_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Stratum Comment",
        help_text="helptext for stratum_comment",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_4DPuzzleID/Find_inventory_4DPuzzle_number.csv__Stratum_comment",
    )
    find_date = models.DateField(
        blank=True, null=True,
        verbose_name="Find date",
        help_text="helptext for find_date",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_4DPuzzleID/Find_inventory_4DPuzzle_number.csv__Find_date",
    )
    storage_find = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Storage of find",
        help_text="helptext for storage_find",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_4DPuzzleID/Find_inventory_4DPuzzle_number.csv__Storage_find",
    )
    relatedto = models.ManyToManyField(
        SkosConcept,
        related_name='rvn_fundinventar4dpuzzleid_relatedto_skosconcept',
        blank=True,
        verbose_name="File is related to other TD resources",
        help_text="helptext for relatedto",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_4DPuzzleID/Find_inventory_4DPuzzle_number.csv__RelatedTo",
    )
    find_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventar4dpuzzleid_find_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find material",
        help_text="helptext for find_material",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_4DPuzzleID/Find_inventory_4DPuzzle_number.csv__Find_material",
    )
    digitisation_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment from digitisation",
        help_text="helptext for digitisation_comment",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_4DPuzzleID/Find_inventory_4DPuzzle_number.csv__Digitisation_comment",
    )
    find_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventar4dpuzzleid_find_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find type",
        help_text="helptext for find_type",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_4DPuzzleID/Find_inventory_4DPuzzle_number.csv__Find_type",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventar4dpuzzleid_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="helptext for access",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_4DPuzzleID/Find_inventory_4DPuzzle_number.csv__Access",
    )
    uncertainty_excavation_digitisation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventar4dpuzzleid_uncertainty_excavation_digitisation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or digital",
        help_text="helptext for uncertainty_excavation_digitisation",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_4DPuzzleID/Find_inventory_4DPuzzle_number.csv__Uncertainty__excavation_digitisation",
    )
    creator_metadata = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventar4dpuzzleid_creator_metadata_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="helptext for creator_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_4DPuzzleID/Find_inventory_4DPuzzle_number.csv__Creator_metadata",
    )
    archaeological_object_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventar4dpuzzleid_archaeological_object_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Archaeological object ID",
        help_text="helptext for archaeological_object_id",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_4DPuzzleID/Find_inventory_4DPuzzle_number.csv__Archaeological_object_ID",
    )
    stratum_id_relative = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventar4dpuzzleid_stratum_id_relative_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Stratum ID relative",
        help_text="helptext for stratum_id_relative",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_4DPuzzleID/Find_inventory_4DPuzzle_number.csv__Stratum_ID_relative",
    )
    stratum_id_absolute_prepub = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventar4dpuzzleid_stratum_id_absolute_prepub_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Stratum ID absolute pre publication",
        help_text="helptext for stratum_id_absolute_prepub",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_4DPuzzleID/Find_inventory_4DPuzzle_number.csv__Stratum_ID_absolute_prepub",
    )
    phase_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventar4dpuzzleid_phase_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Phase ID",
        help_text="helptext for phase_id",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_4DPuzzleID/Find_inventory_4DPuzzle_number.csv__Phase_ID",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'find_inventory_4dpuzzle_number',
        ]
        verbose_name = "Fundinventar 4DPuzzle ID"

    def __str__(self):
        return "{}".format(self.find_inventory_4dpuzzle_number)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:fundinventar4dpuzzleid_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:fundinventar4dpuzzleid_create')

    def get_absolute_url(self):
        return reverse('archiv:fundinventar4dpuzzleid_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:fundinventar4dpuzzleid_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:fundinventar4dpuzzleid_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:fundinventar4dpuzzleid_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:fundinventar4dpuzzleid_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:fundinventar4dpuzzleid_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class FundinventarInventarnummern(models.Model):
    ### Inventory numbers of find inventories ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_fundinventarinventarnummern_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="helptext for creator_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Inventarnummern/Find_inventory_number.csv__Creator_metadata",
    )
    archaeological_object_id = models.ForeignKey(
        "ArchaeologicalObjectID",
        related_name='rvn_fundinventarinventarnummern_archaeological_object_id_archaeologicalobjectid',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Archaeological object ID",
        help_text="helptext for archaeological_object_id",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Inventarnummern/Find_inventory_number.csv__Archaeological_object_ID",
    )
    corresponding_to_inventory_number = models.ForeignKey(
        "FundinventarInventarnummern",
        related_name='rvn_fundinventarinventarnummern_corresponding_to_inventory_number_fundinventarinventarnummern',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Corresponding to inventory number",
        help_text="helptext for corresponding_to_inventory_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Inventarnummern/Find_inventory_number.csv__Corresponding_to_inventory_number",
    )
    find_inventory_number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Find inventory number",
        help_text="helptext for find_inventory_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Inventarnummern/Find_inventory_number.csv__Find_inventory_number",
    )
    find_local_number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Find local number",
        help_text="helptext for find_local_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Inventarnummern/Find_inventory_number.csv__Find_local_number",
    )
    convolute_inventory_number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Convolute inventory number",
        help_text="helptext for convolute_inventory_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Inventarnummern/Find_inventory_number.csv__Convolute_inventory_number",
    )
    find_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Find comment",
        help_text="helptext for find_comment",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Inventarnummern/Find_inventory_number.csv__Find_comment",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_fundinventarinventarnummern_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="helptext for excavation_object_id",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Inventarnummern/Find_inventory_number.csv__Excavation_object_ID",
    )
    find_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarinventarnummern_find_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find material",
        help_text="helptext for find_material",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Inventarnummern/Find_inventory_number.csv__Find_material",
    )
    find_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarinventarnummern_find_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find type",
        help_text="helptext for find_type",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Inventarnummern/Find_inventory_number.csv__Find_type",
    )
    stratum_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Stratum Comment",
        help_text="helptext for stratum_comment",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Inventarnummern/Find_inventory_number.csv__Stratum_comment",
    )
    stratum_id_relative = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarinventarnummern_stratum_id_relative_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Stratum ID relative",
        help_text="helptext for stratum_id_relative",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Inventarnummern/Find_inventory_number.csv__Stratum_ID_relative",
    )
    find_date = models.DateField(
        blank=True, null=True,
        verbose_name="Find date",
        help_text="helptext for find_date",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Inventarnummern/Find_inventory_number.csv__Find_date",
    )
    storage_find = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Storage of find",
        help_text="helptext for storage_find",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Inventarnummern/Find_inventory_number.csv__Storage_find",
    )
    stratum_id_absolute_prepub = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarinventarnummern_stratum_id_absolute_prepub_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Stratum ID absolute pre publication",
        help_text="helptext for stratum_id_absolute_prepub",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Inventarnummern/Find_inventory_number.csv__Stratum_ID_absolute_prepub",
    )
    phase_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarinventarnummern_phase_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Phase ID",
        help_text="helptext for phase_id",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Inventarnummern/Find_inventory_number.csv__Phase_ID",
    )
    relatedto = models.ManyToManyField(
        SkosConcept,
        related_name='rvn_fundinventarinventarnummern_relatedto_skosconcept',
        blank=True,
        verbose_name="File is related to other TD resources",
        help_text="helptext for relatedto",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Inventarnummern/Find_inventory_number.csv__RelatedTo",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarinventarnummern_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="helptext for access",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Inventarnummern/Find_inventory_number.csv__Access",
    )
    digitisation_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment from digitisation",
        help_text="helptext for digitisation_comment",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Inventarnummern/Find_inventory_number.csv__Digitisation_comment",
    )
    uncertainty_excavation_digitisation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarinventarnummern_uncertainty_excavation_digitisation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or digital",
        help_text="helptext for uncertainty_excavation_digitisation",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Inventarnummern/Find_inventory_number.csv__Uncertainty__excavation_digitisation",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'find_inventory_number',
        ]
        verbose_name = "Fundinventar Inventarnummern"

    def __str__(self):
        return "{}".format(self.find_inventory_number)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:fundinventarinventarnummern_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:fundinventarinventarnummern_create')

    def get_absolute_url(self):
        return reverse('archiv:fundinventarinventarnummern_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:fundinventarinventarnummern_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:fundinventarinventarnummern_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:fundinventarinventarnummern_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:fundinventarinventarnummern_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:fundinventarinventarnummern_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class FundinventarKonvolutnummern(models.Model):
    ### Inventory of convolute numbers ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    convolute_inventory_number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Convolute inventory number",
        help_text="helptext for convolute_inventory_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Konvolutnummern/Convolute_inventory_number.csv__Convolute_inventory_number",
    )
    convolute_subnumber = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Convolute subnumber",
        help_text="helptext for convolute_subnumber",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Konvolutnummern/Convolute_inventory_number.csv__Convolute_subnumber",
    )
    find_local_number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Find local number",
        help_text="helptext for find_local_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Konvolutnummern/Convolute_inventory_number.csv__Find_local_number",
    )
    corresponding_to_inventory_number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Corresponding to inventory number",
        help_text="helptext for corresponding_to_inventory_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Konvolutnummern/Convolute_inventory_number.csv__Corresponding_to_inventory_number",
    )
    find_material = models.ManyToManyField(
        SkosConcept,
        related_name='rvn_fundinventarkonvolutnummern_find_material_skosconcept',
        blank=True,
        verbose_name="Find material",
        help_text="helptext for find_material",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Konvolutnummern/Convolute_inventory_number.csv__Find_material",
    )
    find_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Find comment",
        help_text="helptext for find_comment",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Konvolutnummern/Convolute_inventory_number.csv__Find_comment",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_fundinventarkonvolutnummern_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="helptext for excavation_object_id",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Konvolutnummern/Convolute_inventory_number.csv__Excavation_object_ID",
    )
    archaeological_object_id = models.ManyToManyField(
        "ArchaeologicalObjectID",
        related_name='rvn_fundinventarkonvolutnummern_archaeological_object_id_archaeologicalobjectid',
        blank=True,
        verbose_name="Archaeological object ID",
        help_text="helptext for archaeological_object_id",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Konvolutnummern/Convolute_inventory_number.csv__Archaeological_object_ID",
    )
    find_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarkonvolutnummern_find_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find type",
        help_text="helptext for find_type",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Konvolutnummern/Convolute_inventory_number.csv__Find_type",
    )
    stratum_id_relative = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarkonvolutnummern_stratum_id_relative_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Stratum ID relative",
        help_text="helptext for stratum_id_relative",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Konvolutnummern/Convolute_inventory_number.csv__Stratum_ID_relative",
    )
    stratum_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Stratum Comment",
        help_text="helptext for stratum_comment",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Konvolutnummern/Convolute_inventory_number.csv__Stratum_comment",
    )
    stratum_id_absolute_prepub = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarkonvolutnummern_stratum_id_absolute_prepub_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Stratum ID absolute pre publication",
        help_text="helptext for stratum_id_absolute_prepub",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Konvolutnummern/Convolute_inventory_number.csv__Stratum_ID_absolute_prepub",
    )
    find_date = models.DateField(
        blank=True, null=True,
        verbose_name="Find date",
        help_text="helptext for find_date",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Konvolutnummern/Convolute_inventory_number.csv__Find_date",
    )
    phase_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarkonvolutnummern_phase_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Phase ID",
        help_text="helptext for phase_id",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Konvolutnummern/Convolute_inventory_number.csv__Phase_ID",
    )
    storage_find = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarkonvolutnummern_storage_find_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Storage of find",
        help_text="helptext for storage_find",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Konvolutnummern/Convolute_inventory_number.csv__Storage_find",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarkonvolutnummern_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="helptext for access",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Konvolutnummern/Convolute_inventory_number.csv__Access",
    )
    relatedto = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="File is related to other TD resources",
        help_text="helptext for relatedto",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Konvolutnummern/Convolute_inventory_number.csv__RelatedTo",
    )
    uncertainty_excavation_digitisation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarkonvolutnummern_uncertainty_excavation_digitisation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or digital",
        help_text="helptext for uncertainty_excavation_digitisation",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Konvolutnummern/Convolute_inventory_number.csv__Uncertainty__excavation_digitisation",
    )
    digitisation_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment from digitisation",
        help_text="helptext for digitisation_comment",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Konvolutnummern/Convolute_inventory_number.csv__Digitisation_comment",
    )
    creator_metadata = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarkonvolutnummern_creator_metadata_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="helptext for creator_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Konvolutnummern/Convolute_inventory_number.csv__Creator_metadata",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'convolute_inventory_number',
        ]
        verbose_name = "Fundinventar Konvolutnummern"

    def __str__(self):
        return "{}".format(self.convolute_inventory_number)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:fundinventarkonvolutnummern_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:fundinventarkonvolutnummern_create')

    def get_absolute_url(self):
        return reverse('archiv:fundinventarkonvolutnummern_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:fundinventarkonvolutnummern_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:fundinventarkonvolutnummern_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:fundinventarkonvolutnummern_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:fundinventarkonvolutnummern_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:fundinventarkonvolutnummern_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class FundinventarMaterialproben(models.Model):
    ### Inventory of material samples ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_fundinventarmaterialproben_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="helptext for creator_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Materialproben/Material_sample_inventory_no.csv__Creator_metadata",
    )
    archaeological_object_id = models.ForeignKey(
        "ExcavationObjectID",
        related_name='rvn_fundinventarmaterialproben_archaeological_object_id_excavationobjectid',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Arachaeological object ID",
        help_text="helptext for archaeological_object_id",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Materialproben/Material_sample_inventory_no.csv__Archaeological_object_ID",
    )
    relatedto = models.ForeignKey(
        "Fundinventar4DPuzzleID",
        related_name='rvn_fundinventarmaterialproben_relatedto_fundinventar4dpuzzleid',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File is related to other TD resources",
        help_text="helptext for relatedto",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Materialproben/Material_sample_inventory_no.csv__RelatedTo",
    )
    material_sample_inventory_number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Material sample inventory number",
        help_text="helptext for material_sample_inventory_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Materialproben/Material_sample_inventory_no.csv__Material_sample_inventory_number",
    )
    find_local_number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Find local number",
        help_text="helptext for find_local_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Materialproben/Material_sample_inventory_no.csv__Find_local_number",
    )
    convolute_inventory_number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Convolute inventory number",
        help_text="helptext for convolute_inventory_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Materialproben/Material_sample_inventory_no.csv__Convolute_inventory_number",
    )
    corresponding_to_inventory_number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Corresponding to inventory number",
        help_text="helptext for corresponding_to_inventory_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Materialproben/Material_sample_inventory_no.csv__Corresponding_to_inventory_number",
    )
    find_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarmaterialproben_find_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find material",
        help_text="helptext for find_material",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Materialproben/Material_sample_inventory_no.csv__Find_material",
    )
    find_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Find comment",
        help_text="helptext for find_comment",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Materialproben/Material_sample_inventory_no.csv__Find_comment",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_fundinventarmaterialproben_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="helptext for excavation_object_id",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Materialproben/Material_sample_inventory_no.csv__Excavation_object_ID",
    )
    find_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarmaterialproben_find_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find type",
        help_text="helptext for find_type",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Materialproben/Material_sample_inventory_no.csv__Find_type",
    )
    stratum_id_relative = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarmaterialproben_stratum_id_relative_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Stratum ID relative",
        help_text="helptext for stratum_id_relative",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Materialproben/Material_sample_inventory_no.csv__Stratum_ID_relative",
    )
    stratum_id_absolute_prepub = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarmaterialproben_stratum_id_absolute_prepub_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Stratum ID absolute pre publication",
        help_text="helptext for stratum_id_absolute_prepub",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Materialproben/Material_sample_inventory_no.csv__Stratum_ID_absolute_prepub",
    )
    stratum_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Stratum Comment",
        help_text="helptext for stratum_comment",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Materialproben/Material_sample_inventory_no.csv__Stratum_comment",
    )
    phase_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarmaterialproben_phase_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Phase ID",
        help_text="helptext for phase_id",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Materialproben/Material_sample_inventory_no.csv__Phase_ID",
    )
    find_year = models.DateField(
        blank=True, null=True,
        verbose_name="Find year",
        help_text="helptext for find_year",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Materialproben/Material_sample_inventory_no.csv__Find_year",
    )
    storage_find = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarmaterialproben_storage_find_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Storage find",
        help_text="helptext for storage_find",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Materialproben/Material_sample_inventory_no.csv__Storage_find",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarmaterialproben_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="helptext for access",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Materialproben/Material_sample_inventory_no.csv__Access",
    )
    uncertainty_excavation_digitisation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarmaterialproben_uncertainty_excavation_digitisation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or digital",
        help_text="helptext for uncertainty_excavation_digitisation",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Materialproben/Material_sample_inventory_no.csv__Uncertainty__excavation_digitisation",
    )
    digitisation_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment from digitisation",
        help_text="helptext for digitisation_comment",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Materialproben/Material_sample_inventory_no.csv__Digitisation_comment",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'material_sample_inventory_number',
        ]
        verbose_name = "Fundinventar Materialproben"

    def __str__(self):
        return "{}".format(self.material_sample_inventory_number)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:fundinventarmaterialproben_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:fundinventarmaterialproben_create')

    def get_absolute_url(self):
        return reverse('archiv:fundinventarmaterialproben_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:fundinventarmaterialproben_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:fundinventarmaterialproben_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:fundinventarmaterialproben_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:fundinventarmaterialproben_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:fundinventarmaterialproben_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class FundinventarSteininventar(models.Model):
    ### Inventory of stones ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_fundinventarsteininventar_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="helptext for creator_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Steininventar/Bone_Stone_inventory_number.csv__Creator_metadata",
    )
    archaeological_object_id = models.ForeignKey(
        "ExcavationObjectID",
        related_name='rvn_fundinventarsteininventar_archaeological_object_id_excavationobjectid',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Arachaeological object ID",
        help_text="helptext for archaeological_object_id",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Steininventar/Bone_Stone_inventory_number.csv__Archaeological_object_ID",
    )
    find_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarsteininventar_find_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find material",
        help_text="helptext for find_material",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Steininventar/Bone_Stone_inventory_number.csv__Find_material",
    )
    find_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarsteininventar_find_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find type",
        help_text="helptext for find_type",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Steininventar/Bone_Stone_inventory_number.csv__Find_type",
    )
    find_inventory_number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Find inventory number",
        help_text="helptext for find_inventory_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Steininventar/Bone_Stone_inventory_number.csv__Find_inventory_number",
    )
    find_local_number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Find local number",
        help_text="helptext for find_local_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Steininventar/Bone_Stone_inventory_number.csv__Find_local_number",
    )
    convolute_inventory_number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Convolute inventory number",
        help_text="helptext for convolute_inventory_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Steininventar/Bone_Stone_inventory_number.csv__Convolute_inventory_number",
    )
    corresponding_to_inventory_number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Corresponding to inventory number",
        help_text="helptext for corresponding_to_inventory_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Steininventar/Bone_Stone_inventory_number.csv__Corresponding_to_inventory_number",
    )
    stratum_id_relative = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarsteininventar_stratum_id_relative_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Stratum ID relative",
        help_text="helptext for stratum_id_relative",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Steininventar/Bone_Stone_inventory_number.csv__Stratum_ID_relative",
    )
    stratum_id_absolute_prepub = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarsteininventar_stratum_id_absolute_prepub_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Stratum ID absolute pre publication",
        help_text="helptext for stratum_id_absolute_prepub",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Steininventar/Bone_Stone_inventory_number.csv__Stratum_ID_absolute_prepub",
    )
    find_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Find comment",
        help_text="helptext for find_comment",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Steininventar/Bone_Stone_inventory_number.csv__Find_comment",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_fundinventarsteininventar_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="helptext for excavation_object_id",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Steininventar/Bone_Stone_inventory_number.csv__Excavation_object_ID",
    )
    phase_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarsteininventar_phase_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Phase ID",
        help_text="helptext for phase_id",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Steininventar/Bone_Stone_inventory_number.csv__Phase_ID",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarsteininventar_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="helptext for access",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Steininventar/Bone_Stone_inventory_number.csv__Access",
    )
    storage_find = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarsteininventar_storage_find_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Storage of find",
        help_text="helptext for storage_find",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Steininventar/Bone_Stone_inventory_number.csv__Storage_find",
    )
    stratum_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Stratum Comment",
        help_text="helptext for stratum_comment",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Steininventar/Bone_Stone_inventory_number.csv__Stratum_comment",
    )
    uncertainty_excavation_digitisation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarsteininventar_uncertainty_excavation_digitisation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or digital",
        help_text="helptext for uncertainty_excavation_digitisation",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Steininventar/Bone_Stone_inventory_number.csv__Uncertainty__excavation_digitisation",
    )
    find_date = models.DateField(
        blank=True, null=True,
        verbose_name="Find date",
        help_text="helptext for find_date",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Steininventar/Bone_Stone_inventory_number.csv__Find_date",
    )
    relatedto = models.ManyToManyField(
        SkosConcept,
        related_name='rvn_fundinventarsteininventar_relatedto_skosconcept',
        blank=True,
        verbose_name="File is related to other TD resources",
        help_text="helptext for relatedto",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Steininventar/Bone_Stone_inventory_number.csv__RelatedTo",
    )
    digitisation_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment from digitisation",
        help_text="helptext for digitisation_comment",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Fundinventar_Steininventar/Bone_Stone_inventory_number.csv__Digitisation_comment",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'find_inventory_number',
        ]
        verbose_name = "FundinventarSteininventar"

    def __str__(self):
        return "{}".format(self.find_inventory_number)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:fundinventarsteininventar_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:fundinventarsteininventar_create')

    def get_absolute_url(self):
        return reverse('archiv:fundinventarsteininventar_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:fundinventarsteininventar_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:fundinventarsteininventar_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:fundinventarsteininventar_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:fundinventarsteininventar_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:fundinventarsteininventar_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class GIS(models.Model):
    ### Geographical information system ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_gis_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="helptext for creator_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_GIS/GIS_metadata.csv__Creator_metadata",
        arche_prop="hasMetadataCreator",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_gis_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original document",
        help_text="helptext for creator_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_GIS/GIS_metadata.csv__Creator_original",
    )
    creator_archivalobject = models.ForeignKey(
        "Actor",
        related_name='rvn_gis_creator_archivalobject_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="creator of archival object",
        help_text="Person who processed resource for digital long-term archiving.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_GIS/GIS_metadata.csv__creator_archivalObject",
        arche_prop="hasContributor",
    )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_gis_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="helptext for document_type",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_GIS/GIS_metadata.csv__Document_type",
    )
    filename = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Filename ",
        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_GIS/GIS_metadata.csv__Filename",
        arche_prop="hasTitle",
    )
    document_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document ID ",
        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. DR for Digital Resource) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_GIS/GIS_metadata.csv__Document_ID",
        arche_prop="hasNonLinkedIdentifier",
    )
    document_title = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document title",
        help_text="A description of the content of the document.  It allows information about the contents of the file to be understood by a human being without opening it. ",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_GIS/GIS_metadata.csv__Document_title",
    )
    path_filename_old = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Data path in old TD archive",
        help_text="helptext for path_filename_old",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_GIS/GIS_metadata.csv__Path_filename_old",
    )
    path_filename_arche = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Data path in ARCHE",
        help_text="helptext for path_filename_arche",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_GIS/GIS_metadata.csv__Path_filename_ARCHE",
        arche_prop="hasLocationPath",
    )
    creation_date_original = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of original document",
        help_text="helptext for creation_date_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_GIS/GIS_metadata.csv__Creation_date_original",
    )
    software_used = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Software used",
        help_text="helptext for software_used",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_GIS/GIS_metadata.csv__Software_used",
        arche_prop="hasTechnicalInfo",
    )
    creation_date_archivalobject = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of archival object",
        help_text="helptext for creation_date_archivalobject",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_GIS/GIS_metadata.csv__Creation_date_archivalObject",
        arche_prop="hasCreatedDate",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of metadata",
        help_text="helptext for creation_date_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_GIS/GIS_metadata.csv__Creation_date_metadata",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_gis_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_GIS/GIS_metadata.csv__Excavation_object_ID",
    )
    archaeological_object_id = models.ManyToManyField(
        "ArchaeologicalObjectID",
        related_name='rvn_gis_archaeological_object_id_archaeologicalobjectid',
        blank=True,
        verbose_name="Archaeological object ID",
        help_text="The unique identifier of an archaeological object. Archaeological objects are all objects that were created in the past, e.g. in the Bronze Age. An archaeological object ID contains the abbreviation of site_area_square trench_name of archaeological object (e.g.: TD_F-I_o19_Grab1 means Tell el-Daba, area F-I, square o19, grave 1).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_GIS/GIS_metadata.csv__Archaeological_object_ID",
    )
    relatedto = models.ManyToManyField(
        "DocumentTypes",
        related_name='rvn_gis_relatedto_documenttypes',
        blank=True,
        verbose_name="File is related to other TD resources",
        help_text="helptext for relatedto",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_GIS/GIS_metadata.csv__RelatedTo",
    )
    original_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment on the original document",
        help_text="Comments from the creation of the original resource.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_GIS/GIS_metadata.csv__Original_comment",
    )
    digitisation_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment from digitisation",
        help_text="Comments from digitisation.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_GIS/GIS_metadata.csv__Digitisation_comment",
        arche_prop="hasNote",
    )
    file_extension_original = models.ForeignKey(
        SkosConcept,
        related_name='rvn_gis_file_extension_original_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of original document",
        help_text="helptext for file_extension_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_GIS/GIS_metadata.csv__File_extension_original",
    )
    file_extension_archivalobject = models.ForeignKey(
        SkosConcept,
        related_name='rvn_gis_file_extension_archivalobject_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of archival object",
        help_text="helptext for file_extension_archivalobject",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_GIS/GIS_metadata.csv__File_extension_archivalObject",
        arche_prop="hasTechnicalInfo",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_gis_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="helptext for copyright",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_GIS/GIS_metadata.csv__Copyright",
        arche_prop="hasOwner",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_gis_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="Whether access to the resource is restricted or if it is open to the public.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_GIS/GIS_metadata.csv__Access",
        arche_prop="hasAccessRestriction",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_gis_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="Abbreviation of Tell el-Daba is 'TD'.",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_GIS/GIS_metadata.csv__Site_ID",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_gis_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)",
        help_text="helptext for excavation_post_excavation",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_GIS/GIS_metadata.csv__Excavation__post_excavation",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'filename',
        ]
        verbose_name = "GIS"

    def __str__(self):
        return "{}".format(self.filename)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:gis_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:gis_create')

    def get_absolute_url(self):
        return reverse('archiv:gis_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:gis_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:gis_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:gis_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:gis_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:gis_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Geophysics(models.Model):
    ### Files from geophysical surveys ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_geophysics_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="helptext for creator_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Geomagnetik/Geophysik_Metadata.csv__Creator_metadata",
        arche_prop="hasMetadataCreator",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_geophysics_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original document",
        help_text="helptext for creator_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Geomagnetik/Geophysik_Metadata.csv__Creator_original",
    )
    creator_archivalobject = models.ForeignKey(
        "Actor",
        related_name='rvn_geophysics_creator_archivalobject_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of archival object",
        help_text="Person who processed resource for digital long-term archiving.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Geomagnetik/Geophysik_Metadata.csv__Creator_archivalObject",
        arche_prop="hasContributor",
    )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_geophysics_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="helptext for document_type",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Geomagnetik/Geophysik_Metadata.csv__Document_type",
    )
    filename = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Filename ",
        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Geomagnetik/Geophysik_Metadata.csv__Filename",
        arche_prop="hasTitle",
    )
    document_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document ID ",
        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. DR for Digital Resource) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Geomagnetik/Geophysik_Metadata.csv__Document_ID",
        arche_prop="hasNonLinkedIdentifier",
    )
    document_title = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document title",
        help_text="A description of the content of the document.  It allows information about the contents of the file to be understood by a human being without opening it. ",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Geomagnetik/Geophysik_Metadata.csv__Document_title",
    )
    filename_old = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Filename old",
        help_text="helptext for filename_old",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Geomagnetik/Geophysik_Metadata.csv__Filename_old",
    )
    creation_date_original = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of original document",
        help_text="helptext for creation_date_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Geomagnetik/Geophysik_Metadata.csv__Creation_date_original",
    )
    creation_date_archivalobject = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of archival object",
        help_text="helptext for creation_date_archivalobject",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Geomagnetik/Geophysik_Metadata.csv__Creation_date_archivalObject",
        arche_prop="hasCreatedDate",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of metadata",
        help_text="helptext for creation_date_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Geomagnetik/Geophysik_Metadata.csv__Creation_date_metadata",
    )
    path_filename_old = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Data path in old TD archive",
        help_text="helptext for path_filename_old",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Geomagnetik/Geophysik_Metadata.csv__Path_filename_old",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_geophysics_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Geomagnetik/Geophysik_Metadata.csv__Excavation_object_ID",
    )
    original_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment on the original document",
        help_text="Comments from the creation of the original resource.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Geomagnetik/Geophysik_Metadata.csv__Original_comment",
    )
    digitisation_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment from digitisation",
        help_text="Comments from digitisation.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Geomagnetik/Geophysik_Metadata.csv__Digitisation_comment",
        arche_prop="hasNote",
    )
    file_extension_original = models.ForeignKey(
        SkosConcept,
        related_name='rvn_geophysics_file_extension_original_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of original document",
        help_text="helptext for file_extension_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Geomagnetik/Geophysik_Metadata.csv__File_extension_original",
    )
    file_extension_archivalobject = models.ForeignKey(
        SkosConcept,
        related_name='rvn_geophysics_file_extension_archivalobject_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of archival object",
        help_text="helptext for file_extension_archivalobject",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Geomagnetik/Geophysik_Metadata.csv__File_extension_archivalObject",
        arche_prop="hasTechnicalInfo",
    )
    method = models.ForeignKey(
        SkosConcept,
        related_name='rvn_geophysics_method_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Method",
        help_text="helptext for method",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Geomagnetik/Geophysik_Metadata.csv__Method",
    )
    equipment = models.ForeignKey(
        SkosConcept,
        related_name='rvn_geophysics_equipment_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Equipment",
        help_text="helptext for equipment",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Geomagnetik/Geophysik_Metadata.csv__Equipment",
        arche_prop="HasUsedHardware",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_geophysics_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="helptext for copyright",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Geomagnetik/Geophysik_Metadata.csv__Copyright",
        arche_prop="hasOwner",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_geophysics_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="Whether access to the resource is restricted or if it is open to the public.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Geomagnetik/Geophysik_Metadata.csv__Access",
        arche_prop="hasAccessRestriction",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_geophysics_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="Abbreviation of Tell el-Daba is 'TD'.",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Geomagnetik/Geophysik_Metadata.csv__Site_ID",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_geophysics_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)",
        help_text="helptext for excavation_post_excavation",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Geomagnetik/Geophysik_Metadata.csv__Excavation__post_excavation",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'filename',
        ]
        verbose_name = "Geophysics"

    def __str__(self):
        return "{}".format(self.filename)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:geophysics_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:geophysics_create')

    def get_absolute_url(self):
        return reverse('archiv:geophysics_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:geophysics_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:geophysics_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:geophysics_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:geophysics_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:geophysics_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Inventorybooks(models.Model):
    ### Digitised inventory books ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_inventorybooks_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="helptext for creator_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__Creator_metadata",
        arche_prop="hasMetadataCreator",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_inventorybooks_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original document",
        help_text="helptext for creator_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__Creator_original",
    )
    creator_scan = models.ForeignKey(
        "Actor",
        related_name='rvn_inventorybooks_creator_scan_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of scan",
        help_text="helptext for creator_scan",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__Creator_scan",
        arche_prop="hasContributor",
    )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_inventorybooks_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="helptext for document_type",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__Document_type",
    )
    convolute_inventory_number = models.ForeignKey(
        "FundinventarKonvolutnummern",
        related_name='rvn_inventorybooks_convolute_inventory_number_fundinventarkonvolutnummern',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Convolute inventory number",
        help_text="helptext for convolute_inventory_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__Convolute_inventory_number",
        arche_prop="hasNonLinkedIdentifier",
    )
    bone_stone_inventory_number = models.ForeignKey(
        "FundinventarSteininventar",
        related_name='rvn_inventorybooks_bone_stone_inventory_number_fundinventarsteininventar',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Bone or stone inventory number",
        help_text="helptext for bone_stone_inventory_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__Bone_stone_inventory_number",
        arche_prop="hasNonLinkedIdentifier",
    )
    filename = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Filename ",
        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__Filename",
        arche_prop="hasTitle",
    )
    document_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document ID ",
        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. DR for Digital Resource) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__Document_ID",
        arche_prop="hasNonLinkedIdentifier",
    )
    document_title = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document title",
        help_text="A description of the content of the document.  It allows information about the contents of the file to be understood by a human being without opening it. ",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__Document_title",
    )
    filename_old = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Filename old",
        help_text="helptext for filename_old",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__Filename_old",
    )
    creation_date_original = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of original document",
        help_text="helptext for creation_date_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__Creation_date_original",
    )
    creation_year_original = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Creation year of original document",
        help_text="helptext for creation_year_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__Creation_year_original",
    )
    creation_date_scan = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of scan",
        help_text="helptext for creation_date_scan",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__Creation_date_scan",
        arche_prop="hasCreatedDate",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of metadata",
        help_text="helptext for creation_date_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__Creation_date_metadata",
    )
    storage_folder_original = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Storage folder of original document",
        help_text="helptext for storage_folder_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__Storage_folder_original",
    )
    resolution_scan_dpi = models.IntegerField(
        blank=True, null=True,
        verbose_name="Scan resolution",
        help_text="helptext for resolution_scan_dpi",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__Resolution_scan_dpi",
        arche_prop="hasTechnicalInfo",
    )
    find_inventory_number = models.ManyToManyField(
        "FundinventarInventarnummern",
        related_name='rvn_inventorybooks_find_inventory_number_fundinventarinventarnummern',
        blank=True,
        verbose_name="Find inventory number",
        help_text="helptext for find_inventory_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__Find_inventory_number",
        arche_prop="hasNonLinkedIdentifier",
    )
    original_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment on the original document",
        help_text="Comments from the creation of the original resource.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__Original_comment",
        arche_prop="hasNote",
    )
    file_extension = models.ForeignKey(
        SkosConcept,
        related_name='rvn_inventorybooks_file_extension_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension",
        help_text="helptext for file_extension",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__File_extension",
        arche_prop="hasTechnicalInfo",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_inventorybooks_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="helptext for copyright",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__Copyright",
        arche_prop="hasOwner",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_inventorybooks_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="Whether access to the resource is restricted or if it is open to the public.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__Access",
        arche_prop="hasAccessRestriction",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_inventorybooks_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="Abbreviation of Tell el-Daba is 'TD'.",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__Site_ID",
    )
    equipment_scan = models.ForeignKey(
        SkosConcept,
        related_name='rvn_inventorybooks_equipment_scan_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Equipment used for scanning",
        help_text="helptext for equipment_scan",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__Equipment_scan",
        arche_prop="HasUsedHardware",
    )
    source_original_copy_edited_copy = models.ForeignKey(
        SkosConcept,
        related_name='rvn_inventorybooks_source_original_copy_edited_copy_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Wheter source is a original or a copy",
        help_text="helptext for source_original_copy_edited_copy",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__Source__original_copy_edited-copy",
    )
    original_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_inventorybooks_original_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Material of original document",
        help_text="helptext for original_material",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__Original_material",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_inventorybooks_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)",
        help_text="helptext for excavation_post_excavation",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Inventarbuecher/Find_inventory.csv__Excavation__post_excavation",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'filename',
        ]
        verbose_name = "Inventory books"

    def __str__(self):
        return "{}".format(self.filename)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:inventorybooks_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:inventorybooks_create')

    def get_absolute_url(self):
        return reverse('archiv:inventorybooks_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:inventorybooks_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:inventorybooks_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:inventorybooks_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:inventorybooks_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:inventorybooks_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class PhasenID(models.Model):
    ### Identifier of archaeological phases ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    phase_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_phasenid_phase_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Phase type",
        help_text="helptext for phase_type",
    ).set_extra(
        is_public=False,
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_phasenid_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="helptext for site_id",
    ).set_extra(
        is_public=False,
    )
    phase_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Phase ID",
        help_text="helptext for phase_id",
    ).set_extra(
        is_public=False,
    )
    phase_title = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Phase title",
        help_text="helptext for phase_title",
    ).set_extra(
        is_public=False,
    )
    area = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_phasenid_area_excavationobjectid',
        blank=True,
        verbose_name="Area",
        help_text="helptext for area",
    ).set_extra(
        is_public=False,
    )
    containing_phase_id = models.ManyToManyField(
        SkosConcept,
        related_name='rvn_phasenid_containing_phase_id_skosconcept',
        blank=True,
        verbose_name="Containing phase ID",
        help_text="helptext for containing_phase_id",
    ).set_extra(
        is_public=False,
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'phase_id',
        ]
        verbose_name = "Phasen ID"

    def __str__(self):
        return "{}".format(self.phase_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:phasenid_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:phasenid_create')

    def get_absolute_url(self):
        return reverse('archiv:phasenid_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:phasenid_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:phasenid_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:phasenid_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:phasenid_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:phasenid_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Protocols(models.Model):
    ### Digitised protocols ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_protocols_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="helptext for creator_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Creator_metadata",
        arche_prop="hasMetadataCreator",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_protocols_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original document",
        help_text="helptext for creator_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Creator_original",
    )
    creator_scan = models.ForeignKey(
        "Actor",
        related_name='rvn_protocols_creator_scan_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of scan",
        help_text="helptext for creator_scan",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Creator_scan",
        arche_prop="hasContributor",
    )
    excavation_object_id = models.ForeignKey(
        "ExcavationObjectID",
        related_name='rvn_protocols_excavation_object_id_excavationobjectid',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Excavation object ID",
        help_text="The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Excavation_object_ID",
    )
    filename = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Filename ",
        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Filename",
        arche_prop="hasTitle",
    )
    document_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document ID ",
        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. P for Protocol) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Document_ID",
        arche_prop="hasNonLinkedIdentifier",
    )
    document_title = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document title",
        help_text="A description of the content of the document.  It allows information about the contents of the file to be understood by a human being without opening it. ",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Document_title",
    )
    filename_old = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Filename old",
        help_text="helptext for filename_old",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Filename_old",
    )
    document_type = models.ManyToManyField(
        "DocumentTypes",
        related_name='rvn_protocols_document_type_documenttypes',
        blank=True,
        verbose_name="Document type",
        help_text="helptext for document_type",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Document_type",
    )
    creation_date_original = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of original document",
        help_text="helptext for creation_date_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Creation_date_original",
    )
    creation_year_original = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Creation year of original document",
        help_text="helptext for creation_year_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Creation_year_original",
    )
    creation_date_scan = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of scan",
        help_text="helptext for creation_date_scan",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Creation_date_scan",
        arche_prop="hasCreatedDate",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of metadata",
        help_text="helptext for creation_date_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Creation_date_metadata",
    )
    storage_folder_original = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Storage folder of original document",
        help_text="helptext for storage_folder_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Storage_folder_original",
    )
    resolution_scan_dpi = models.IntegerField(
        blank=True, null=True,
        verbose_name="Scan resolution",
        help_text="helptext for resolution_scan_dpi",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Resolution_scan_dpi",
        arche_prop="hasTechnicalInfo",
    )
    archaeological_object_id = models.ManyToManyField(
        "ArchaeologicalObjectID",
        related_name='rvn_protocols_archaeological_object_id_archaeologicalobjectid',
        blank=True,
        verbose_name="Archaeological object ID",
        help_text="The unique identifier of an archaeological object. Archaeological objects are all objects that were created in the past, e.g. in the Bronze Age. An archaeological object ID contains the abbreviation of site_area_square trench_name of archaeological object (e.g.: TD_F-I_o19_Grab1 means Tell el-Daba, area F-I, square o19, grave 1).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Archaeological_object_ID",
    )
    number_of_pages = models.IntegerField(
        blank=True, null=True,
        verbose_name="Number of pages",
        help_text="helptext for number_of_pages",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Number_of_pages",
    )
    original_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment on the original document",
        help_text="Comments from the creation of the original resource.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Original_comment",
    )
    digitisation_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment from digitisation",
        help_text="Comments from digitisation.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Digitisation_comment",
        arche_prop="hasNote",
    )
    file_extension = models.ForeignKey(
        SkosConcept,
        related_name='rvn_protocols_file_extension_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension",
        help_text="helptext for file_extension",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__File_extension",
        arche_prop="hasTechnicalInfo",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_protocols_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="helptext for copyright",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Copyright",
        arche_prop="hasOwner",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_protocols_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="Whether access to the resource is restricted or if it is open to the public.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Access",
        arche_prop="hasAccessRestriction",
    )
    storage = models.ForeignKey(
        SkosConcept,
        related_name='rvn_protocols_storage_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Storage folder of original document",
        help_text="helptext for storage",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Storage",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_protocols_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="Abbreviation of Tell el-Daba is 'TD'.",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Site_ID",
    )
    equipment_scan = models.ForeignKey(
        SkosConcept,
        related_name='rvn_protocols_equipment_scan_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Equipment used for scanning",
        help_text="helptext for equipment_scan",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Equipment_scan",
        arche_prop="HasUsedHardware",
    )
    source_original_copy_edited_copy = models.ForeignKey(
        SkosConcept,
        related_name='rvn_protocols_source_original_copy_edited_copy_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Wheter source is a original or a copy",
        help_text="helptext for source_original_copy_edited_copy",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Source__original_copy_edited-copy",
    )
    original_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_protocols_original_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Material of original document",
        help_text="helptext for original_material",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Original_material",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_protocols_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)",
        help_text="helptext for excavation_post_excavation",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Protokolle/Protocol.csv__Excavation__post_excavation",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'filename',
        ]
        verbose_name = "Protocols"

    def __str__(self):
        return "{}".format(self.filename)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:protocols_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:protocols_create')

    def get_absolute_url(self):
        return reverse('archiv:protocols_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:protocols_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:protocols_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:protocols_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:protocols_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:protocols_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class StratenID(models.Model):
    ### Identifier of archaeological strata ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    stratum_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_stratenid_stratum_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Stratum type",
        help_text="helptext for stratum_type",
    ).set_extra(
        is_public=False,
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_stratenid_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="helptext for site_id",
    ).set_extra(
        is_public=False,
    )
    stratum_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Stratum ID",
        help_text="helptext for stratum_id",
    ).set_extra(
        is_public=False,
    )
    stratum_title = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Stratum title",
        help_text="helptext for stratum_title",
    ).set_extra(
        is_public=False,
    )
    area = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_stratenid_area_excavationobjectid',
        blank=True,
        verbose_name="Area",
        help_text="helptext for area",
    ).set_extra(
        is_public=False,
    )
    containing_stratum_id = models.ManyToManyField(
        SkosConcept,
        related_name='rvn_stratenid_containing_stratum_id_skosconcept',
        blank=True,
        verbose_name="Containing stratum ID",
        help_text="helptext for containing_stratum_id",
    ).set_extra(
        is_public=False,
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'stratum_id',
        ]
        verbose_name = "Straten ID"

    def __str__(self):
        return "{}".format(self.stratum_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:stratenid_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:stratenid_create')

    def get_absolute_url(self):
        return reverse('archiv:stratenid_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:stratenid_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:stratenid_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:stratenid_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:stratenid_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:stratenid_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Tables(models.Model):
    ### Tables ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_tables_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="helptext for creator_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Tabellen/Tabelle_metadata.csv__Creator_metadata",
        arche_prop="hasMetadataCreator",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_tables_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original document",
        help_text="helptext for creator_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Tabellen/Tabelle_metadata.csv__Creator_original",
    )
    creator_archivalobject = models.ForeignKey(
        "Actor",
        related_name='rvn_tables_creator_archivalobject_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="creator of archival object",
        help_text="Person who processed resource for digital long-term archiving.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Tabellen/Tabelle_metadata.csv__creator_archivalObject",
        arche_prop="hasContributor",
    )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_tables_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="helptext for document_type",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Tabellen/Tabelle_metadata.csv__Document_type",
    )
    filename = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Filename ",
        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Tabellen/Tabelle_metadata.csv__Filename",
        arche_prop="hasTitle",
    )
    document_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document ID ",
        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. P for Protocol) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Tabellen/Tabelle_metadata.csv__Document_ID",
        arche_prop="hasNonLinkedIdentifier",
    )
    document_title = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document title",
        help_text="A description of the content of the document.  It allows information about the contents of the file to be understood by a human being without opening it. ",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Tabellen/Tabelle_metadata.csv__Document_title",
    )
    path_filename_old = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Data path in old TD archive",
        help_text="helptext for path_filename_old",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Tabellen/Tabelle_metadata.csv__Path_filename_old",
    )
    creation_year_original = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Creation year of original document",
        help_text="helptext for creation_year_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Tabellen/Tabelle_metadata.csv__Creation_year_original",
    )
    creation_date_archivalobject = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of archival object",
        help_text="helptext for creation_date_archivalobject",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Tabellen/Tabelle_metadata.csv__Creation_date_archivalObject",
        arche_prop="hasCreatedDate",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of metadata",
        help_text="helptext for creation_date_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Tabellen/Tabelle_metadata.csv__Creation_date_metadata",
    )
    folder_original = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Folder original",
        help_text="helptext for folder_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Tabellen/Tabelle_metadata.csv__folder_original",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_tables_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Tabellen/Tabelle_metadata.csv__Excavation_object_ID",
    )
    archaeological_object_id = models.ManyToManyField(
        "ArchaeologicalObjectID",
        related_name='rvn_tables_archaeological_object_id_archaeologicalobjectid',
        blank=True,
        verbose_name="Archaeological object ID",
        help_text="The unique identifier of an archaeological object. Archaeological objects are all objects that were created in the past, e.g. in the Bronze Age. An archaeological object ID contains the abbreviation of site_area_square trench_name of archaeological object (e.g.: TD_F-I_o19_Grab1 means Tell el-Daba, area F-I, square o19, grave 1).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Tabellen/Tabelle_metadata.csv__Archaeological_object_ID",
    )
    relatedto = models.ManyToManyField(
        "DocumentTypes",
        related_name='rvn_tables_relatedto_documenttypes',
        blank=True,
        verbose_name="File is related to other TD resources",
        help_text="helptext for relatedto",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Tabellen/Tabelle_metadata.csv__RelatedTo",
    )
    original_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment on the original document",
        help_text="Comments from the creation of the original resource.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Tabellen/Tabelle_metadata.csv__Original_comment",
    )
    digitisation_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment from digitisation",
        help_text="Comments from digitisation.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Tabellen/Tabelle_metadata.csv__Digitisation_comment",
        arche_prop="hasNote",
    )
    file_extension_original = models.ForeignKey(
        SkosConcept,
        related_name='rvn_tables_file_extension_original_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of original document",
        help_text="helptext for file_extension_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Tabellen/Tabelle_metadata.csv__File_extension_original",
    )
    file_extension_archivalobject = models.ForeignKey(
        SkosConcept,
        related_name='rvn_tables_file_extension_archivalobject_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of archival object",
        help_text="helptext for file_extension_archivalobject",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Tabellen/Tabelle_metadata.csv__File_extension_archivalObject",
        arche_prop="hasTechnicalInfo",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_tables_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="helptext for copyright",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Tabellen/Tabelle_metadata.csv__Copyright",
        arche_prop="hasOwner",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_tables_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="Whether access to the resource is restricted or if it is open to the public.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Tabellen/Tabelle_metadata.csv__Access",
        arche_prop="hasAccessRestriction",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_tables_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="Abbreviation of Tell el-Daba is 'TD'.",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Tabellen/Tabelle_metadata.csv__Site_ID",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_tables_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)",
        help_text="helptext for excavation_post_excavation",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Tabellen/Tabelle_metadata.csv__Excavation__post_excavation",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'filename',
        ]
        verbose_name = "Tables"

    def __str__(self):
        return "{}".format(self.filename)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:tables_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:tables_create')

    def get_absolute_url(self):
        return reverse('archiv:tables_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:tables_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:tables_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:tables_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:tables_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:tables_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class ThreeDimensionalModel(models.Model):
    ### 3D models ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    filename = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Filename",
        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_3D/3D_metadata.csv__Filename",
        arche_prop="hasTitle",
    )
    document_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document ID",
        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. DR for Digital Resource) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_3D/3D_metadata.csv__Document_ID",
        arche_prop="hasNonLinkedIdentifier",
    )
    document_title = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document title",
        help_text="A description of the content of the document.  It allows information about the contents of the file to be understood by a human being without opening it. ",
    ).set_extra(
        is_public=True,
        data_lookup="Thefilenameofconvolutecardsconsistsofthedocument_ID(uniqueidentifier).ThedocumentIDisaproject-specificuniqueidentifierwhichconsistsoftheabbreviationforthesite(TDforTellel-Daba),theabbreviationforthedocumenttype(e.g.KKforKonvolutkarte)andtheconvoluteinventorynumber(or,iftherewasnoinventorynumber,anIDwiththeprefix4DPuzzlewascreated,e.g.4DPuzzle1234).",
    )
    path_filename_old = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Data path in old TD archive",
        help_text="Data path in the old TD archive.",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_3D/3D_metadata.csv__Path_filename_old",
    )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_threedimensionalmodel_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="helptext for creator_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_3D/3D_metadata.csv__Creator_metadata",
        arche_prop="hasMetadataCreator",
    )
    creation_year_original = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Creation year original",
        help_text="helptext for creation_year_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_3D/3D_metadata.csv__Creation_year_original",
    )
    software_used = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Software which was used to create original",
        help_text="helptext for software_used",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_3D/3D_metadata.csv__Software_used",
        arche_prop="hasTechnicalInfo",
    )
    creation_date_archivalobject = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of archival object",
        help_text="Date when the resource was prepared for long-term archiving.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_3D/3D_metadata.csv__Creation_date_archivalObject",
        arche_prop="hasCreatedDate",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_threedimensionalmodel_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original ",
        help_text="helptext for creator_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_3D/3D_metadata.csv__Creator_original",
        arche_prop="hasCreator",
    )
    creator_archivalobject = models.ForeignKey(
        "Actor",
        related_name='rvn_threedimensionalmodel_creator_archivalobject_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of archival object",
        help_text="helptext for creator_archivalobject",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_3D/3D_metadata.csv__creator_archivalObject",
        arche_prop="hasContributor",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date metadata",
        help_text="helptext for creation_date_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_3D/3D_metadata.csv__Creation_date_metadata",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_threedimensionalmodel_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_3D/3D_metadata.csv__Excavation_object_ID",
    )
    archaeological_object_id = models.ManyToManyField(
        "ArchaeologicalObjectID",
        related_name='rvn_threedimensionalmodel_archaeological_object_id_archaeologicalobjectid',
        blank=True,
        verbose_name="Archaeological object ID",
        help_text="The unique identifier of an archaeological object. Archaeological objects are all objects that were created in the past, e.g. in the Bronze Age. An archaeological object ID contains the abbreviation of site_area_square trench_name of archaeological object (e.g.: TD_F-I_o19_Grab1 means Tell el-Daba, area F-I, square o19, grave 1).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_3D/3D_metadata.csv__Archaeological_object_ID",
    )
    relatedto = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="File is related to other TD resources",
        help_text="helptext for relatedto",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_3D/3D_metadata.csv__RelatedTo",
    )
    original_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment on the original document",
        help_text="Comments from the creation of the original resource.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_3D/3D_metadata.csv__Original_comment",
    )
    digitisation_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment from digitisation",
        help_text="Comments from digitisation.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_3D/3D_metadata.csv__Digitisation_comment",
        arche_prop="hasNote",
    )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_threedimensionalmodel_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="helptext for document_type",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_3D/3D_metadata.csv__Document_type",
    )
    file_extension_original = models.ForeignKey(
        SkosConcept,
        related_name='rvn_threedimensionalmodel_file_extension_original_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of original 3D model",
        help_text="",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_3D/3D_metadata.csv__File_extension_original",
    )
    file_extension_archivalobject = models.ForeignKey(
        SkosConcept,
        related_name='rvn_threedimensionalmodel_file_extension_archivalobject_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of archival data",
        help_text="helptext for file_extension_archivalobject",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_3D/3D_metadata.csv__File_extension_archivalObject",
        arche_prop="hasTechnicalInfo",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_threedimensionalmodel_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="helptext for copyright",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_3D/3D_metadata.csv__Copyright",
        arche_prop="hasOwner",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_threedimensionalmodel_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="Whether access to the resource is restricted or if it is open to the public.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_3D/3D_metadata.csv__Access",
        arche_prop="hasAccessRestriction",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_threedimensionalmodel_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="Abbreviation of Tell el-Daba is 'TD'.",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_3D/3D_metadata.csv__Site_ID",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_threedimensionalmodel_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="The document ID is a project-specific unique identifier which consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. SWnegfilm for black &white negative film, FDfilm for colour slide film, FDdig for colour slide film digitised ) and the inventory numbers (from_to).",
        help_text="helptext for excavation_post_excavation",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_3D/3D_metadata.csv__Excavation__post_excavation",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'filename',
        ]
        verbose_name = "3D models"

    def __str__(self):
        return "{}".format(self.filename)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:threedimensionalmodel_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:threedimensionalmodel_create')

    def get_absolute_url(self):
        return reverse('archiv:threedimensionalmodel_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:threedimensionalmodel_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:threedimensionalmodel_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:threedimensionalmodel_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:threedimensionalmodel_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:threedimensionalmodel_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Videos(models.Model):
    ### Videos ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_videos_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="helptext for creator_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Video/Video_metadata.csv__Creator_metadata",
        arche_prop="hasMetadataCreator",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_videos_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original document",
        help_text="helptext for creator_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Video/Video_metadata.csv__Creator_original",
    )
    creator_archivalobject = models.ForeignKey(
        "Actor",
        related_name='rvn_videos_creator_archivalobject_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="creator of archival object",
        help_text="Person who processed resource for digital long-term archiving.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Video/Video_metadata.csv__creator_archivalObject",
        arche_prop="hasContributor",
    )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_videos_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="helptext for document_type",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Video/Video_metadata.csv__Document_type",
    )
    find_inventory_number = models.ForeignKey(
        "FundinventarInventarnummern",
        related_name='rvn_videos_find_inventory_number_fundinventarinventarnummern',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find inventory number",
        help_text="helptext for find_inventory_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Video/Video_metadata.csv__Find_inventory_number",
        arche_prop="hasNonLinkedIdentifier",
    )
    filename = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Filename ",
        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Video/Video_metadata.csv__Filename",
        arche_prop="hasTitle",
    )
    document_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document ID ",
        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. P for Protocol) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Video/Video_metadata.csv__Document_ID",
        arche_prop="hasNonLinkedIdentifier",
    )
    document_title = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document title",
        help_text="A description of the content of the document.  It allows information about the contents of the file to be understood by a human being without opening it. ",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Video/Video_metadata.csv__Document_title",
    )
    creation_date_original = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of original document",
        help_text="helptext for creation_date_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Video/Video_metadata.csv__Creation_date_original",
    )
    creation_date_archivalobject = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of archival object",
        help_text="helptext for creation_date_archivalobject",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Video/Video_metadata.csv__Creation_date_archivalObject",
        arche_prop="hasCreatedDate",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of metadata",
        help_text="helptext for creation_date_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Video/Video_metadata.csv__Creation_date_metadata",
    )
    path_filename_old = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Data path in old TD archive",
        help_text="helptext for path_filename_old",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Video/Video_metadata.csv__Path_filename_old",
    )
    path_filename_arche = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Data path in ARCHE",
        help_text="helptext for path_filename_arche",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Video/Video_metadata.csv__Path_filename_ARCHE",
        arche_prop="hasLocationPath",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_videos_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Video/Video_metadata.csv__Excavation_object_ID",
    )
    archaeological_object_id = models.ManyToManyField(
        "ArchaeologicalObjectID",
        related_name='rvn_videos_archaeological_object_id_archaeologicalobjectid',
        blank=True,
        verbose_name="Archaeological object ID",
        help_text="The unique identifier of an archaeological object. Archaeological objects are all objects that were created in the past, e.g. in the Bronze Age. An archaeological object ID contains the abbreviation of site_area_square trench_name of archaeological object (e.g.: TD_F-I_o19_Grab1 means Tell el-Daba, area F-I, square o19, grave 1).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Video/Video_metadata.csv__Archaeological_object_ID",
    )
    original_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment on the original document",
        help_text="Comments from the creation of the original resource.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Video/Video_metadata.csv__Original_comment",
    )
    digitisation_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment from digitisation",
        help_text="Comments from digitisation.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Video/Video_metadata.csv__Digitisation_comment",
        arche_prop="hasNote",
    )
    file_extension_original = models.ForeignKey(
        SkosConcept,
        related_name='rvn_videos_file_extension_original_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of original document",
        help_text="helptext for file_extension_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Video/Video_metadata.csv__File_extension_original",
    )
    file_extension_archivalobject = models.ForeignKey(
        SkosConcept,
        related_name='rvn_videos_file_extension_archivalobject_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of archival object",
        help_text="helptext for file_extension_archivalobject",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Video/Video_metadata.csv__File_extension_archivalObject",
        arche_prop="hasTechnicalInfo",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_videos_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="helptext for copyright",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Video/Video_metadata.csv__Copyright",
        arche_prop="hasOwner",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_videos_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="Whether access to the resource is restricted or if it is open to the public.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Video/Video_metadata.csv__Access",
        arche_prop="hasAccessRestriction",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_videos_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="Abbreviation of Tell el-Daba is 'TD'.",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Video/Video_metadata.csv__Site_ID",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'filename',
        ]
        verbose_name = "Videos"

    def __str__(self):
        return "{}".format(self.filename)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:videos_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:videos_create')

    def get_absolute_url(self):
        return reverse('archiv:videos_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:videos_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:videos_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:videos_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:videos_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:videos_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class WallpaintingInventory(models.Model):
    ### Digitised inventory of wallpaintings ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_wallpaintinginventory_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="helptext for creator_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Freskeninventar/Fresco_inventory.csv__Creator_Metadata",
        arche_prop="hasMetadataCreator",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_wallpaintinginventory_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original ",
        help_text="helptext for creator_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Freskeninventar/Fresco_inventory.csv__Creator_original",
    )
    creator_scan = models.ForeignKey(
        "Actor",
        related_name='rvn_wallpaintinginventory_creator_scan_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of scan",
        help_text="helptext for creator_scan",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Freskeninventar/Fresco_inventory.csv__Creator_scan",
        arche_prop="hasContributor",
    )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_wallpaintinginventory_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="helptext for document_type",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Freskeninventar/Fresco_inventory.csv__Document_type",
    )
    filename = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Filename",
        help_text="Consists of the document_ID (unique identifier) and the document_title (description of the content of the document), separated by two underscores.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Freskeninventar/Fresco_inventory.csv__Filename",
        arche_prop="hasTitle",
    )
    document_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document ID",
        help_text="The project-specific unique identifier of the document. It consists of the abbreviation for the site (TD for Tell el-Daba), the abbreviation for the document type (e.g. DR for Digital Resource) and an inventory number (or, if there was no inventory number, an ID with the prefix 4DPuzzle was created, e.g. 4DPuzzle1234).",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Freskeninventar/Fresco_inventory.csv__Document_ID",
        arche_prop="hasNonLinkedIdentifier",
    )
    document_title = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Document title",
        help_text="A description of the content of the document.  It allows information about the contents of the file to be understood by a human being without opening it. ",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Freskeninventar/Fresco_inventory.csv__Document_title",
    )
    filename_old = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Filename old",
        help_text="helptext for filename_old",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Freskeninventar/Fresco_inventory.csv__Filename_old",
    )
    creation_date_original = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of original document",
        help_text="helptext for creation_date_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Freskeninventar/Fresco_inventory.csv__Creation_date_original",
    )
    creation_year_original = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Creation year of original document",
        help_text="helptext for creation_year_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Freskeninventar/Fresco_inventory.csv__Creation_year_original",
    )
    creation_date_scan = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of scan",
        help_text="helptext for creation_date_scan",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Freskeninventar/Fresco_inventory.csv__Creation_date_scan",
        arche_prop="hasCreatedDate",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of metadata",
        help_text="helptext for creation_date_metadata",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Freskeninventar/Fresco_inventory.csv__Creation_date_metadata",
    )
    storage_folder_original = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Storage folder of original wallpainting",
        help_text="helptext for storage_folder_original",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Freskeninventar/Fresco_inventory.csv__Storage_folder_original",
    )
    resolution_scan_dpi = models.IntegerField(
        blank=True, null=True,
        verbose_name="Scan resolution",
        help_text="helptext for resolution_scan_dpi",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Freskeninventar/Fresco_inventory.csv__Resolution_scan_dpi",
        arche_prop="hasTechnicalInfo",
    )
    fresco_inventory_number = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Fresco inventory number",
        help_text="helptext for fresco_inventory_number",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Freskeninventar/Fresco_inventory.csv__Fresco_inventory_number",
        arche_prop="hasNonLinkedIdentifier",
    )
    original_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment on the original document",
        help_text="Comments from the creation of the original resource.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Freskeninventar/Fresco_inventory.csv__Original_comment",
    )
    digitisation_comment = models.TextField(
        blank=True, null=True,
        verbose_name="Comment from digitisation",
        help_text="Comments from digitisation.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Freskeninventar/Fresco_inventory.csv__Digitisation_comment",
        arche_prop="hasNote",
    )
    file_extension = models.ForeignKey(
        SkosConcept,
        related_name='rvn_wallpaintinginventory_file_extension_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension ",
        help_text="helptext for file_extension",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Freskeninventar/Fresco_inventory.csv__File_extension",
        arche_prop="hasTechnicalInfo",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_wallpaintinginventory_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="helptext for copyright",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Freskeninventar/Fresco_inventory.csv__Copyright",
        arche_prop="hasOwner",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_wallpaintinginventory_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="Whether access to the resource is restricted or if it is open to the public.",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Freskeninventar/Fresco_inventory.csv__Access",
        arche_prop="hasAccessRestriction",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_wallpaintinginventory_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="Abbreviation of Tell el-Daba is 'TD'.",
    ).set_extra(
        is_public=False,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Freskeninventar/Fresco_inventory.csv__Site_ID",
    )
    equipment_scan = models.ForeignKey(
        SkosConcept,
        related_name='rvn_wallpaintinginventory_equipment_scan_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Equipment for scan",
        help_text="helptext for equipment_scan",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Freskeninventar/Fresco_inventory.csv__Equipment_scan",
        arche_prop="HasUsedHardware",
    )
    source_original_copy_edited_copy = models.ForeignKey(
        SkosConcept,
        related_name='rvn_wallpaintinginventory_source_original_copy_edited_copy_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Wheter source is a original or a copy",
        help_text="helptext for source_original_copy_edited_copy",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Freskeninventar/Fresco_inventory.csv__Source__original_copy_edited-copy",
    )
    original_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_wallpaintinginventory_original_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Material of original document",
        help_text="helptext for original_material",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Freskeninventar/Fresco_inventory.csv__Original_material",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_wallpaintinginventory_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)",
        help_text="helptext for excavation_post_excavation",
    ).set_extra(
        is_public=True,
        data_lookup="excel2csv/archiv/4DP_Metadaten_Freskeninventar/Fresco_inventory.csv__Excavation__post_excavation",
    )
    orig_data_csv = models.TextField(
        blank=True,
        verbose_name="The original data"
        )

    class Meta:

        ordering = [
            'filename',
        ]
        verbose_name = "Freskeninventar"

    def __str__(self):
        return "{}".format(self.filename)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:wallpaintinginventory_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:wallpaintinginventory_create')

    def get_absolute_url(self):
        return reverse('archiv:wallpaintinginventory_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:wallpaintinginventory_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:wallpaintinginventory_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:wallpaintinginventory_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:wallpaintinginventory_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:wallpaintinginventory_detail',
                kwargs={'pk': prev.first().id}
            )
        return False
