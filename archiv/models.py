# generated by appcreator

from django.db import models
from django.urls import reverse
from django.contrib.postgres.fields import DateRangeField

from vocabs.models import SkosConcept

from browsing.browsing_utils import model_to_dict


class Actor(models.Model):
    ### Person involved in TD excavations and/or A Puzzle in 4D project ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_actor_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Actors"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:actor_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:actor_create')

    def get_absolute_url(self):
        return reverse('archiv:actor_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:actor_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:actor_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:actor_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:actor_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:actor_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class ArchaeologicalObject4DPuzzleID(models.Model):
    ### A 4DPuzzleID was created for archaeological objects that did not have an ID ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    archaeological_object_id = models.ForeignKey(
        "ArchaeologicalObjectID",
        related_name='rvn_archaeologicalobject4dpuzzleid_archaeological_object_id_archaeologicalobjectid',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Archaeological object ID",
        help_text="",
    )
    archaeological_object_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_archaeologicalobject4dpuzzleid_archaeological_object_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Archaeological object type",
        help_text="",
    )
    archaeological_object_comment = models.TextField(
        blank=True,
        verbose_name="Archaeological object comment",
        help_text="",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_archaeologicalobject4dpuzzleid_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="",
    )
    position = models.TextField(
        blank=True,
        verbose_name="Position",
        help_text="",
    )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_archaeologicalobject4dpuzzleid_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="",
    )
    digitisation_comment = models.TextField(
        blank=True,
        verbose_name="Comment from digitisation",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "ArchaeologicalObject4DPuzzleID"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:archaeologicalobject4dpuzzleid_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:archaeologicalobject4dpuzzleid_create')

    def get_absolute_url(self):
        return reverse('archiv:archaeologicalobject4dpuzzleid_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:archaeologicalobject4dpuzzleid_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:archaeologicalobject4dpuzzleid_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:archaeologicalobject4dpuzzleid_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:archaeologicalobject4dpuzzleid_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:archaeologicalobject4dpuzzleid_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class ArchaeologicalObjectID(models.Model):
    ### ID of archaeological object  ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    archaeological_object_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_archaeologicalobjectid_archaeological_object_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Archaeological object type",
        help_text="",
    )
    archaeological_object_comment = models.TextField(
        blank=True,
        verbose_name="Archaeological object comment",
        help_text="",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_archaeologicalobjectid_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="",
    )
    corresponding_to_archaeological_object_id = models.ManyToManyField(
        "ArchaeologicalObjectID",
        related_name='rvn_archaeologicalobjectid_corresponding_to_archaeological_object_id_archaeologicalobjectid',
        blank=True,
        verbose_name="Corresponding to archaeological object ID",
        help_text="",
    )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_archaeologicalobjectid_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="",
    )
    digitisation_comment = models.TextField(
        blank=True,
        verbose_name="Comment from digitisation",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "ArchaeologicalObjectID"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:archaeologicalobjectid_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:archaeologicalobjectid_create')

    def get_absolute_url(self):
        return reverse('archiv:archaeologicalobjectid_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:archaeologicalobjectid_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:archaeologicalobjectid_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:archaeologicalobjectid_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:archaeologicalobjectid_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:archaeologicalobjectid_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class ArchiveINF(models.Model):
    ### Document with information about the Tell el-Daba documentation archive ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_archiveinf_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="",
    )
    dt_abbr = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_archiveinf_dt_abbr_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type abbreviated",
        help_text="",
    )
    relatedto = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_archiveinf_relatedto_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File is related to other TD resources",
        help_text="",
    )
    creation_date_archivalobject = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date archival object",
        help_text="",
    )
    file_extension_archivalobject = models.ForeignKey(
        SkosConcept,
        related_name='rvn_archiveinf_file_extension_archivalobject_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of archival object",
        help_text="",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date metadata",
        help_text="",
    )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_archiveinf_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_archiveinf_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original",
        help_text="",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_archiveinf_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_archiveinf_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_archiveinf_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="",
    )
    creator_archivalobject = models.ForeignKey(
        "Actor",
        related_name='rvn_archiveinf_creator_archivalobject_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of archival object",
        help_text="",
    )
    comment = models.TextField(
        blank=True,
        verbose_name="Comment",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Archive information"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:archiveinf_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:archiveinf_create')

    def get_absolute_url(self):
        return reverse('archiv:archiveinf_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:archiveinf_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:archiveinf_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:archiveinf_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:archiveinf_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:archiveinf_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class AutoCAD(models.Model):
    ### AutoCAD Files ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_autocad_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="",
    )
    dt_abbr = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_autocad_dt_abbr_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type abbreviated",
        help_text="",
    )
    document_subtype = models.ManyToManyField(
        "DocumentTypes",
        related_name='rvn_autocad_document_subtype_documenttypes',
        blank=True,
        verbose_name="Doucment subtype",
        help_text="",
    )
    dst_abbr = models.ManyToManyField(
        "DocumentTypes",
        related_name='rvn_autocad_dst_abbr_documenttypes',
        blank=True,
        verbose_name="Document subtype abbreviated",
        help_text="",
    )
    creation_date_archivalobject = models.DateField(
        blank=True, null=True,
        verbose_name="Creation year archival object",
        help_text="",
    )
    file_extension_original = models.ForeignKey(
        SkosConcept,
        related_name='rvn_autocad_file_extension_original_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of original",
        help_text="",
    )
    file_extension_archivalobject = models.ForeignKey(
        SkosConcept,
        related_name='rvn_autocad_file_extension_archivalobject_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of archival object",
        help_text="",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date metadata",
        help_text="",
    )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_autocad_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_autocad_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original",
        help_text="",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_autocad_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_autocad_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_autocad_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="",
    )
    creator_archivalobject = models.ForeignKey(
        "Actor",
        related_name='rvn_autocad_creator_archivalobject_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of archival object",
        help_text="",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_autocad_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="",
    )
    archaeological_object_id = models.ManyToManyField(
        "ArchaeologicalObjectID",
        related_name='rvn_autocad_archaeological_object_id_archaeologicalobjectid',
        blank=True,
        verbose_name="Archeological object ID",
        help_text="",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_autocad_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)Whether it was created during excavation or after",
        help_text="",
    )
    original_comment = models.TextField(
        blank=True,
        verbose_name="Comment on the original document",
        help_text="",
    )
    digitisation_comment = models.TextField(
        blank=True,
        verbose_name="Comment from digitisation",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "AutoCAD"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:autocad_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:autocad_create')

    def get_absolute_url(self):
        return reverse('archiv:autocad_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:autocad_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:autocad_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:autocad_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:autocad_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:autocad_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class BoneInventoryNumber(models.Model):
    ### nan ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "BoneInventoryNumber"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:boneinventorynumber_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:boneinventorynumber_create')

    def get_absolute_url(self):
        return reverse('archiv:boneinventorynumber_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:boneinventorynumber_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:boneinventorynumber_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:boneinventorynumber_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:boneinventorynumber_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:boneinventorynumber_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class ConvoluteInventoryNumber(models.Model):
    ### nan ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "ConvoluteInventoryNumber"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:convoluteinventorynumber_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:convoluteinventorynumber_create')

    def get_absolute_url(self):
        return reverse('archiv:convoluteinventorynumber_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:convoluteinventorynumber_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:convoluteinventorynumber_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:convoluteinventorynumber_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:convoluteinventorynumber_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:convoluteinventorynumber_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Convolutecards(models.Model):
    ### Digitised convolute cards ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_convolutecards_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="",
    )
    dt_abbr = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_convolutecards_dt_abbr_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type abbreviated",
        help_text="",
    )
    creation_date_original = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of original document",
        help_text="",
    )
    creation_year_original = models.ForeignKey(
        "ExcavationSeasons",
        related_name='rvn_convolutecards_creation_year_original_excavationseasons',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creation year of original document",
        help_text="",
    )
    creation_date_scan = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of scan",
        help_text="",
    )
    file_extension = models.ForeignKey(
        SkosConcept,
        related_name='rvn_convolutecards_file_extension_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension",
        help_text="",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of metadata",
        help_text="",
    )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_convolutecards_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_convolutecards_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original document",
        help_text="",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_convolutecards_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_convolutecards_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_convolutecards_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="",
    )
    equipment_scan = models.ForeignKey(
        SkosConcept,
        related_name='rvn_convolutecards_equipment_scan_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Equipment for scan",
        help_text="",
    )
    source_original_copy_edited_copy = models.ForeignKey(
        SkosConcept,
        related_name='rvn_convolutecards_source_original_copy_edited_copy_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Wheter source is a original or a copy",
        help_text="",
    )
    resolution_scan_dpi = models.IntegerField(
        blank=True, null=True,
        verbose_name="Scan resolution",
        help_text="",
    )
    creator_scan = models.ForeignKey(
        "Actor",
        related_name='rvn_convolutecards_creator_scan_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of scan",
        help_text="",
    )
    original_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_convolutecards_original_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Material of original document",
        help_text="",
    )
    season = models.ForeignKey(
        "ExcavationSeasons",
        related_name='rvn_convolutecards_season_excavationseasons',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Season",
        help_text="",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_convolutecards_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)",
        help_text="",
    )
    original_comment = models.TextField(
        blank=True,
        verbose_name="Comment on the original document",
        help_text="",
    )
    digitisation_comment = models.TextField(
        blank=True,
        verbose_name="Comment from digitisation",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Convolute cards"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:convolutecards_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:convolutecards_create')

    def get_absolute_url(self):
        return reverse('archiv:convolutecards_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:convolutecards_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:convolutecards_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:convolutecards_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:convolutecards_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:convolutecards_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Datenbase(models.Model):
    ### Database files ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_datenbase_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="",
    )
    dt_abbr = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_datenbase_dt_abbr_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type abbreviated",
        help_text="",
    )
    document_subtype = models.ManyToManyField(
        "DocumentTypes",
        related_name='rvn_datenbase_document_subtype_documenttypes',
        blank=True,
        verbose_name="Doucment subtype",
        help_text="",
    )
    dst_abbr = models.ManyToManyField(
        "DocumentTypes",
        related_name='rvn_datenbase_dst_abbr_documenttypes',
        blank=True,
        verbose_name="Document subtype abbreviated",
        help_text="",
    )
    creation_date_archivalobject = models.DateField(
        blank=True, null=True,
        verbose_name="Creation year archival object",
        help_text="",
    )
    file_extension_original = models.ForeignKey(
        SkosConcept,
        related_name='rvn_datenbase_file_extension_original_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of original",
        help_text="",
    )
    file_extension_archivalobject = models.ForeignKey(
        SkosConcept,
        related_name='rvn_datenbase_file_extension_archivalobject_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of archival object",
        help_text="",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date metadata",
        help_text="",
    )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_datenbase_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_datenbase_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original",
        help_text="",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_datenbase_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_datenbase_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_datenbase_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="",
    )
    creator_archivalobject = models.ForeignKey(
        "Actor",
        related_name='rvn_datenbase_creator_archivalobject_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of archival object",
        help_text="",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_datenbase_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="",
    )
    archaeological_object_id = models.ManyToManyField(
        "ArchaeologicalObjectID",
        related_name='rvn_datenbase_archaeological_object_id_archaeologicalobjectid',
        blank=True,
        verbose_name="Archaeological object ID",
        help_text="",
    )
    find_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_datenbase_find_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find material",
        help_text="",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_datenbase_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)Whether it was created during excavation or after",
        help_text="",
    )
    original_comment = models.TextField(
        blank=True,
        verbose_name="Comment on the original document",
        help_text="",
    )
    digitisation_comment = models.TextField(
        blank=True,
        verbose_name="Comment from digitisation",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Database"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:datenbase_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:datenbase_create')

    def get_absolute_url(self):
        return reverse('archiv:datenbase_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:datenbase_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:datenbase_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:datenbase_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:datenbase_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:datenbase_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Document4DPuzzleID(models.Model):
    ### A 4DPuzzleID was created for documents that did not have an ID ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_document4dpuzzleid_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="",
    )
    dt_abbr = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_document4dpuzzleid_dt_abbr_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type abbreviated",
        help_text="",
    )
    document_subtype = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_document4dpuzzleid_document_subtype_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document subtype",
        help_text="",
    )
    dst_abbr = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_document4dpuzzleid_dst_abbr_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document subtype abbreviated",
        help_text="",
    )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_document4dpuzzleid_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="",
    )
    digitisation_comment = models.TextField(
        blank=True,
        verbose_name="Comment from digitisation",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Document 4DPuzzle ID"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:document4dpuzzleid_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:document4dpuzzleid_create')

    def get_absolute_url(self):
        return reverse('archiv:document4dpuzzleid_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:document4dpuzzleid_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:document4dpuzzleid_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:document4dpuzzleid_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:document4dpuzzleid_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:document4dpuzzleid_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class DocumentTypes(models.Model):
    ### Types of documents  ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    analogue_borndigital = models.ForeignKey(
        SkosConcept,
        related_name='rvn_documenttypes_analogue_borndigital_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Analogue or born-digital",
        help_text="Whether the original document was analogue (and digitised during A Puzzle in 4D project) or born-digital (and converted into durable file format during A Puzzle in 4D project).",
    )
    description = models.TextField(
        blank=True,
        verbose_name="Description",
        help_text="Description of document type.",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Document types"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:documenttypes_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:documenttypes_create')

    def get_absolute_url(self):
        return reverse('archiv:documenttypes_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:documenttypes_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:documenttypes_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:documenttypes_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:documenttypes_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:documenttypes_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class ExcavationObjectID(models.Model):
    ### ID of excavation object (area, square etc.) ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    excavation_object_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_excavationobjectid_excavation_object_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Type of Excavation Object",
        help_text="Types of excavation objects: Areal, Detail, Grube, Oberflaeche, Planquadrat, Planum, Profil, Profilsteg, Schnitt, Situation, Sondage, Zwischenplanum.",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_excavationobjectid_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="Abbreviation of the name of the archaeological site, which is documented in the field drawing. �TD� stands for Tell el-Daba.",
    )
    area = models.ForeignKey(
        SkosConcept,
        related_name='rvn_excavationobjectid_area_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Area",
        help_text="Excavations were carried out in 16 areas: A-I, A-II, A-III, A-IV, A-N, A-V, E-I, F-I, F-II, H-I, H-II, H-III, H-IV, H-V, H-VI, R-I.",
    )
    square_trench = models.ForeignKey(
        SkosConcept,
        related_name='rvn_excavationobjectid_square_trench_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Square trench",
        help_text="Each excavation area has been divided into square trenches.",
    )
    planum = models.ForeignKey(
        SkosConcept,
        related_name='rvn_excavationobjectid_planum_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Planum",
        help_text="Excavations were carried out in spits and a �planum� is an excavation surface. ",
    )
    year = models.ManyToManyField(
        "ExcavationSeasons",
        related_name='rvn_excavationobjectid_year_excavationseasons',
        blank=True,
        verbose_name="Year",
        help_text="Years during work at an excavation object has been carried out.",
    )
    season = models.ManyToManyField(
        "ExcavationSeasons",
        related_name='rvn_excavationobjectid_season_excavationseasons',
        blank=True,
        verbose_name="Season",
        help_text="Season during work at an excavation object has been carried out.",
    )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_excavationobjectid_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="creator_metadata",
        help_text="Person who created the metadata or organization where metadata creation was carried out.",
    )
    digitisation_comment = models.TextField(
        blank=True,
        verbose_name="Comment from digitisation",
        help_text="Comments of the metadata creator (e.g. noticing errors, etc.).",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Excavation Objects"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:excavationobjectid_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:excavationobjectid_create')

    def get_absolute_url(self):
        return reverse('archiv:excavationobjectid_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:excavationobjectid_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:excavationobjectid_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:excavationobjectid_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:excavationobjectid_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:excavationobjectid_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class ExcavationSeasons(models.Model):
    ### Excavation season ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    start_date_end_date = DateRangeField(
        blank=True, null=True,
        verbose_name="Start date - end date",
        help_text="",
    )
    season = models.ForeignKey(
        SkosConcept,
        related_name='rvn_excavationseasons_season_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Season",
        help_text="",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_excavationseasons_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Excavation Seasons"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:excavationseasons_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:excavationseasons_create')

    def get_absolute_url(self):
        return reverse('archiv:excavationseasons_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:excavationseasons_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:excavationseasons_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:excavationseasons_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:excavationseasons_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:excavationseasons_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Fielddrawing(models.Model):
    ### Digitised fielddrawing ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_fielddrawing_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="Type of document � for field drawing metadata this is always �Feldzeichnung� (Fielddrawing).",
    )
    dt_abbr = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_fielddrawing_dt_abbr_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type abbreviated",
        help_text="Abbreviation of the document type � for �field drawing� it is �FZ�.",
    )
    document_subtype = models.ManyToManyField(
        "DocumentTypes",
        related_name='rvn_fielddrawing_document_subtype_documenttypes',
        blank=True,
        verbose_name="Document subtype",
        help_text="Type of field drawing. It is either �Planum� (field drawing of a level in a square, scale 1:50), �Profil� (field drawing of a section, scale 1:50), �Detail� (field drawing of an important part of the archaeological evidence, scale 1:20), �Sondage� (field drawing of a level in a test pit), �Skizze� (a sketch) or �Stratum�.",
    )
    dst_abbr = models.ManyToManyField(
        "DocumentTypes",
        related_name='rvn_fielddrawing_dst_abbr_documenttypes',
        blank=True,
        verbose_name="Document subtype abbreviated",
        help_text="Abbreviation of the document subtype: �Planum� (PL), �Profil� (PR), �Detail� (DZ), �Sondage� (SON), �Stratum� (ST) or �Skizze� (SK).",
    )
    creation_date_original = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of original document",
        help_text="Date when the field drawing was made.",
    )
    creation_year_original = models.ForeignKey(
        "ExcavationSeasons",
        related_name='rvn_fielddrawing_creation_year_original_excavationseasons',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creation year of original document",
        help_text="Year when the field drawing was made.",
    )
    creation_date_scan = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date scan",
        help_text="Date when the scan was made.",
    )
    file_extension = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fielddrawing_file_extension_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension",
        help_text="File extension of the document (e.g. .jpg, .tif).",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date metadata",
        help_text="Date when metadata was created.",
    )
    creator_metadata = models.ManyToManyField(
        "Actor",
        related_name='rvn_fielddrawing_creator_metadata_actor',
        blank=True,
        verbose_name="Creator of metadata",
        help_text="Person who created the metadata.",
    )
    creator_original = models.ManyToManyField(
        "Actor",
        related_name='rvn_fielddrawing_creator_original_actor',
        blank=True,
        verbose_name="Creator of original",
        help_text="Person who created the original field drawing.",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fielddrawing_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="Copyright holder of the document. The copyright of the field drawings is held by the OEAI (�sterreichisches Arch�ologisches Institut/Austrian Archaeological Institute).",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fielddrawing_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="Access is either restricted or open to the public.",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fielddrawing_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="Abbreviation of the name of the archaeological site, which is documented in the field drawing. �TD� stands for Tell el-Daba.",
    )
    equipment_scan = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fielddrawing_equipment_scan_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Scanner",
        help_text="The scanner which was used (brand, product name and number).",
    )
    source_original_copy_edited_copy = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fielddrawing_source_original_copy_edited_copy_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Scan was either made from an original fielddrawing, a copy of a fielddrawing or copy of a fielddrawing that was edited",
        help_text="The original document was either a original field drawing, a photocopy of a field drawing or an edited photocopy of a field drawing (with handwritten comments).",
    )
    resolution_scan_ppi = models.IntegerField(
        blank=True, null=True,
        verbose_name="Scan resolution",
        help_text="Scan resolution settings. Our standard for scanning field drawings is 600 ppi.",
    )
    creator_scan = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fielddrawing_creator_scan_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of scan",
        help_text="Organisation where the scanning was done.",
    )
    original_material = models.ManyToManyField(
        SkosConcept,
        related_name='rvn_fielddrawing_original_material_skosconcept',
        blank=True,
        verbose_name="Material of original document",
        help_text="Material of original (Millimetrepaper (Millimeterpapier), Transparentpapier (tracing paper), Kopierpapier (photocopy)).",
    )
    amendment_drawn_by = models.ManyToManyField(
        "Actor",
        related_name='rvn_fielddrawing_amendment_drawn_by_actor',
        blank=True,
        verbose_name="Drawer of amendment to the fielddrawing",
        help_text="Person who made amendments to the field drawing.",
    )
    drawer_monogram = models.ManyToManyField(
        "Actor",
        related_name='rvn_fielddrawing_drawer_monogram_actor',
        blank=True,
        verbose_name="Monogram of drawer",
        help_text="Monogram of the person who drew the field drawing.  ",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_fielddrawing_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="The unique identifier of an excavation object. Excavation objects are created by the archaeologist and include for example squares or sections. The excavation object ID consists of the abbreviation of site_area_square trench_description of excavation object (e.g.: TD_F-I_o19_Planum1 means Tell el-Daba, area F-I, square o19, level 1).",
    )
    archaeological_object_id = models.ManyToManyField(
        "ArchaeologicalObjectID",
        related_name='rvn_fielddrawing_archaeological_object_id_archaeologicalobjectid',
        blank=True,
        verbose_name="Archaeological object ID",
        help_text="The unique identifier of an archaeological object. Archaeological objects are all objects that were created in the past, e.g. in the Bronze Age. An archaeological object ID contains the abbreviation of site_area_square trench_name of archaeological object (e.g.: TD_F-I_o19_Grab1 means Tell el-Daba, area F-I, square o19, grave 1).",
    )
    stratum_comment = models.TextField(
        blank=True,
        verbose_name="Stratum (comment)",
        help_text="Transcript of the handwritten comments and notes on the stratum written on the field drawing. ",
    )
    season = models.ForeignKey(
        "ExcavationSeasons",
        related_name='rvn_fielddrawing_season_excavationseasons',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Fieldwork season",
        help_text="Fieldwork season when the field drawing was made (H = Herbst = autumn; F = Fr�hling = spring).",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fielddrawing_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)",
        help_text="When the document was created. Field drawings were always created in the field, so the entry is always �excavation�.",
    )
    original_comment = models.TextField(
        blank=True,
        verbose_name="Comment on the original document",
        help_text="Transcript of additional information found on the field drawing.",
    )
    digitisation_comment = models.TextField(
        blank=True,
        verbose_name="Comment from digitisation",
        help_text="Comments of the creator of the scan (e.g. noticing of measurement errors, etc.) ",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Fielddrawing"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:fielddrawing_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:fielddrawing_create')

    def get_absolute_url(self):
        return reverse('archiv:fielddrawing_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:fielddrawing_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:fielddrawing_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:fielddrawing_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:fielddrawing_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:fielddrawing_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Film(models.Model):
    ### Analogue photographic film negatives ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    creation_year_original = models.ForeignKey(
        "ExcavationSeasons",
        related_name='rvn_film_creation_year_original_excavationseasons',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creation year original",
        help_text="",
    )
    film_number = models.IntegerField(
        blank=True, null=True,
        verbose_name="Film number",
        help_text="",
    )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_film_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="",
    )
    dt_abbr = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_film_dt_abbr_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type abbreviated",
        help_text="",
    )
    document_subtype = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_film_document_subtype_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document subtype",
        help_text="",
    )
    dst_abbr = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_film_dst_abbr_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document subtype abbreviated",
        help_text="",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date metadata",
        help_text="",
    )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_film_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="",
    )
    film_format = models.ForeignKey(
        SkosConcept,
        related_name='rvn_film_film_format_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Film format",
        help_text="",
    )
    film_brand = models.ForeignKey(
        SkosConcept,
        related_name='rvn_film_film_brand_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Film brand",
        help_text="",
    )
    equipment_camera_brand = models.ForeignKey(
        SkosConcept,
        related_name='rvn_film_equipment_camera_brand_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Equipment camera brand",
        help_text="",
    )
    decomposition_phenomenon = models.TextField(
        blank=True,
        verbose_name="Decomposition phenomenon",
        help_text="",
    )
    original_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_film_original_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Material of original document",
        help_text="",
    )
    original_comment = models.TextField(
        blank=True,
        verbose_name="Comment on the original document",
        help_text="",
    )
    digitisation_comment = models.TextField(
        blank=True,
        verbose_name="Comment from digitisation",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Photographic Film"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:film_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:film_create')

    def get_absolute_url(self):
        return reverse('archiv:film_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:film_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:film_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:film_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:film_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:film_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Filme(models.Model):
    ### nan ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Filme"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:filme_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:filme_create')

    def get_absolute_url(self):
        return reverse('archiv:filme_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:filme_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:filme_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:filme_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:filme_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:filme_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class FindInventoryNumber(models.Model):
    ### nan ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "FindInventoryNumber"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:findinventorynumber_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:findinventorynumber_create')

    def get_absolute_url(self):
        return reverse('archiv:findinventorynumber_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:findinventorynumber_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:findinventorynumber_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:findinventorynumber_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:findinventorynumber_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:findinventorynumber_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Finddrawing(models.Model):
    ### Finddrawing ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_finddrawing_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="",
    )
    dt_abbr = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_finddrawing_dt_abbr_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type abbreviated",
        help_text="",
    )
    document_subtype = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_finddrawing_document_subtype_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document subtype",
        help_text="",
    )
    dst_abbr = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_finddrawing_dst_abbr_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document subtype abbreviated",
        help_text="",
    )
    creation_date_original = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of original document",
        help_text="",
    )
    creation_date_scan = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of scan",
        help_text="",
    )
    file_extension = models.ForeignKey(
        SkosConcept,
        related_name='rvn_finddrawing_file_extension_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension ",
        help_text="",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of metadata",
        help_text="",
    )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_finddrawing_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_finddrawing_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original document",
        help_text="",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_finddrawing_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_finddrawing_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_finddrawing_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="",
    )
    source_original_copy_edited_copy = models.ForeignKey(
        SkosConcept,
        related_name='rvn_finddrawing_source_original_copy_edited_copy_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Wheter source is a original or a copy",
        help_text="",
    )
    resolution_scan_dpi = models.IntegerField(
        blank=True, null=True,
        verbose_name="Scan resolution",
        help_text="",
    )
    creator_scan = models.ForeignKey(
        "Actor",
        related_name='rvn_finddrawing_creator_scan_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of scan",
        help_text="",
    )
    original_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_finddrawing_original_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Material of original document",
        help_text="",
    )
    find_inventory_number = models.ForeignKey(
        "FindInventoryNumber",
        related_name='rvn_finddrawing_find_inventory_number_findinventorynumber',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find inventory number",
        help_text="",
    )
    convolute_inventory_number = models.ForeignKey(
        "ConvoluteInventoryNumber",
        related_name='rvn_finddrawing_convolute_inventory_number_convoluteinventorynumber',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Convolute inventory number",
        help_text="",
    )
    bone_stone_inventory_number = models.ForeignKey(
        "BoneInventoryNumber",
        related_name='rvn_finddrawing_bone_stone_inventory_number_boneinventorynumber',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Bone or stone inventory number",
        help_text="",
    )
    find_date = models.DateField(
        blank=True, null=True,
        verbose_name="Find datum",
        help_text="",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_finddrawing_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)",
        help_text="",
    )
    original_comment = models.TextField(
        blank=True,
        verbose_name="Comment on the original document",
        help_text="",
    )
    digitisation_comment = models.TextField(
        blank=True,
        verbose_name="Comment from digitisation",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Finddrawing"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:finddrawing_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:finddrawing_create')

    def get_absolute_url(self):
        return reverse('archiv:finddrawing_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:finddrawing_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:finddrawing_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:finddrawing_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:finddrawing_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:finddrawing_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Findsheets(models.Model):
    ### Digitised find sheets ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_findsheets_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="",
    )
    dt_abbr = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_findsheets_dt_abbr_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type abbreviated",
        help_text="",
    )
    creation_date_original = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of original document",
        help_text="",
    )
    creation_date_scan = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of scan",
        help_text="",
    )
    file_extension = models.ForeignKey(
        SkosConcept,
        related_name='rvn_findsheets_file_extension_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension ",
        help_text="",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of metadata",
        help_text="",
    )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_findsheets_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_findsheets_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original document",
        help_text="",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_findsheets_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_findsheets_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="",
    )
    storage_original = models.ForeignKey(
        SkosConcept,
        related_name='rvn_findsheets_storage_original_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Storage of original document",
        help_text="",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_findsheets_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="",
    )
    equipment_scan = models.ForeignKey(
        SkosConcept,
        related_name='rvn_findsheets_equipment_scan_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Equipment for scan",
        help_text="",
    )
    source_original_copy_edited_copy = models.ForeignKey(
        SkosConcept,
        related_name='rvn_findsheets_source_original_copy_edited_copy_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Wheter source is a original or a copy",
        help_text="",
    )
    resolution_scan_dpi = models.IntegerField(
        blank=True, null=True,
        verbose_name="Scan resolution",
        help_text="",
    )
    creator_scan = models.ForeignKey(
        "Actor",
        related_name='rvn_findsheets_creator_scan_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of scan",
        help_text="",
    )
    original_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_findsheets_original_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Material of original document",
        help_text="",
    )
    find_inventory_number = models.ForeignKey(
        "FindInventoryNumber",
        related_name='rvn_findsheets_find_inventory_number_findinventorynumber',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find inventory number",
        help_text="",
    )
    convolute_inventory_number = models.ForeignKey(
        "ConvoluteInventoryNumber",
        related_name='rvn_findsheets_convolute_inventory_number_convoluteinventorynumber',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Convolute inventory number",
        help_text="",
    )
    bone_stone_inventory_number = models.ForeignKey(
        "BoneInventoryNumber",
        related_name='rvn_findsheets_bone_stone_inventory_number_boneinventorynumber',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Bone or stone inventory number",
        help_text="",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_findsheets_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="",
    )
    archaeological_object_id = models.ForeignKey(
        "ArchaeologicalObjectID",
        related_name='rvn_findsheets_archaeological_object_id_archaeologicalobjectid',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Archaeological object ID",
        help_text="",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_findsheets_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)",
        help_text="",
    )
    original_comment = models.TextField(
        blank=True,
        verbose_name="Comment on the original document",
        help_text="",
    )
    digitisation_comment = models.TextField(
        blank=True,
        verbose_name="Comment from digitisation",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Findsheets"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:findsheets_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:findsheets_create')

    def get_absolute_url(self):
        return reverse('archiv:findsheets_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:findsheets_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:findsheets_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:findsheets_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:findsheets_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:findsheets_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Fotoborndigital(models.Model):
    ### Folder with born-digital photos ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_fotoborndigital_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="",
    )
    dt_abbr = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_fotoborndigital_dt_abbr_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type abbreviated",
        help_text="",
    )
    document_subtype = models.ManyToManyField(
        "DocumentTypes",
        related_name='rvn_fotoborndigital_document_subtype_documenttypes',
        blank=True,
        verbose_name="Document subtype",
        help_text="",
    )
    dst_abbr = models.ManyToManyField(
        "DocumentTypes",
        related_name='rvn_fotoborndigital_dst_abbr_documenttypes',
        blank=True,
        verbose_name="Document subtype abbreviated",
        help_text="",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date metadata",
        help_text="",
    )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_fotoborndigital_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotoborndigital_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotoborndigital_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotoborndigital_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_fotoborndigital_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="",
    )
    original_comment = models.TextField(
        blank=True,
        verbose_name="Comment on the original document",
        help_text="",
    )
    digitisation_comment = models.TextField(
        blank=True,
        verbose_name="Comment from digitisation",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Fotos born digital"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:fotoborndigital_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:fotoborndigital_create')

    def get_absolute_url(self):
        return reverse('archiv:fotoborndigital_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:fotoborndigital_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:fotoborndigital_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:fotoborndigital_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:fotoborndigital_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:fotoborndigital_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Fotosgescannt(models.Model):
    ### Digitised photos ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    film_number = models.IntegerField(
        blank=True, null=True,
        verbose_name="Film number",
        help_text="",
    )
    photo_number = models.IntegerField(
        blank=True, null=True,
        verbose_name="Photo number",
        help_text="",
    )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_fotosgescannt_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="",
    )
    dt_abbr = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_fotosgescannt_dt_abbr_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type abbreviated",
        help_text="",
    )
    document_subtype = models.ManyToManyField(
        "DocumentTypes",
        related_name='rvn_fotosgescannt_document_subtype_documenttypes',
        blank=True,
        verbose_name="Document subtype",
        help_text="",
    )
    dst_abbreviation = models.ManyToManyField(
        "DocumentTypes",
        related_name='rvn_fotosgescannt_dst_abbreviation_documenttypes',
        blank=True,
        verbose_name="Document subtype abbreviated",
        help_text="",
    )
    creation_date_original = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of original document",
        help_text="",
    )
    creation_date_scan = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of scan",
        help_text="",
    )
    file_extension = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotosgescannt_file_extension_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension",
        help_text="",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of metadata",
        help_text="",
    )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_fotosgescannt_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_fotosgescannt_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original",
        help_text="",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotosgescannt_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotosgescannt_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotosgescannt_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="",
    )
    equipment_scan = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotosgescannt_equipment_scan_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Equipment for scan",
        help_text="",
    )
    source_original_copy_edited_copy = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotosgescannt_source_original_copy_edited_copy_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Wheter source is a original or a copy",
        help_text="",
    )
    resolution_scan_ppi = models.IntegerField(
        blank=True, null=True,
        verbose_name="Resolution of scan",
        help_text="",
    )
    creator_scan = models.ForeignKey(
        "Actor",
        related_name='rvn_fotosgescannt_creator_scan_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of scan",
        help_text="",
    )
    film_id = models.ForeignKey(
        "Filme",
        related_name='rvn_fotosgescannt_film_id_filme',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Film ID",
        help_text="",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_fotosgescannt_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="",
    )
    archaeological_object_id = models.ManyToManyField(
        "ArchaeologicalObjectID",
        related_name='rvn_fotosgescannt_archaeological_object_id_archaeologicalobjectid',
        blank=True,
        verbose_name="Archaeological object ID",
        help_text="",
    )
    archaeological_object_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotosgescannt_archaeological_object_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Archeological object type",
        help_text="",
    )
    find_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotosgescannt_find_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find type",
        help_text="",
    )
    find_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotosgescannt_find_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find material",
        help_text="",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fotosgescannt_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)Whether it was created during excavation or after",
        help_text="",
    )
    original_comment = models.TextField(
        blank=True,
        verbose_name="Comment on the original document",
        help_text="",
    )
    digitisation_comment = models.TextField(
        blank=True,
        verbose_name="Comment from digitisation",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Fotos gescannt"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:fotosgescannt_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:fotosgescannt_create')

    def get_absolute_url(self):
        return reverse('archiv:fotosgescannt_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:fotosgescannt_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:fotosgescannt_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:fotosgescannt_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:fotosgescannt_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:fotosgescannt_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Fundinventar4DPuzzleID(models.Model):
    ### A 4DPuzzleID was created for find inventories that did not have an ID ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    find_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventar4dpuzzleid_find_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find material",
        help_text="",
    )
    find_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventar4dpuzzleid_find_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find type",
        help_text="",
    )
    find_comment = models.TextField(
        blank=True,
        verbose_name="Find comment",
        help_text="",
    )
    excavation_object_id = models.ForeignKey(
        "ExcavationObjectID",
        related_name='rvn_fundinventar4dpuzzleid_excavation_object_id_excavationobjectid',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Excavation object ID",
        help_text="",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventar4dpuzzleid_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="",
    )
    uncertainty_excavation_digitisation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventar4dpuzzleid_uncertainty_excavation_digitisation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or digital",
        help_text="",
    )
    creator_metadata = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventar4dpuzzleid_creator_metadata_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="",
    )
    digitisation_comment = models.TextField(
        blank=True,
        verbose_name="Comment from digitisation",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Fundinventar 4DPuzzle ID"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:fundinventar4dpuzzleid_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:fundinventar4dpuzzleid_create')

    def get_absolute_url(self):
        return reverse('archiv:fundinventar4dpuzzleid_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:fundinventar4dpuzzleid_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:fundinventar4dpuzzleid_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:fundinventar4dpuzzleid_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:fundinventar4dpuzzleid_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:fundinventar4dpuzzleid_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class FundinventarInventarnummern(models.Model):
    ### Inventory numbers of find inventories ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    find_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarinventarnummern_find_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find material",
        help_text="",
    )
    find_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarinventarnummern_find_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find type",
        help_text="",
    )
    find_comment = models.TextField(
        blank=True,
        verbose_name="Find comment",
        help_text="",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_fundinventarinventarnummern_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="",
    )
    archaeological_object_id = models.ForeignKey(
        "ArchaeologicalObjectID",
        related_name='rvn_fundinventarinventarnummern_archaeological_object_id_archaeologicalobjectid',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Archaeological object ID",
        help_text="",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarinventarnummern_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="",
    )
    uncertainty_excavation_digitisation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarinventarnummern_uncertainty_excavation_digitisation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or digital",
        help_text="",
    )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_fundinventarinventarnummern_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="",
    )
    digitisation_comment = models.TextField(
        blank=True,
        verbose_name="Comment from digitisation",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Fundinventar Inventarnummern"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:fundinventarinventarnummern_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:fundinventarinventarnummern_create')

    def get_absolute_url(self):
        return reverse('archiv:fundinventarinventarnummern_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:fundinventarinventarnummern_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:fundinventarinventarnummern_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:fundinventarinventarnummern_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:fundinventarinventarnummern_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:fundinventarinventarnummern_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class FundinventarKonvolutnummern(models.Model):
    ### Inventory of convolute numbers ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_fundinventarkonvolutnummern_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="",
    )
    archaeological_object_id = models.ManyToManyField(
        "ArchaeologicalObjectID",
        related_name='rvn_fundinventarkonvolutnummern_archaeological_object_id_archaeologicalobjectid',
        blank=True,
        verbose_name="Archaeological object ID",
        help_text="",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarkonvolutnummern_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="",
    )
    creator_metadata = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarkonvolutnummern_creator_metadata_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="",
    )
    digitisation_comment = models.TextField(
        blank=True,
        verbose_name="Comment from digitisation",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Fundinventar Konvolutnummern"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:fundinventarkonvolutnummern_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:fundinventarkonvolutnummern_create')

    def get_absolute_url(self):
        return reverse('archiv:fundinventarkonvolutnummern_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:fundinventarkonvolutnummern_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:fundinventarkonvolutnummern_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:fundinventarkonvolutnummern_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:fundinventarkonvolutnummern_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:fundinventarkonvolutnummern_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class FundinventarMaterialproben(models.Model):
    ### Inventory of material samples ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    find_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarmaterialproben_find_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find material",
        help_text="",
    )
    find_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarmaterialproben_find_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find type",
        help_text="",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_fundinventarmaterialproben_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="",
    )
    archaeological_object_id = models.ForeignKey(
        "ExcavationObjectID",
        related_name='rvn_fundinventarmaterialproben_archaeological_object_id_excavationobjectid',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Arachaeological object ID",
        help_text="",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarmaterialproben_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="",
    )
    relatedto = models.ForeignKey(
        "TDInv4DPuzzleNUMMER",
        related_name='rvn_fundinventarmaterialproben_relatedto_tdinv4dpuzzlenummer',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File is related to other TD resources",
        help_text="",
    )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_fundinventarmaterialproben_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="",
    )
    digitisation_comment = models.TextField(
        blank=True,
        verbose_name="Comment from digitisation",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Fundinventar Materialproben"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:fundinventarmaterialproben_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:fundinventarmaterialproben_create')

    def get_absolute_url(self):
        return reverse('archiv:fundinventarmaterialproben_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:fundinventarmaterialproben_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:fundinventarmaterialproben_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:fundinventarmaterialproben_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:fundinventarmaterialproben_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:fundinventarmaterialproben_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class FundinventarSteininventar(models.Model):
    ### Inventory of stones ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    find_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarsteininventar_find_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find material",
        help_text="",
    )
    find_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarsteininventar_find_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find type",
        help_text="",
    )
    find_comment = models.TextField(
        blank=True,
        verbose_name="Find comment",
        help_text="",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_fundinventarsteininventar_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="",
    )
    archaeological_object_id = models.ForeignKey(
        "ExcavationObjectID",
        related_name='rvn_fundinventarsteininventar_archaeological_object_id_excavationobjectid',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Arachaeological object ID",
        help_text="",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_fundinventarsteininventar_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="",
    )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_fundinventarsteininventar_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="",
    )
    digitisation_comment = models.TextField(
        blank=True,
        verbose_name="Comment from digitisation",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "FundinventarSteininventar"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:fundinventarsteininventar_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:fundinventarsteininventar_create')

    def get_absolute_url(self):
        return reverse('archiv:fundinventarsteininventar_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:fundinventarsteininventar_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:fundinventarsteininventar_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:fundinventarsteininventar_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:fundinventarsteininventar_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:fundinventarsteininventar_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class GIS(models.Model):
    ### Geographical information system ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_gis_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="",
    )
    dt_abbr = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_gis_dt_abbr_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type abbreviated",
        help_text="",
    )
    document_subtype = models.ManyToManyField(
        "DocumentTypes",
        related_name='rvn_gis_document_subtype_documenttypes',
        blank=True,
        verbose_name="Document subtype",
        help_text="",
    )
    dst_abbr = models.ManyToManyField(
        "DocumentTypes",
        related_name='rvn_gis_dst_abbr_documenttypes',
        blank=True,
        verbose_name="Document subtype abbreviated",
        help_text="",
    )
    creation_date_original = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of original document",
        help_text="",
    )
    creation_date_archivalobject = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of archival object",
        help_text="",
    )
    file_extension_original = models.ForeignKey(
        SkosConcept,
        related_name='rvn_gis_file_extension_original_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of original document",
        help_text="",
    )
    file_extension_archivalobject = models.ForeignKey(
        SkosConcept,
        related_name='rvn_gis_file_extension_archivalobject_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of archival object",
        help_text="",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of metadata",
        help_text="",
    )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_gis_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_gis_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original document",
        help_text="",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_gis_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_gis_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_gis_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="",
    )
    creator_archivalobject = models.ForeignKey(
        "Actor",
        related_name='rvn_gis_creator_archivalobject_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="creator of archival object",
        help_text="",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_gis_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="",
    )
    archaeological_object_id = models.ManyToManyField(
        "ArchaeologicalObjectID",
        related_name='rvn_gis_archaeological_object_id_archaeologicalobjectid',
        blank=True,
        verbose_name="Archaeological object ID",
        help_text="",
    )
    relatedto = models.ManyToManyField(
        "DocumentTypes",
        related_name='rvn_gis_relatedto_documenttypes',
        blank=True,
        verbose_name="File is related to other TD resources",
        help_text="",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_gis_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)",
        help_text="",
    )
    original_comment = models.TextField(
        blank=True,
        verbose_name="Comment on the original document",
        help_text="",
    )
    digitisation_comment = models.TextField(
        blank=True,
        verbose_name="Comment from digitisation",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "GIS"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:gis_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:gis_create')

    def get_absolute_url(self):
        return reverse('archiv:gis_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:gis_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:gis_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:gis_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:gis_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:gis_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Geophysics(models.Model):
    ### Files from geophysical surveys ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_geophysics_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="",
    )
    dt_abbr = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_geophysics_dt_abbr_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type abbreviated",
        help_text="",
    )
    document_subtype = models.ManyToManyField(
        "DocumentTypes",
        related_name='rvn_geophysics_document_subtype_documenttypes',
        blank=True,
        verbose_name="Document subtype",
        help_text="",
    )
    dst_abbr = models.ManyToManyField(
        "DocumentTypes",
        related_name='rvn_geophysics_dst_abbr_documenttypes',
        blank=True,
        verbose_name="Document subtype abbreviated",
        help_text="",
    )
    creation_date_original = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of original document",
        help_text="",
    )
    creation_date_archivalobject = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of archival object",
        help_text="",
    )
    file_extension_original = models.ForeignKey(
        SkosConcept,
        related_name='rvn_geophysics_file_extension_original_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of original document",
        help_text="",
    )
    file_extension_archivalobject = models.ForeignKey(
        SkosConcept,
        related_name='rvn_geophysics_file_extension_archivalobject_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of archival object",
        help_text="",
    )
    method = models.ForeignKey(
        SkosConcept,
        related_name='rvn_geophysics_method_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Method",
        help_text="",
    )
    equipment = models.ForeignKey(
        SkosConcept,
        related_name='rvn_geophysics_equipment_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Equipment",
        help_text="",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of metadata",
        help_text="",
    )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_geophysics_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_geophysics_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original document",
        help_text="",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_geophysics_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_geophysics_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_geophysics_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="",
    )
    creator_archivalobject = models.ForeignKey(
        "Actor",
        related_name='rvn_geophysics_creator_archivalobject_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of archival object",
        help_text="",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_geophysics_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_geophysics_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)Whether it was created during excavation or after",
        help_text="",
    )
    original_comment = models.TextField(
        blank=True,
        verbose_name="Comment on the original document",
        help_text="",
    )
    digitisation_comment = models.TextField(
        blank=True,
        verbose_name="Comment from digitisation",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Geophysics"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:geophysics_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:geophysics_create')

    def get_absolute_url(self):
        return reverse('archiv:geophysics_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:geophysics_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:geophysics_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:geophysics_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:geophysics_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:geophysics_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Inventorybooks(models.Model):
    ### Digitised inventory books ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_inventorybooks_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="",
    )
    dt_abbr = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_inventorybooks_dt_abbr_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type abbreviated",
        help_text="",
    )
    creation_date_original = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of original document",
        help_text="",
    )
    creation_date_scan = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of scan",
        help_text="",
    )
    file_extension = models.ForeignKey(
        SkosConcept,
        related_name='rvn_inventorybooks_file_extension_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension",
        help_text="",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of metadata",
        help_text="",
    )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_inventorybooks_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_inventorybooks_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original document",
        help_text="",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_inventorybooks_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_inventorybooks_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_inventorybooks_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="",
    )
    equipment_scan = models.ForeignKey(
        SkosConcept,
        related_name='rvn_inventorybooks_equipment_scan_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Equipment for scan",
        help_text="",
    )
    source_original_copy_edited_copy = models.ForeignKey(
        SkosConcept,
        related_name='rvn_inventorybooks_source_original_copy_edited_copy_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Wheter source is a original or a copy",
        help_text="",
    )
    resolution_scan_dpi = models.IntegerField(
        blank=True, null=True,
        verbose_name="Scan resolution",
        help_text="",
    )
    creator_scan = models.ForeignKey(
        "Actor",
        related_name='rvn_inventorybooks_creator_scan_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of scan",
        help_text="",
    )
    original_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_inventorybooks_original_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Material of original document",
        help_text="",
    )
    find_inventory_number = models.ForeignKey(
        "FindInventoryNumber",
        related_name='rvn_inventorybooks_find_inventory_number_findinventorynumber',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find inventory number",
        help_text="",
    )
    convolute_inventory_number = models.ForeignKey(
        "ConvoluteInventoryNumber",
        related_name='rvn_inventorybooks_convolute_inventory_number_convoluteinventorynumber',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Convolute inventory number",
        help_text="",
    )
    bone_stone_inventory_number = models.ForeignKey(
        "BoneInventoryNumber",
        related_name='rvn_inventorybooks_bone_stone_inventory_number_boneinventorynumber',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Bone or stone inventory number",
        help_text="",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_inventorybooks_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)",
        help_text="",
    )
    original_comment = models.TextField(
        blank=True,
        verbose_name="Comment on the original document",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Inventory books"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:inventorybooks_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:inventorybooks_create')

    def get_absolute_url(self):
        return reverse('archiv:inventorybooks_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:inventorybooks_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:inventorybooks_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:inventorybooks_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:inventorybooks_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:inventorybooks_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class PhasenID(models.Model):
    ### Identifier of archaeological phases ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    phase_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_phasenid_phase_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Phase type",
        help_text="",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_phasenid_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="",
    )
    area = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_phasenid_area_excavationobjectid',
        blank=True,
        verbose_name="Area",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Phasen ID"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:phasenid_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:phasenid_create')

    def get_absolute_url(self):
        return reverse('archiv:phasenid_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:phasenid_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:phasenid_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:phasenid_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:phasenid_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:phasenid_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Protocols(models.Model):
    ### Digitised protocols ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_protocols_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="",
    )
    dt_abbr = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_protocols_dt_abbr_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type abbreviated",
        help_text="",
    )
    creation_date_original = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of original document",
        help_text="",
    )
    creation_date_scan = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of scan",
        help_text="",
    )
    file_extension = models.ForeignKey(
        SkosConcept,
        related_name='rvn_protocols_file_extension_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension",
        help_text="",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of metadata",
        help_text="",
    )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_protocols_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_protocols_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original document",
        help_text="",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_protocols_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_protocols_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="",
    )
    storage = models.ForeignKey(
        SkosConcept,
        related_name='rvn_protocols_storage_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Storage folder of original document",
        help_text="",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_protocols_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="",
    )
    equipment_scan = models.ForeignKey(
        SkosConcept,
        related_name='rvn_protocols_equipment_scan_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Equipment of scan",
        help_text="",
    )
    source_original_copy_edited_copy = models.ForeignKey(
        SkosConcept,
        related_name='rvn_protocols_source_original_copy_edited_copy_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Wheter source is a original or a copy",
        help_text="",
    )
    resolution_scan_dpi = models.IntegerField(
        blank=True, null=True,
        verbose_name="Scan resolution",
        help_text="",
    )
    creator_scan = models.ForeignKey(
        "Actor",
        related_name='rvn_protocols_creator_scan_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of scan",
        help_text="",
    )
    original_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_protocols_original_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Material of original document",
        help_text="",
    )
    excavation_object_id = models.ForeignKey(
        "ExcavationObjectID",
        related_name='rvn_protocols_excavation_object_id_excavationobjectid',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Excavation object ID",
        help_text="",
    )
    archaeological_object_id = models.ManyToManyField(
        "ArchaeologicalObjectID",
        related_name='rvn_protocols_archaeological_object_id_archaeologicalobjectid',
        blank=True,
        verbose_name="Archaeological object ID",
        help_text="",
    )
    number_of_pages = models.IntegerField(
        blank=True, null=True,
        verbose_name="Number of pages",
        help_text="",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_protocols_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)",
        help_text="",
    )
    original_comment = models.TextField(
        blank=True,
        verbose_name="Comment on the original document",
        help_text="",
    )
    digitisation_comment = models.TextField(
        blank=True,
        verbose_name="Comment from digitisation",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Protocols"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:protocols_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:protocols_create')

    def get_absolute_url(self):
        return reverse('archiv:protocols_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:protocols_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:protocols_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:protocols_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:protocols_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:protocols_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class StratenID(models.Model):
    ### Identifier of archaeological strata ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    stratum_type = models.ForeignKey(
        SkosConcept,
        related_name='rvn_stratenid_stratum_type_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Stratum type",
        help_text="",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_stratenid_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="",
    )
    area = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_stratenid_area_excavationobjectid',
        blank=True,
        verbose_name="Area",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Straten ID"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:stratenid_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:stratenid_create')

    def get_absolute_url(self):
        return reverse('archiv:stratenid_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:stratenid_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:stratenid_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:stratenid_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:stratenid_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:stratenid_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class TDInv4DPuzzleNUMMER(models.Model):
    ### nan ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "TDInv4DPuzzleNUMMER"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:tdinv4dpuzzlenummer_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:tdinv4dpuzzlenummer_create')

    def get_absolute_url(self):
        return reverse('archiv:tdinv4dpuzzlenummer_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:tdinv4dpuzzlenummer_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:tdinv4dpuzzlenummer_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:tdinv4dpuzzlenummer_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:tdinv4dpuzzlenummer_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:tdinv4dpuzzlenummer_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Tables(models.Model):
    ### Tables ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_tables_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="",
    )
    dt_abbr = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_tables_dt_abbr_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type abbreviated",
        help_text="",
    )
    document_subtype = models.ManyToManyField(
        "DocumentTypes",
        related_name='rvn_tables_document_subtype_documenttypes',
        blank=True,
        verbose_name="Document subtype",
        help_text="",
    )
    dst_abbr = models.ManyToManyField(
        "DocumentTypes",
        related_name='rvn_tables_dst_abbr_documenttypes',
        blank=True,
        verbose_name="Document subtype abbreviated",
        help_text="",
    )
    creation_date_archivalobject = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of archival object",
        help_text="",
    )
    file_extension_original = models.ForeignKey(
        SkosConcept,
        related_name='rvn_tables_file_extension_original_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of original document",
        help_text="",
    )
    file_extension_archivalobject = models.ForeignKey(
        SkosConcept,
        related_name='rvn_tables_file_extension_archivalobject_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of archival object",
        help_text="",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of metadata",
        help_text="",
    )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_tables_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_tables_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original document",
        help_text="",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_tables_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_tables_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_tables_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="",
    )
    creator_archivalobject = models.ForeignKey(
        "Actor",
        related_name='rvn_tables_creator_archivalobject_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="creator of archival object",
        help_text="",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_tables_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="",
    )
    archaeological_object_id = models.ManyToManyField(
        "ArchaeologicalObjectID",
        related_name='rvn_tables_archaeological_object_id_archaeologicalobjectid',
        blank=True,
        verbose_name="Archaeological object ID",
        help_text="",
    )
    relatedto = models.ManyToManyField(
        "DocumentTypes",
        related_name='rvn_tables_relatedto_documenttypes',
        blank=True,
        verbose_name="File is related to other TD resources",
        help_text="",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_tables_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)",
        help_text="",
    )
    original_comment = models.TextField(
        blank=True,
        verbose_name="Comment on the original document",
        help_text="",
    )
    digitisation_comment = models.TextField(
        blank=True,
        verbose_name="Comment from digitisation",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Tables"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:tables_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:tables_create')

    def get_absolute_url(self):
        return reverse('archiv:tables_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:tables_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:tables_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:tables_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:tables_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:tables_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class ThreeDimensionalModel(models.Model):
    ### 3D models ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_threedimensionalmodel_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="",
    )
    dt_abbr = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_threedimensionalmodel_dt_abbr_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type abbreviated",
        help_text="",
    )
    document_subtype = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_threedimensionalmodel_document_subtype_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document subtype",
        help_text="",
    )
    dst_abbr = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_threedimensionalmodel_dst_abbr_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document subtype abbreviated",
        help_text="",
    )
    creation_date_archivalobject = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of archival object",
        help_text="",
    )
    file_extension_original = models.ForeignKey(
        SkosConcept,
        related_name='rvn_threedimensionalmodel_file_extension_original_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of original 3D model",
        help_text="",
    )
    file_extension_archivalobject = models.ForeignKey(
        SkosConcept,
        related_name='rvn_threedimensionalmodel_file_extension_archivalobject_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of archival data",
        help_text="",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date metadata",
        help_text="",
    )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_threedimensionalmodel_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_threedimensionalmodel_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original ",
        help_text="",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_threedimensionalmodel_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_threedimensionalmodel_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_threedimensionalmodel_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="",
    )
    creator_archivalobject = models.ForeignKey(
        "Actor",
        related_name='rvn_threedimensionalmodel_creator_archivalobject_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of archival object",
        help_text="",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_threedimensionalmodel_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="",
    )
    archaeological_object_id = models.ManyToManyField(
        "ArchaeologicalObjectID",
        related_name='rvn_threedimensionalmodel_archaeological_object_id_archaeologicalobjectid',
        blank=True,
        verbose_name="Archaeological object ID",
        help_text="",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_threedimensionalmodel_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)Whether it was created during excavation or after",
        help_text="",
    )
    original_comment = models.TextField(
        blank=True,
        verbose_name="Comment on the original document",
        help_text="",
    )
    digitisation_comment = models.TextField(
        blank=True,
        verbose_name="Comment from digitisation",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "3D models"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:threedimensionalmodel_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:threedimensionalmodel_create')

    def get_absolute_url(self):
        return reverse('archiv:threedimensionalmodel_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:threedimensionalmodel_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:threedimensionalmodel_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:threedimensionalmodel_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:threedimensionalmodel_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:threedimensionalmodel_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Videos(models.Model):
    ### Videos ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_videos_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="",
    )
    dt_abbr = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_videos_dt_abbr_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type abbreviated",
        help_text="",
    )
    document_subtype = models.ManyToManyField(
        "DocumentTypes",
        related_name='rvn_videos_document_subtype_documenttypes',
        blank=True,
        verbose_name="Document subtype",
        help_text="",
    )
    dst_abbr = models.ManyToManyField(
        "DocumentTypes",
        related_name='rvn_videos_dst_abbr_documenttypes',
        blank=True,
        verbose_name="Document subtype abbreviated",
        help_text="",
    )
    creation_date_original = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of original document",
        help_text="",
    )
    creation_date_archivalobject = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of archival object",
        help_text="",
    )
    file_extension_original = models.ForeignKey(
        SkosConcept,
        related_name='rvn_videos_file_extension_original_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of original document",
        help_text="",
    )
    file_extension_archivalobject = models.ForeignKey(
        SkosConcept,
        related_name='rvn_videos_file_extension_archivalobject_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension of archival object",
        help_text="",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of metadata",
        help_text="",
    )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_videos_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_videos_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original document",
        help_text="",
    )
    creator_archivalobject = models.ForeignKey(
        "Actor",
        related_name='rvn_videos_creator_archivalobject_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="creator of archival object",
        help_text="",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_videos_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_videos_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_videos_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="",
    )
    find_inventory_number = models.ForeignKey(
        "FindInventoryNumber",
        related_name='rvn_videos_find_inventory_number_findinventorynumber',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Find inventory number",
        help_text="",
    )
    excavation_object_id = models.ManyToManyField(
        "ExcavationObjectID",
        related_name='rvn_videos_excavation_object_id_excavationobjectid',
        blank=True,
        verbose_name="Excavation object ID",
        help_text="",
    )
    archaeological_object_id = models.ManyToManyField(
        "ArchaeologicalObjectID",
        related_name='rvn_videos_archaeological_object_id_archaeologicalobjectid',
        blank=True,
        verbose_name="Archaeological object ID",
        help_text="",
    )
    original_comment = models.TextField(
        blank=True,
        verbose_name="Comment on the original document",
        help_text="",
    )
    digitisation_comment = models.TextField(
        blank=True,
        verbose_name="Comment from digitisation",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Videos"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:videos_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:videos_create')

    def get_absolute_url(self):
        return reverse('archiv:videos_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:videos_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:videos_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:videos_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:videos_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:videos_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class WallpaintingInventory(models.Model):
    ### Digitised inventory of wallpaintings ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    document_type = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_wallpaintinginventory_document_type_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type",
        help_text="",
    )
    dt_abbr = models.ForeignKey(
        "DocumentTypes",
        related_name='rvn_wallpaintinginventory_dt_abbr_documenttypes',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Document type abbreviated",
        help_text="",
    )
    creation_date_original = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of original document",
        help_text="",
    )
    creation_date_scan = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of scan",
        help_text="",
    )
    file_extension = models.ForeignKey(
        SkosConcept,
        related_name='rvn_wallpaintinginventory_file_extension_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="File extension ",
        help_text="",
    )
    creation_date_metadata = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date of metadata",
        help_text="",
    )
    creator_metadata = models.ForeignKey(
        "Actor",
        related_name='rvn_wallpaintinginventory_creator_metadata_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of metadata",
        help_text="",
    )
    creator_original = models.ForeignKey(
        "Actor",
        related_name='rvn_wallpaintinginventory_creator_original_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of original ",
        help_text="",
    )
    copyright = models.ForeignKey(
        SkosConcept,
        related_name='rvn_wallpaintinginventory_copyright_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Copyright",
        help_text="",
    )
    access = models.ForeignKey(
        SkosConcept,
        related_name='rvn_wallpaintinginventory_access_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Access",
        help_text="",
    )
    site_id = models.ForeignKey(
        SkosConcept,
        related_name='rvn_wallpaintinginventory_site_id_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Site ID",
        help_text="",
    )
    equipment_scan = models.ForeignKey(
        SkosConcept,
        related_name='rvn_wallpaintinginventory_equipment_scan_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Equipment for scan",
        help_text="",
    )
    source_original_copy_edited_copy = models.ForeignKey(
        SkosConcept,
        related_name='rvn_wallpaintinginventory_source_original_copy_edited_copy_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Wheter source is a original or a copy",
        help_text="",
    )
    resolution_scan_dpi = models.IntegerField(
        blank=True, null=True,
        verbose_name="Scan resolution",
        help_text="",
    )
    creator_scan = models.ForeignKey(
        "Actor",
        related_name='rvn_wallpaintinginventory_creator_scan_actor',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Creator of scan",
        help_text="",
    )
    original_material = models.ForeignKey(
        SkosConcept,
        related_name='rvn_wallpaintinginventory_original_material_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Material of original document",
        help_text="",
    )
    excavation_post_excavation = models.ForeignKey(
        SkosConcept,
        related_name='rvn_wallpaintinginventory_excavation_post_excavation_skosconcept',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Whether it was created during excavation or after (post-excavation)",
        help_text="",
    )
    original_comment = models.TextField(
        blank=True,
        verbose_name="Comment on the original document",
        help_text="",
    )
    digitisation_comment = models.TextField(
        blank=True,
        verbose_name="Comment from digitisation",
        help_text="",
    )

    class Meta:

        ordering = [
            'id',
        ]
        verbose_name = "Freskeninventar"

    def __str__(self):
        return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:wallpaintinginventory_browse')

    @classmethod
    def get_createview_url(self):
        return reverse('archiv:wallpaintinginventory_create')

    def get_absolute_url(self):
        return reverse('archiv:wallpaintinginventory_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:wallpaintinginventory_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:wallpaintinginventory_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:wallpaintinginventory_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:wallpaintinginventory_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:wallpaintinginventory_detail',
                kwargs={'pk': prev.first().id}
            )
        return False
