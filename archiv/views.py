# generated by appcreator
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from django.urls import reverse, reverse_lazy
from django.views.generic.detail import DetailView
from django.views.generic.edit import DeleteView
from . filters import *
from . forms import *
from . tables import *
from . models import (
    Actor,
    ArchaeologicalObject4DPuzzleID,
    ArchaeologicalObjectID,
    ArchiveINF,
    AutoCAD,
    BoneInventoryNumber,
    ConvoluteInventoryNumber,
    Convolutecards,
    Datenbase,
    Document4DPuzzleID,
    DocumentTypes,
    ExcavationObjectID,
    ExcavationSeasons,
    Fielddrawing,
    Film,
    Filme,
    FindInventoryNumber,
    Finddrawing,
    Findsheets,
    Fotoborndigital,
    Fotosgescannt,
    Fundinventar4DPuzzleID,
    FundinventarInventarnummern,
    FundinventarKonvolutnummern,
    FundinventarMaterialproben,
    FundinventarSteininventar,
    GIS,
    Geophysics,
    Inventorybooks,
    PhasenID,
    Protocols,
    StratenID,
    TDInv4DPuzzleNUMMER,
    Tables,
    ThreeDimensionalModel,
    Videos,
    WallpaintingInventory
)
from browsing.browsing_utils import GenericListView, BaseCreateView, BaseUpdateView


class ActorListView(GenericListView):

    model = Actor
    filter_class = ActorListFilter
    formhelper_class = ActorFilterFormHelper
    table_class = ActorTable
    init_columns = [
        'id', 'name',
    ]


class ActorDetailView(DetailView):

    model = Actor
    template_name = 'browsing/generic_detail.html'


class ActorCreate(BaseCreateView):

    model = Actor
    form_class = ActorForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ActorCreate, self).dispatch(*args, **kwargs)


class ActorUpdate(BaseUpdateView):

    model = Actor
    form_class = ActorForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ActorUpdate, self).dispatch(*args, **kwargs)


class ActorDelete(DeleteView):
    model = Actor
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:actor_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ActorDelete, self).dispatch(*args, **kwargs)


class ArchaeologicalObject4DPuzzleIDListView(GenericListView):

    model = ArchaeologicalObject4DPuzzleID
    filter_class = ArchaeologicalObject4DPuzzleIDListFilter
    formhelper_class = ArchaeologicalObject4DPuzzleIDFilterFormHelper
    table_class = ArchaeologicalObject4DPuzzleIDTable
    init_columns = [
        'id', 'archaeological_object_id',
    ]


class ArchaeologicalObject4DPuzzleIDDetailView(DetailView):

    model = ArchaeologicalObject4DPuzzleID
    template_name = 'browsing/generic_detail.html'


class ArchaeologicalObject4DPuzzleIDCreate(BaseCreateView):

    model = ArchaeologicalObject4DPuzzleID
    form_class = ArchaeologicalObject4DPuzzleIDForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ArchaeologicalObject4DPuzzleIDCreate, self).dispatch(*args, **kwargs)


class ArchaeologicalObject4DPuzzleIDUpdate(BaseUpdateView):

    model = ArchaeologicalObject4DPuzzleID
    form_class = ArchaeologicalObject4DPuzzleIDForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ArchaeologicalObject4DPuzzleIDUpdate, self).dispatch(*args, **kwargs)


class ArchaeologicalObject4DPuzzleIDDelete(DeleteView):
    model = ArchaeologicalObject4DPuzzleID
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:archaeologicalobject4dpuzzleid_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ArchaeologicalObject4DPuzzleIDDelete, self).dispatch(*args, **kwargs)


class ArchaeologicalObjectIDListView(GenericListView):

    model = ArchaeologicalObjectID
    filter_class = ArchaeologicalObjectIDListFilter
    formhelper_class = ArchaeologicalObjectIDFilterFormHelper
    table_class = ArchaeologicalObjectIDTable
    init_columns = [
        'id', 'archaeological_object_id',
    ]


class ArchaeologicalObjectIDDetailView(DetailView):

    model = ArchaeologicalObjectID
    template_name = 'browsing/generic_detail.html'


class ArchaeologicalObjectIDCreate(BaseCreateView):

    model = ArchaeologicalObjectID
    form_class = ArchaeologicalObjectIDForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ArchaeologicalObjectIDCreate, self).dispatch(*args, **kwargs)


class ArchaeologicalObjectIDUpdate(BaseUpdateView):

    model = ArchaeologicalObjectID
    form_class = ArchaeologicalObjectIDForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ArchaeologicalObjectIDUpdate, self).dispatch(*args, **kwargs)


class ArchaeologicalObjectIDDelete(DeleteView):
    model = ArchaeologicalObjectID
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:archaeologicalobjectid_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ArchaeologicalObjectIDDelete, self).dispatch(*args, **kwargs)


class ArchiveINFListView(GenericListView):

    model = ArchiveINF
    filter_class = ArchiveINFListFilter
    formhelper_class = ArchiveINFFilterFormHelper
    table_class = ArchiveINFTable
    init_columns = [
        'id', 'filename',
    ]


class ArchiveINFDetailView(DetailView):

    model = ArchiveINF
    template_name = 'browsing/generic_detail.html'


class ArchiveINFCreate(BaseCreateView):

    model = ArchiveINF
    form_class = ArchiveINFForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ArchiveINFCreate, self).dispatch(*args, **kwargs)


class ArchiveINFUpdate(BaseUpdateView):

    model = ArchiveINF
    form_class = ArchiveINFForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ArchiveINFUpdate, self).dispatch(*args, **kwargs)


class ArchiveINFDelete(DeleteView):
    model = ArchiveINF
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:archiveinf_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ArchiveINFDelete, self).dispatch(*args, **kwargs)


class AutoCADListView(GenericListView):

    model = AutoCAD
    filter_class = AutoCADListFilter
    formhelper_class = AutoCADFilterFormHelper
    table_class = AutoCADTable
    init_columns = [
        'id', 'filename',
    ]


class AutoCADDetailView(DetailView):

    model = AutoCAD
    template_name = 'browsing/generic_detail.html'


class AutoCADCreate(BaseCreateView):

    model = AutoCAD
    form_class = AutoCADForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(AutoCADCreate, self).dispatch(*args, **kwargs)


class AutoCADUpdate(BaseUpdateView):

    model = AutoCAD
    form_class = AutoCADForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(AutoCADUpdate, self).dispatch(*args, **kwargs)


class AutoCADDelete(DeleteView):
    model = AutoCAD
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:autocad_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(AutoCADDelete, self).dispatch(*args, **kwargs)


class BoneInventoryNumberListView(GenericListView):

    model = BoneInventoryNumber
    filter_class = BoneInventoryNumberListFilter
    formhelper_class = BoneInventoryNumberFilterFormHelper
    table_class = BoneInventoryNumberTable
    init_columns = [
        'id',
    ]


class BoneInventoryNumberDetailView(DetailView):

    model = BoneInventoryNumber
    template_name = 'browsing/generic_detail.html'


class BoneInventoryNumberCreate(BaseCreateView):

    model = BoneInventoryNumber
    form_class = BoneInventoryNumberForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(BoneInventoryNumberCreate, self).dispatch(*args, **kwargs)


class BoneInventoryNumberUpdate(BaseUpdateView):

    model = BoneInventoryNumber
    form_class = BoneInventoryNumberForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(BoneInventoryNumberUpdate, self).dispatch(*args, **kwargs)


class BoneInventoryNumberDelete(DeleteView):
    model = BoneInventoryNumber
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:boneinventorynumber_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(BoneInventoryNumberDelete, self).dispatch(*args, **kwargs)


class ConvoluteInventoryNumberListView(GenericListView):

    model = ConvoluteInventoryNumber
    filter_class = ConvoluteInventoryNumberListFilter
    formhelper_class = ConvoluteInventoryNumberFilterFormHelper
    table_class = ConvoluteInventoryNumberTable
    init_columns = [
        'id',
    ]


class ConvoluteInventoryNumberDetailView(DetailView):

    model = ConvoluteInventoryNumber
    template_name = 'browsing/generic_detail.html'


class ConvoluteInventoryNumberCreate(BaseCreateView):

    model = ConvoluteInventoryNumber
    form_class = ConvoluteInventoryNumberForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ConvoluteInventoryNumberCreate, self).dispatch(*args, **kwargs)


class ConvoluteInventoryNumberUpdate(BaseUpdateView):

    model = ConvoluteInventoryNumber
    form_class = ConvoluteInventoryNumberForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ConvoluteInventoryNumberUpdate, self).dispatch(*args, **kwargs)


class ConvoluteInventoryNumberDelete(DeleteView):
    model = ConvoluteInventoryNumber
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:convoluteinventorynumber_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ConvoluteInventoryNumberDelete, self).dispatch(*args, **kwargs)


class ConvolutecardsListView(GenericListView):

    model = Convolutecards
    filter_class = ConvolutecardsListFilter
    formhelper_class = ConvolutecardsFilterFormHelper
    table_class = ConvolutecardsTable
    init_columns = [
        'id', 'filename_document_id',
    ]


class ConvolutecardsDetailView(DetailView):

    model = Convolutecards
    template_name = 'browsing/generic_detail.html'


class ConvolutecardsCreate(BaseCreateView):

    model = Convolutecards
    form_class = ConvolutecardsForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ConvolutecardsCreate, self).dispatch(*args, **kwargs)


class ConvolutecardsUpdate(BaseUpdateView):

    model = Convolutecards
    form_class = ConvolutecardsForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ConvolutecardsUpdate, self).dispatch(*args, **kwargs)


class ConvolutecardsDelete(DeleteView):
    model = Convolutecards
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:convolutecards_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ConvolutecardsDelete, self).dispatch(*args, **kwargs)


class DatenbaseListView(GenericListView):

    model = Datenbase
    filter_class = DatenbaseListFilter
    formhelper_class = DatenbaseFilterFormHelper
    table_class = DatenbaseTable
    init_columns = [
        'id', 'filename',
    ]


class DatenbaseDetailView(DetailView):

    model = Datenbase
    template_name = 'browsing/generic_detail.html'


class DatenbaseCreate(BaseCreateView):

    model = Datenbase
    form_class = DatenbaseForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(DatenbaseCreate, self).dispatch(*args, **kwargs)


class DatenbaseUpdate(BaseUpdateView):

    model = Datenbase
    form_class = DatenbaseForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(DatenbaseUpdate, self).dispatch(*args, **kwargs)


class DatenbaseDelete(DeleteView):
    model = Datenbase
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:datenbase_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(DatenbaseDelete, self).dispatch(*args, **kwargs)


class Document4DPuzzleIDListView(GenericListView):

    model = Document4DPuzzleID
    filter_class = Document4DPuzzleIDListFilter
    formhelper_class = Document4DPuzzleIDFilterFormHelper
    table_class = Document4DPuzzleIDTable
    init_columns = [
        'id', 'document_id',
    ]


class Document4DPuzzleIDDetailView(DetailView):

    model = Document4DPuzzleID
    template_name = 'browsing/generic_detail.html'


class Document4DPuzzleIDCreate(BaseCreateView):

    model = Document4DPuzzleID
    form_class = Document4DPuzzleIDForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(Document4DPuzzleIDCreate, self).dispatch(*args, **kwargs)


class Document4DPuzzleIDUpdate(BaseUpdateView):

    model = Document4DPuzzleID
    form_class = Document4DPuzzleIDForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(Document4DPuzzleIDUpdate, self).dispatch(*args, **kwargs)


class Document4DPuzzleIDDelete(DeleteView):
    model = Document4DPuzzleID
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:document4dpuzzleid_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(Document4DPuzzleIDDelete, self).dispatch(*args, **kwargs)


class DocumentTypesListView(GenericListView):

    model = DocumentTypes
    filter_class = DocumentTypesListFilter
    formhelper_class = DocumentTypesFilterFormHelper
    table_class = DocumentTypesTable
    init_columns = [
        'id', 'document_type + document_subtype',
    ]


class DocumentTypesDetailView(DetailView):

    model = DocumentTypes
    template_name = 'browsing/generic_detail.html'


class DocumentTypesCreate(BaseCreateView):

    model = DocumentTypes
    form_class = DocumentTypesForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(DocumentTypesCreate, self).dispatch(*args, **kwargs)


class DocumentTypesUpdate(BaseUpdateView):

    model = DocumentTypes
    form_class = DocumentTypesForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(DocumentTypesUpdate, self).dispatch(*args, **kwargs)


class DocumentTypesDelete(DeleteView):
    model = DocumentTypes
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:documenttypes_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(DocumentTypesDelete, self).dispatch(*args, **kwargs)


class ExcavationObjectIDListView(GenericListView):

    model = ExcavationObjectID
    filter_class = ExcavationObjectIDListFilter
    formhelper_class = ExcavationObjectIDFilterFormHelper
    table_class = ExcavationObjectIDTable
    init_columns = [
        'id', 'excavation_object_id',
    ]


class ExcavationObjectIDDetailView(DetailView):

    model = ExcavationObjectID
    template_name = 'browsing/generic_detail.html'


class ExcavationObjectIDCreate(BaseCreateView):

    model = ExcavationObjectID
    form_class = ExcavationObjectIDForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ExcavationObjectIDCreate, self).dispatch(*args, **kwargs)


class ExcavationObjectIDUpdate(BaseUpdateView):

    model = ExcavationObjectID
    form_class = ExcavationObjectIDForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ExcavationObjectIDUpdate, self).dispatch(*args, **kwargs)


class ExcavationObjectIDDelete(DeleteView):
    model = ExcavationObjectID
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:excavationobjectid_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ExcavationObjectIDDelete, self).dispatch(*args, **kwargs)


class ExcavationSeasonsListView(GenericListView):

    model = ExcavationSeasons
    filter_class = ExcavationSeasonsListFilter
    formhelper_class = ExcavationSeasonsFilterFormHelper
    table_class = ExcavationSeasonsTable
    init_columns = [
        'id', 'grabungskampagnen',
    ]


class ExcavationSeasonsDetailView(DetailView):

    model = ExcavationSeasons
    template_name = 'browsing/generic_detail.html'


class ExcavationSeasonsCreate(BaseCreateView):

    model = ExcavationSeasons
    form_class = ExcavationSeasonsForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ExcavationSeasonsCreate, self).dispatch(*args, **kwargs)


class ExcavationSeasonsUpdate(BaseUpdateView):

    model = ExcavationSeasons
    form_class = ExcavationSeasonsForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ExcavationSeasonsUpdate, self).dispatch(*args, **kwargs)


class ExcavationSeasonsDelete(DeleteView):
    model = ExcavationSeasons
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:excavationseasons_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ExcavationSeasonsDelete, self).dispatch(*args, **kwargs)


class FielddrawingListView(GenericListView):

    model = Fielddrawing
    filter_class = FielddrawingListFilter
    formhelper_class = FielddrawingFilterFormHelper
    table_class = FielddrawingTable
    init_columns = [
        'id', 'filename',
    ]


class FielddrawingDetailView(DetailView):

    model = Fielddrawing
    template_name = 'browsing/generic_detail.html'


class FielddrawingCreate(BaseCreateView):

    model = Fielddrawing
    form_class = FielddrawingForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FielddrawingCreate, self).dispatch(*args, **kwargs)


class FielddrawingUpdate(BaseUpdateView):

    model = Fielddrawing
    form_class = FielddrawingForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FielddrawingUpdate, self).dispatch(*args, **kwargs)


class FielddrawingDelete(DeleteView):
    model = Fielddrawing
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:fielddrawing_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FielddrawingDelete, self).dispatch(*args, **kwargs)


class FilmListView(GenericListView):

    model = Film
    filter_class = FilmListFilter
    formhelper_class = FilmFilterFormHelper
    table_class = FilmTable
    init_columns = [
        'id', 'film_id',
    ]


class FilmDetailView(DetailView):

    model = Film
    template_name = 'browsing/generic_detail.html'


class FilmCreate(BaseCreateView):

    model = Film
    form_class = FilmForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FilmCreate, self).dispatch(*args, **kwargs)


class FilmUpdate(BaseUpdateView):

    model = Film
    form_class = FilmForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FilmUpdate, self).dispatch(*args, **kwargs)


class FilmDelete(DeleteView):
    model = Film
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:film_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FilmDelete, self).dispatch(*args, **kwargs)


class FilmeListView(GenericListView):

    model = Filme
    filter_class = FilmeListFilter
    formhelper_class = FilmeFilterFormHelper
    table_class = FilmeTable
    init_columns = [
        'id',
    ]


class FilmeDetailView(DetailView):

    model = Filme
    template_name = 'browsing/generic_detail.html'


class FilmeCreate(BaseCreateView):

    model = Filme
    form_class = FilmeForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FilmeCreate, self).dispatch(*args, **kwargs)


class FilmeUpdate(BaseUpdateView):

    model = Filme
    form_class = FilmeForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FilmeUpdate, self).dispatch(*args, **kwargs)


class FilmeDelete(DeleteView):
    model = Filme
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:filme_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FilmeDelete, self).dispatch(*args, **kwargs)


class FindInventoryNumberListView(GenericListView):

    model = FindInventoryNumber
    filter_class = FindInventoryNumberListFilter
    formhelper_class = FindInventoryNumberFilterFormHelper
    table_class = FindInventoryNumberTable
    init_columns = [
        'id',
    ]


class FindInventoryNumberDetailView(DetailView):

    model = FindInventoryNumber
    template_name = 'browsing/generic_detail.html'


class FindInventoryNumberCreate(BaseCreateView):

    model = FindInventoryNumber
    form_class = FindInventoryNumberForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FindInventoryNumberCreate, self).dispatch(*args, **kwargs)


class FindInventoryNumberUpdate(BaseUpdateView):

    model = FindInventoryNumber
    form_class = FindInventoryNumberForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FindInventoryNumberUpdate, self).dispatch(*args, **kwargs)


class FindInventoryNumberDelete(DeleteView):
    model = FindInventoryNumber
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:findinventorynumber_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FindInventoryNumberDelete, self).dispatch(*args, **kwargs)


class FinddrawingListView(GenericListView):

    model = Finddrawing
    filter_class = FinddrawingListFilter
    formhelper_class = FinddrawingFilterFormHelper
    table_class = FinddrawingTable
    init_columns = [
        'id', 'filename',
    ]


class FinddrawingDetailView(DetailView):

    model = Finddrawing
    template_name = 'browsing/generic_detail.html'


class FinddrawingCreate(BaseCreateView):

    model = Finddrawing
    form_class = FinddrawingForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FinddrawingCreate, self).dispatch(*args, **kwargs)


class FinddrawingUpdate(BaseUpdateView):

    model = Finddrawing
    form_class = FinddrawingForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FinddrawingUpdate, self).dispatch(*args, **kwargs)


class FinddrawingDelete(DeleteView):
    model = Finddrawing
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:finddrawing_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FinddrawingDelete, self).dispatch(*args, **kwargs)


class FindsheetsListView(GenericListView):

    model = Findsheets
    filter_class = FindsheetsListFilter
    formhelper_class = FindsheetsFilterFormHelper
    table_class = FindsheetsTable
    init_columns = [
        'id', 'filename',
    ]


class FindsheetsDetailView(DetailView):

    model = Findsheets
    template_name = 'browsing/generic_detail.html'


class FindsheetsCreate(BaseCreateView):

    model = Findsheets
    form_class = FindsheetsForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FindsheetsCreate, self).dispatch(*args, **kwargs)


class FindsheetsUpdate(BaseUpdateView):

    model = Findsheets
    form_class = FindsheetsForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FindsheetsUpdate, self).dispatch(*args, **kwargs)


class FindsheetsDelete(DeleteView):
    model = Findsheets
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:findsheets_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FindsheetsDelete, self).dispatch(*args, **kwargs)


class FotoborndigitalListView(GenericListView):

    model = Fotoborndigital
    filter_class = FotoborndigitalListFilter
    formhelper_class = FotoborndigitalFilterFormHelper
    table_class = FotoborndigitalTable
    init_columns = [
        'id', 'folder_name',
    ]


class FotoborndigitalDetailView(DetailView):

    model = Fotoborndigital
    template_name = 'browsing/generic_detail.html'


class FotoborndigitalCreate(BaseCreateView):

    model = Fotoborndigital
    form_class = FotoborndigitalForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FotoborndigitalCreate, self).dispatch(*args, **kwargs)


class FotoborndigitalUpdate(BaseUpdateView):

    model = Fotoborndigital
    form_class = FotoborndigitalForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FotoborndigitalUpdate, self).dispatch(*args, **kwargs)


class FotoborndigitalDelete(DeleteView):
    model = Fotoborndigital
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:fotoborndigital_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FotoborndigitalDelete, self).dispatch(*args, **kwargs)


class FotosgescanntListView(GenericListView):

    model = Fotosgescannt
    filter_class = FotosgescanntListFilter
    formhelper_class = FotosgescanntFilterFormHelper
    table_class = FotosgescanntTable
    init_columns = [
        'id', 'filename',
    ]


class FotosgescanntDetailView(DetailView):

    model = Fotosgescannt
    template_name = 'browsing/generic_detail.html'


class FotosgescanntCreate(BaseCreateView):

    model = Fotosgescannt
    form_class = FotosgescanntForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FotosgescanntCreate, self).dispatch(*args, **kwargs)


class FotosgescanntUpdate(BaseUpdateView):

    model = Fotosgescannt
    form_class = FotosgescanntForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FotosgescanntUpdate, self).dispatch(*args, **kwargs)


class FotosgescanntDelete(DeleteView):
    model = Fotosgescannt
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:fotosgescannt_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FotosgescanntDelete, self).dispatch(*args, **kwargs)


class Fundinventar4DPuzzleIDListView(GenericListView):

    model = Fundinventar4DPuzzleID
    filter_class = Fundinventar4DPuzzleIDListFilter
    formhelper_class = Fundinventar4DPuzzleIDFilterFormHelper
    table_class = Fundinventar4DPuzzleIDTable
    init_columns = [
        'id', 'find_inventory_4dpuzzle_number',
    ]


class Fundinventar4DPuzzleIDDetailView(DetailView):

    model = Fundinventar4DPuzzleID
    template_name = 'browsing/generic_detail.html'


class Fundinventar4DPuzzleIDCreate(BaseCreateView):

    model = Fundinventar4DPuzzleID
    form_class = Fundinventar4DPuzzleIDForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(Fundinventar4DPuzzleIDCreate, self).dispatch(*args, **kwargs)


class Fundinventar4DPuzzleIDUpdate(BaseUpdateView):

    model = Fundinventar4DPuzzleID
    form_class = Fundinventar4DPuzzleIDForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(Fundinventar4DPuzzleIDUpdate, self).dispatch(*args, **kwargs)


class Fundinventar4DPuzzleIDDelete(DeleteView):
    model = Fundinventar4DPuzzleID
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:fundinventar4dpuzzleid_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(Fundinventar4DPuzzleIDDelete, self).dispatch(*args, **kwargs)


class FundinventarInventarnummernListView(GenericListView):

    model = FundinventarInventarnummern
    filter_class = FundinventarInventarnummernListFilter
    formhelper_class = FundinventarInventarnummernFilterFormHelper
    table_class = FundinventarInventarnummernTable
    init_columns = [
        'id', 'find_inventory_number',
    ]


class FundinventarInventarnummernDetailView(DetailView):

    model = FundinventarInventarnummern
    template_name = 'browsing/generic_detail.html'


class FundinventarInventarnummernCreate(BaseCreateView):

    model = FundinventarInventarnummern
    form_class = FundinventarInventarnummernForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FundinventarInventarnummernCreate, self).dispatch(*args, **kwargs)


class FundinventarInventarnummernUpdate(BaseUpdateView):

    model = FundinventarInventarnummern
    form_class = FundinventarInventarnummernForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FundinventarInventarnummernUpdate, self).dispatch(*args, **kwargs)


class FundinventarInventarnummernDelete(DeleteView):
    model = FundinventarInventarnummern
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:fundinventarinventarnummern_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FundinventarInventarnummernDelete, self).dispatch(*args, **kwargs)


class FundinventarKonvolutnummernListView(GenericListView):

    model = FundinventarKonvolutnummern
    filter_class = FundinventarKonvolutnummernListFilter
    formhelper_class = FundinventarKonvolutnummernFilterFormHelper
    table_class = FundinventarKonvolutnummernTable
    init_columns = [
        'id', 'convolute_inventory_number',
    ]


class FundinventarKonvolutnummernDetailView(DetailView):

    model = FundinventarKonvolutnummern
    template_name = 'browsing/generic_detail.html'


class FundinventarKonvolutnummernCreate(BaseCreateView):

    model = FundinventarKonvolutnummern
    form_class = FundinventarKonvolutnummernForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FundinventarKonvolutnummernCreate, self).dispatch(*args, **kwargs)


class FundinventarKonvolutnummernUpdate(BaseUpdateView):

    model = FundinventarKonvolutnummern
    form_class = FundinventarKonvolutnummernForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FundinventarKonvolutnummernUpdate, self).dispatch(*args, **kwargs)


class FundinventarKonvolutnummernDelete(DeleteView):
    model = FundinventarKonvolutnummern
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:fundinventarkonvolutnummern_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FundinventarKonvolutnummernDelete, self).dispatch(*args, **kwargs)


class FundinventarMaterialprobenListView(GenericListView):

    model = FundinventarMaterialproben
    filter_class = FundinventarMaterialprobenListFilter
    formhelper_class = FundinventarMaterialprobenFilterFormHelper
    table_class = FundinventarMaterialprobenTable
    init_columns = [
        'id', 'material_sample_inventory_number',
    ]


class FundinventarMaterialprobenDetailView(DetailView):

    model = FundinventarMaterialproben
    template_name = 'browsing/generic_detail.html'


class FundinventarMaterialprobenCreate(BaseCreateView):

    model = FundinventarMaterialproben
    form_class = FundinventarMaterialprobenForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FundinventarMaterialprobenCreate, self).dispatch(*args, **kwargs)


class FundinventarMaterialprobenUpdate(BaseUpdateView):

    model = FundinventarMaterialproben
    form_class = FundinventarMaterialprobenForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FundinventarMaterialprobenUpdate, self).dispatch(*args, **kwargs)


class FundinventarMaterialprobenDelete(DeleteView):
    model = FundinventarMaterialproben
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:fundinventarmaterialproben_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FundinventarMaterialprobenDelete, self).dispatch(*args, **kwargs)


class FundinventarSteininventarListView(GenericListView):

    model = FundinventarSteininventar
    filter_class = FundinventarSteininventarListFilter
    formhelper_class = FundinventarSteininventarFilterFormHelper
    table_class = FundinventarSteininventarTable
    init_columns = [
        'id', 'find_inventory_number',
    ]


class FundinventarSteininventarDetailView(DetailView):

    model = FundinventarSteininventar
    template_name = 'browsing/generic_detail.html'


class FundinventarSteininventarCreate(BaseCreateView):

    model = FundinventarSteininventar
    form_class = FundinventarSteininventarForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FundinventarSteininventarCreate, self).dispatch(*args, **kwargs)


class FundinventarSteininventarUpdate(BaseUpdateView):

    model = FundinventarSteininventar
    form_class = FundinventarSteininventarForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FundinventarSteininventarUpdate, self).dispatch(*args, **kwargs)


class FundinventarSteininventarDelete(DeleteView):
    model = FundinventarSteininventar
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:fundinventarsteininventar_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(FundinventarSteininventarDelete, self).dispatch(*args, **kwargs)


class GISListView(GenericListView):

    model = GIS
    filter_class = GISListFilter
    formhelper_class = GISFilterFormHelper
    table_class = GISTable
    init_columns = [
        'id', 'filename',
    ]


class GISDetailView(DetailView):

    model = GIS
    template_name = 'browsing/generic_detail.html'


class GISCreate(BaseCreateView):

    model = GIS
    form_class = GISForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(GISCreate, self).dispatch(*args, **kwargs)


class GISUpdate(BaseUpdateView):

    model = GIS
    form_class = GISForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(GISUpdate, self).dispatch(*args, **kwargs)


class GISDelete(DeleteView):
    model = GIS
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:gis_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(GISDelete, self).dispatch(*args, **kwargs)


class GeophysicsListView(GenericListView):

    model = Geophysics
    filter_class = GeophysicsListFilter
    formhelper_class = GeophysicsFilterFormHelper
    table_class = GeophysicsTable
    init_columns = [
        'id', 'filename',
    ]


class GeophysicsDetailView(DetailView):

    model = Geophysics
    template_name = 'browsing/generic_detail.html'


class GeophysicsCreate(BaseCreateView):

    model = Geophysics
    form_class = GeophysicsForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(GeophysicsCreate, self).dispatch(*args, **kwargs)


class GeophysicsUpdate(BaseUpdateView):

    model = Geophysics
    form_class = GeophysicsForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(GeophysicsUpdate, self).dispatch(*args, **kwargs)


class GeophysicsDelete(DeleteView):
    model = Geophysics
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:geophysics_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(GeophysicsDelete, self).dispatch(*args, **kwargs)


class InventorybooksListView(GenericListView):

    model = Inventorybooks
    filter_class = InventorybooksListFilter
    formhelper_class = InventorybooksFilterFormHelper
    table_class = InventorybooksTable
    init_columns = [
        'id', 'filename',
    ]


class InventorybooksDetailView(DetailView):

    model = Inventorybooks
    template_name = 'browsing/generic_detail.html'


class InventorybooksCreate(BaseCreateView):

    model = Inventorybooks
    form_class = InventorybooksForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(InventorybooksCreate, self).dispatch(*args, **kwargs)


class InventorybooksUpdate(BaseUpdateView):

    model = Inventorybooks
    form_class = InventorybooksForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(InventorybooksUpdate, self).dispatch(*args, **kwargs)


class InventorybooksDelete(DeleteView):
    model = Inventorybooks
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:inventorybooks_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(InventorybooksDelete, self).dispatch(*args, **kwargs)


class PhasenIDListView(GenericListView):

    model = PhasenID
    filter_class = PhasenIDListFilter
    formhelper_class = PhasenIDFilterFormHelper
    table_class = PhasenIDTable
    init_columns = [
        'id',
    ]


class PhasenIDDetailView(DetailView):

    model = PhasenID
    template_name = 'browsing/generic_detail.html'


class PhasenIDCreate(BaseCreateView):

    model = PhasenID
    form_class = PhasenIDForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(PhasenIDCreate, self).dispatch(*args, **kwargs)


class PhasenIDUpdate(BaseUpdateView):

    model = PhasenID
    form_class = PhasenIDForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(PhasenIDUpdate, self).dispatch(*args, **kwargs)


class PhasenIDDelete(DeleteView):
    model = PhasenID
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:phasenid_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(PhasenIDDelete, self).dispatch(*args, **kwargs)


class ProtocolsListView(GenericListView):

    model = Protocols
    filter_class = ProtocolsListFilter
    formhelper_class = ProtocolsFilterFormHelper
    table_class = ProtocolsTable
    init_columns = [
        'id', 'filename',
    ]


class ProtocolsDetailView(DetailView):

    model = Protocols
    template_name = 'browsing/generic_detail.html'


class ProtocolsCreate(BaseCreateView):

    model = Protocols
    form_class = ProtocolsForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ProtocolsCreate, self).dispatch(*args, **kwargs)


class ProtocolsUpdate(BaseUpdateView):

    model = Protocols
    form_class = ProtocolsForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ProtocolsUpdate, self).dispatch(*args, **kwargs)


class ProtocolsDelete(DeleteView):
    model = Protocols
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:protocols_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ProtocolsDelete, self).dispatch(*args, **kwargs)


class StratenIDListView(GenericListView):

    model = StratenID
    filter_class = StratenIDListFilter
    formhelper_class = StratenIDFilterFormHelper
    table_class = StratenIDTable
    init_columns = [
        'id',
    ]


class StratenIDDetailView(DetailView):

    model = StratenID
    template_name = 'browsing/generic_detail.html'


class StratenIDCreate(BaseCreateView):

    model = StratenID
    form_class = StratenIDForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(StratenIDCreate, self).dispatch(*args, **kwargs)


class StratenIDUpdate(BaseUpdateView):

    model = StratenID
    form_class = StratenIDForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(StratenIDUpdate, self).dispatch(*args, **kwargs)


class StratenIDDelete(DeleteView):
    model = StratenID
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:stratenid_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(StratenIDDelete, self).dispatch(*args, **kwargs)


class TDInv4DPuzzleNUMMERListView(GenericListView):

    model = TDInv4DPuzzleNUMMER
    filter_class = TDInv4DPuzzleNUMMERListFilter
    formhelper_class = TDInv4DPuzzleNUMMERFilterFormHelper
    table_class = TDInv4DPuzzleNUMMERTable
    init_columns = [
        'id',
    ]


class TDInv4DPuzzleNUMMERDetailView(DetailView):

    model = TDInv4DPuzzleNUMMER
    template_name = 'browsing/generic_detail.html'


class TDInv4DPuzzleNUMMERCreate(BaseCreateView):

    model = TDInv4DPuzzleNUMMER
    form_class = TDInv4DPuzzleNUMMERForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(TDInv4DPuzzleNUMMERCreate, self).dispatch(*args, **kwargs)


class TDInv4DPuzzleNUMMERUpdate(BaseUpdateView):

    model = TDInv4DPuzzleNUMMER
    form_class = TDInv4DPuzzleNUMMERForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(TDInv4DPuzzleNUMMERUpdate, self).dispatch(*args, **kwargs)


class TDInv4DPuzzleNUMMERDelete(DeleteView):
    model = TDInv4DPuzzleNUMMER
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:tdinv4dpuzzlenummer_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(TDInv4DPuzzleNUMMERDelete, self).dispatch(*args, **kwargs)


class TablesListView(GenericListView):

    model = Tables
    filter_class = TablesListFilter
    formhelper_class = TablesFilterFormHelper
    table_class = TablesTable
    init_columns = [
        'id', 'filename',
    ]


class TablesDetailView(DetailView):

    model = Tables
    template_name = 'browsing/generic_detail.html'


class TablesCreate(BaseCreateView):

    model = Tables
    form_class = TablesForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(TablesCreate, self).dispatch(*args, **kwargs)


class TablesUpdate(BaseUpdateView):

    model = Tables
    form_class = TablesForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(TablesUpdate, self).dispatch(*args, **kwargs)


class TablesDelete(DeleteView):
    model = Tables
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:tables_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(TablesDelete, self).dispatch(*args, **kwargs)


class ThreeDimensionalModelListView(GenericListView):

    model = ThreeDimensionalModel
    filter_class = ThreeDimensionalModelListFilter
    formhelper_class = ThreeDimensionalModelFilterFormHelper
    table_class = ThreeDimensionalModelTable
    init_columns = [
        'id', 'filename',
    ]


class ThreeDimensionalModelDetailView(DetailView):

    model = ThreeDimensionalModel
    template_name = 'browsing/generic_detail.html'


class ThreeDimensionalModelCreate(BaseCreateView):

    model = ThreeDimensionalModel
    form_class = ThreeDimensionalModelForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ThreeDimensionalModelCreate, self).dispatch(*args, **kwargs)


class ThreeDimensionalModelUpdate(BaseUpdateView):

    model = ThreeDimensionalModel
    form_class = ThreeDimensionalModelForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ThreeDimensionalModelUpdate, self).dispatch(*args, **kwargs)


class ThreeDimensionalModelDelete(DeleteView):
    model = ThreeDimensionalModel
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:threedimensionalmodel_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ThreeDimensionalModelDelete, self).dispatch(*args, **kwargs)


class VideosListView(GenericListView):

    model = Videos
    filter_class = VideosListFilter
    formhelper_class = VideosFilterFormHelper
    table_class = VideosTable
    init_columns = [
        'id', 'filename',
    ]


class VideosDetailView(DetailView):

    model = Videos
    template_name = 'browsing/generic_detail.html'


class VideosCreate(BaseCreateView):

    model = Videos
    form_class = VideosForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(VideosCreate, self).dispatch(*args, **kwargs)


class VideosUpdate(BaseUpdateView):

    model = Videos
    form_class = VideosForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(VideosUpdate, self).dispatch(*args, **kwargs)


class VideosDelete(DeleteView):
    model = Videos
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:videos_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(VideosDelete, self).dispatch(*args, **kwargs)


class WallpaintingInventoryListView(GenericListView):

    model = WallpaintingInventory
    filter_class = WallpaintingInventoryListFilter
    formhelper_class = WallpaintingInventoryFilterFormHelper
    table_class = WallpaintingInventoryTable
    init_columns = [
        'id', 'filename',
    ]


class WallpaintingInventoryDetailView(DetailView):

    model = WallpaintingInventory
    template_name = 'browsing/generic_detail.html'


class WallpaintingInventoryCreate(BaseCreateView):

    model = WallpaintingInventory
    form_class = WallpaintingInventoryForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(WallpaintingInventoryCreate, self).dispatch(*args, **kwargs)


class WallpaintingInventoryUpdate(BaseUpdateView):

    model = WallpaintingInventory
    form_class = WallpaintingInventoryForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(WallpaintingInventoryUpdate, self).dispatch(*args, **kwargs)


class WallpaintingInventoryDelete(DeleteView):
    model = WallpaintingInventory
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:wallpaintinginventory_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(WallpaintingInventoryDelete, self).dispatch(*args, **kwargs)
