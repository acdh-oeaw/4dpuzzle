# generated by appcreator
import django_filters
from django import forms
from . models import (
    Actor,
    ArchaeologicalObject4DPuzzleID,
    ArchaeologicalObjectID,
    ArchiveINF,
    AutoCAD,
    Convolutecards,
    Datenbase,
    Document4DPuzzleID,
    DocumentTypes,
    ExcavationObjectID,
    ExcavationSeasons,
    Fielddrawing,
    Film,
    Finddrawing,
    Findsheets,
    Fotoborndigital,
    Fotosgescannt,
    Fundinventar4DPuzzleID,
    FundinventarInventarnummern,
    FundinventarKonvolutnummern,
    FundinventarMaterialproben,
    FundinventarSteininventar,
    GIS,
    Geophysics,
    Inventorybooks,
    PhasenID,
    Protocols,
    StratenID,
    Tables,
    ThreeDimensionalModel,
    Videos,
    WallpaintingInventory
)


class ActorListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Actor._meta.get_field('legacy_id').help_text,
        label=Actor._meta.get_field('legacy_id').verbose_name
    )
    name = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Actor._meta.get_field('name').help_text,
        label=Actor._meta.get_field('name').verbose_name
    )
    drawer_monogram = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Actor._meta.get_field('drawer_monogram').help_text,
        label=Actor._meta.get_field('drawer_monogram').verbose_name
    )
    excavation = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Actor._meta.get_field('excavation').help_text,
        label=Actor._meta.get_field('excavation').verbose_name
    )
    xx_4dpuzzle = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Actor._meta.get_field('xx_4dpuzzle').help_text,
        label=Actor._meta.get_field('xx_4dpuzzle').verbose_name
    )
    year = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Actor._meta.get_field('year').help_text,
        label=Actor._meta.get_field('year').verbose_name
    )

    class Meta:
        model = Actor
        fields = [
            'id',
            'legacy_id',
            'name',
            'drawer_monogram',
            'excavation',
            'xx_4dpuzzle',
            'year',
            'access',
            ]


class ArchaeologicalObject4DPuzzleIDListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ArchaeologicalObject4DPuzzleID._meta.get_field('legacy_id').help_text,
        label=ArchaeologicalObject4DPuzzleID._meta.get_field('legacy_id').verbose_name
    )
    archaeological_object_4dpuzzle_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ArchaeologicalObject4DPuzzleID._meta.get_field('archaeological_object_4dpuzzle_id').help_text,
        label=ArchaeologicalObject4DPuzzleID._meta.get_field('archaeological_object_4dpuzzle_id').verbose_name
    )
    archaeological_object_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ArchaeologicalObject4DPuzzleID._meta.get_field('archaeological_object_comment').help_text,
        label=ArchaeologicalObject4DPuzzleID._meta.get_field('archaeological_object_comment').verbose_name
    )
    position = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ArchaeologicalObject4DPuzzleID._meta.get_field('position').help_text,
        label=ArchaeologicalObject4DPuzzleID._meta.get_field('position').verbose_name
    )
    stratum_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ArchaeologicalObject4DPuzzleID._meta.get_field('stratum_comment').help_text,
        label=ArchaeologicalObject4DPuzzleID._meta.get_field('stratum_comment').verbose_name
    )
    digitisation_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ArchaeologicalObject4DPuzzleID._meta.get_field('digitisation_comment').help_text,
        label=ArchaeologicalObject4DPuzzleID._meta.get_field('digitisation_comment').verbose_name
    )

    class Meta:
        model = ArchaeologicalObject4DPuzzleID
        fields = [
            'id',
            'legacy_id',
            'archaeological_object_id',
            'archaeological_object_4dpuzzle_id',
            'archaeological_object_type',
            'archaeological_object_comment',
            'excavation_object_id',
            'position',
            'stratum_id_relative',
            'stratum_id_absolute_prepub',
            'stratum_comment',
            'phase_id',
            'creator_metadata',
            'digitisation_comment',
            ]


class ArchaeologicalObjectIDListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ArchaeologicalObjectID._meta.get_field('legacy_id').help_text,
        label=ArchaeologicalObjectID._meta.get_field('legacy_id').verbose_name
    )
    archaeological_object_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ArchaeologicalObjectID._meta.get_field('archaeological_object_id').help_text,
        label=ArchaeologicalObjectID._meta.get_field('archaeological_object_id').verbose_name
    )
    archaeological_object_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ArchaeologicalObjectID._meta.get_field('archaeological_object_comment').help_text,
        label=ArchaeologicalObjectID._meta.get_field('archaeological_object_comment').verbose_name
    )
    position = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ArchaeologicalObjectID._meta.get_field('position').help_text,
        label=ArchaeologicalObjectID._meta.get_field('position').verbose_name
    )
    stratum_id_relative = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ArchaeologicalObjectID._meta.get_field('stratum_id_relative').help_text,
        label=ArchaeologicalObjectID._meta.get_field('stratum_id_relative').verbose_name
    )
    stratum_id_absolute_prepub = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ArchaeologicalObjectID._meta.get_field('stratum_id_absolute_prepub').help_text,
        label=ArchaeologicalObjectID._meta.get_field('stratum_id_absolute_prepub').verbose_name
    )
    stratum_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ArchaeologicalObjectID._meta.get_field('stratum_comment').help_text,
        label=ArchaeologicalObjectID._meta.get_field('stratum_comment').verbose_name
    )
    phase_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ArchaeologicalObjectID._meta.get_field('phase_id').help_text,
        label=ArchaeologicalObjectID._meta.get_field('phase_id').verbose_name
    )
    relatedto = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ArchaeologicalObjectID._meta.get_field('relatedto').help_text,
        label=ArchaeologicalObjectID._meta.get_field('relatedto').verbose_name
    )
    digitisation_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ArchaeologicalObjectID._meta.get_field('digitisation_comment').help_text,
        label=ArchaeologicalObjectID._meta.get_field('digitisation_comment').verbose_name
    )

    class Meta:
        model = ArchaeologicalObjectID
        fields = [
            'id',
            'legacy_id',
            'archaeological_object_id',
            'archaeological_object_type',
            'archaeological_object_comment',
            'excavation_object_id',
            'position',
            'stratum_id_relative',
            'stratum_id_absolute_prepub',
            'stratum_comment',
            'phase_id',
            'corresponding_to_archaeological_object_id',
            'relatedto',
            'creator_metadata',
            'digitisation_comment',
            ]


class ArchiveINFListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ArchiveINF._meta.get_field('legacy_id').help_text,
        label=ArchiveINF._meta.get_field('legacy_id').verbose_name
    )
    filename = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ArchiveINF._meta.get_field('filename').help_text,
        label=ArchiveINF._meta.get_field('filename').verbose_name
    )
    document_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ArchiveINF._meta.get_field('document_id').help_text,
        label=ArchiveINF._meta.get_field('document_id').verbose_name
    )
    document_title = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ArchiveINF._meta.get_field('document_title').help_text,
        label=ArchiveINF._meta.get_field('document_title').verbose_name
    )
    creation_year_original = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ArchiveINF._meta.get_field('creation_year_original').help_text,
        label=ArchiveINF._meta.get_field('creation_year_original').verbose_name
    )
    comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ArchiveINF._meta.get_field('comment').help_text,
        label=ArchiveINF._meta.get_field('comment').verbose_name
    )

    class Meta:
        model = ArchiveINF
        fields = [
            'id',
            'legacy_id',
            'filename',
            'document_id',
            'document_title',
            'document_type',
            'dt_abbr',
            'relatedto',
            'creation_year_original',
            'creation_date_archivalobject',
            'file_extension_archivalobject',
            'creation_date_metadata',
            'creator_metadata',
            'creator_original',
            'copyright',
            'access',
            'site_id',
            'creator_archivalobject',
            'comment',
            ]


class AutoCADListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=AutoCAD._meta.get_field('legacy_id').help_text,
        label=AutoCAD._meta.get_field('legacy_id').verbose_name
    )
    filename = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=AutoCAD._meta.get_field('filename').help_text,
        label=AutoCAD._meta.get_field('filename').verbose_name
    )
    document_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=AutoCAD._meta.get_field('document_id').help_text,
        label=AutoCAD._meta.get_field('document_id').verbose_name
    )
    document_title = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=AutoCAD._meta.get_field('document_title').help_text,
        label=AutoCAD._meta.get_field('document_title').verbose_name
    )
    path_filename_old = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=AutoCAD._meta.get_field('path_filename_old').help_text,
        label=AutoCAD._meta.get_field('path_filename_old').verbose_name
    )
    path_filename_arche = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=AutoCAD._meta.get_field('path_filename_arche').help_text,
        label=AutoCAD._meta.get_field('path_filename_arche').verbose_name
    )
    creation_year_original = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=AutoCAD._meta.get_field('creation_year_original').help_text,
        label=AutoCAD._meta.get_field('creation_year_original').verbose_name
    )
    relatedto = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=AutoCAD._meta.get_field('relatedto').help_text,
        label=AutoCAD._meta.get_field('relatedto').verbose_name
    )
    original_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=AutoCAD._meta.get_field('original_comment').help_text,
        label=AutoCAD._meta.get_field('original_comment').verbose_name
    )
    digitisation_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=AutoCAD._meta.get_field('digitisation_comment').help_text,
        label=AutoCAD._meta.get_field('digitisation_comment').verbose_name
    )

    class Meta:
        model = AutoCAD
        fields = [
            'id',
            'legacy_id',
            'filename',
            'document_id',
            'document_title',
            'path_filename_old',
            'path_filename_arche',
            'document_type',
            'dt_abbr',
            'document_subtype',
            'dst_abbr',
            'creation_year_original',
            'creation_date_archivalobject',
            'file_extension_original',
            'file_extension_archivalobject',
            'creation_date_metadata',
            'creator_metadata',
            'creator_original',
            'copyright',
            'access',
            'site_id',
            'creator_archivalobject',
            'excavation_object_id',
            'archaeological_object_id',
            'relatedto',
            'excavation_post_excavation',
            'original_comment',
            'digitisation_comment',
            ]


class ConvolutecardsListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Convolutecards._meta.get_field('legacy_id').help_text,
        label=Convolutecards._meta.get_field('legacy_id').verbose_name
    )
    filename_document_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Convolutecards._meta.get_field('filename_document_id').help_text,
        label=Convolutecards._meta.get_field('filename_document_id').verbose_name
    )
    convolute_inventory_number = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Convolutecards._meta.get_field('convolute_inventory_number').help_text,
        label=Convolutecards._meta.get_field('convolute_inventory_number').verbose_name
    )
    convolute_subnumber = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Convolutecards._meta.get_field('convolute_subnumber').help_text,
        label=Convolutecards._meta.get_field('convolute_subnumber').verbose_name
    )
    filename_old = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Convolutecards._meta.get_field('filename_old').help_text,
        label=Convolutecards._meta.get_field('filename_old').verbose_name
    )
    storage_folder_original = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Convolutecards._meta.get_field('storage_folder_original').help_text,
        label=Convolutecards._meta.get_field('storage_folder_original').verbose_name
    )
    month = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Convolutecards._meta.get_field('month').help_text,
        label=Convolutecards._meta.get_field('month').verbose_name
    )
    position = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Convolutecards._meta.get_field('position').help_text,
        label=Convolutecards._meta.get_field('position').verbose_name
    )
    lowest_height_meters_standard_elevation_zero = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Convolutecards._meta.get_field('lowest_height_meters_standard_elevation_zero').help_text,
        label=Convolutecards._meta.get_field('lowest_height_meters_standard_elevation_zero').verbose_name
    )
    maximum_height_meters_standard_elevation_zero = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Convolutecards._meta.get_field('maximum_height_meters_standard_elevation_zero').help_text,
        label=Convolutecards._meta.get_field('maximum_height_meters_standard_elevation_zero').verbose_name
    )
    original_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Convolutecards._meta.get_field('original_comment').help_text,
        label=Convolutecards._meta.get_field('original_comment').verbose_name
    )
    digitisation_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Convolutecards._meta.get_field('digitisation_comment').help_text,
        label=Convolutecards._meta.get_field('digitisation_comment').verbose_name
    )

    class Meta:
        model = Convolutecards
        fields = [
            'id',
            'legacy_id',
            'filename_document_id',
            'convolute_inventory_number',
            'convolute_subnumber',
            'filename_old',
            'document_type',
            'dt_abbr',
            'creation_date_original',
            'creation_year_original',
            'creation_date_scan',
            'file_extension',
            'creation_date_metadata',
            'creator_metadata',
            'creator_original',
            'copyright',
            'access',
            'storage_folder_original',
            'site_id',
            'equipment_scan',
            'source_original_copy_edited_copy',
            'resolution_scan_dpi',
            'creator_scan',
            'original_material',
            'season',
            'month',
            'position',
            'lowest_height_meters_standard_elevation_zero',
            'maximum_height_meters_standard_elevation_zero',
            'excavation_post_excavation',
            'original_comment',
            'digitisation_comment',
            ]


class DatenbaseListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Datenbase._meta.get_field('legacy_id').help_text,
        label=Datenbase._meta.get_field('legacy_id').verbose_name
    )
    filename = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Datenbase._meta.get_field('filename').help_text,
        label=Datenbase._meta.get_field('filename').verbose_name
    )
    document_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Datenbase._meta.get_field('document_id').help_text,
        label=Datenbase._meta.get_field('document_id').verbose_name
    )
    document_title = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Datenbase._meta.get_field('document_title').help_text,
        label=Datenbase._meta.get_field('document_title').verbose_name
    )
    creation_year_original = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Datenbase._meta.get_field('creation_year_original').help_text,
        label=Datenbase._meta.get_field('creation_year_original').verbose_name
    )
    path_filename_old = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Datenbase._meta.get_field('path_filename_old').help_text,
        label=Datenbase._meta.get_field('path_filename_old').verbose_name
    )
    path_filename_arche = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Datenbase._meta.get_field('path_filename_arche').help_text,
        label=Datenbase._meta.get_field('path_filename_arche').verbose_name
    )
    relatedto = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Datenbase._meta.get_field('relatedto').help_text,
        label=Datenbase._meta.get_field('relatedto').verbose_name
    )
    original_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Datenbase._meta.get_field('original_comment').help_text,
        label=Datenbase._meta.get_field('original_comment').verbose_name
    )
    digitisation_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Datenbase._meta.get_field('digitisation_comment').help_text,
        label=Datenbase._meta.get_field('digitisation_comment').verbose_name
    )

    class Meta:
        model = Datenbase
        fields = [
            'id',
            'legacy_id',
            'filename',
            'document_id',
            'document_title',
            'document_type',
            'dt_abbr',
            'document_subtype',
            'dst_abbr',
            'creation_year_original',
            'creation_date_archivalobject',
            'file_extension_original',
            'file_extension_archivalobject',
            'creation_date_metadata',
            'creator_metadata',
            'creator_original',
            'copyright',
            'access',
            'path_filename_old',
            'path_filename_arche',
            'site_id',
            'creator_archivalobject',
            'excavation_object_id',
            'archaeological_object_id',
            'relatedto',
            'find_material',
            'excavation_post_excavation',
            'original_comment',
            'digitisation_comment',
            ]


class Document4DPuzzleIDListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Document4DPuzzleID._meta.get_field('legacy_id').help_text,
        label=Document4DPuzzleID._meta.get_field('legacy_id').verbose_name
    )
    document_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Document4DPuzzleID._meta.get_field('document_id').help_text,
        label=Document4DPuzzleID._meta.get_field('document_id').verbose_name
    )
    original_4dpuzzle_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Document4DPuzzleID._meta.get_field('original_4dpuzzle_id').help_text,
        label=Document4DPuzzleID._meta.get_field('original_4dpuzzle_id').verbose_name
    )
    document_title = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Document4DPuzzleID._meta.get_field('document_title').help_text,
        label=Document4DPuzzleID._meta.get_field('document_title').verbose_name
    )
    digitisation_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Document4DPuzzleID._meta.get_field('digitisation_comment').help_text,
        label=Document4DPuzzleID._meta.get_field('digitisation_comment').verbose_name
    )
    corresponding_to = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Document4DPuzzleID._meta.get_field('corresponding_to').help_text,
        label=Document4DPuzzleID._meta.get_field('corresponding_to').verbose_name
    )

    class Meta:
        model = Document4DPuzzleID
        fields = [
            'id',
            'legacy_id',
            'document_id',
            'original_4dpuzzle_id',
            'document_title',
            'document_type',
            'dt_abbr',
            'document_subtype',
            'dst_abbr',
            'creator_metadata',
            'digitisation_comment',
            'corresponding_to',
            ]


class DocumentTypesListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=DocumentTypes._meta.get_field('legacy_id').help_text,
        label=DocumentTypes._meta.get_field('legacy_id').verbose_name
    )
    document_type = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=DocumentTypes._meta.get_field('document_type').help_text,
        label=DocumentTypes._meta.get_field('document_type').verbose_name
    )
    dt_abbr = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=DocumentTypes._meta.get_field('dt_abbr').help_text,
        label=DocumentTypes._meta.get_field('dt_abbr').verbose_name
    )
    document_subtype = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=DocumentTypes._meta.get_field('document_subtype').help_text,
        label=DocumentTypes._meta.get_field('document_subtype').verbose_name
    )
    ds_abbr = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=DocumentTypes._meta.get_field('ds_abbr').help_text,
        label=DocumentTypes._meta.get_field('ds_abbr').verbose_name
    )
    description = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=DocumentTypes._meta.get_field('description').help_text,
        label=DocumentTypes._meta.get_field('description').verbose_name
    )

    class Meta:
        model = DocumentTypes
        fields = [
            'id',
            'legacy_id',
            'document_type',
            'dt_abbr',
            'document_subtype',
            'ds_abbr',
            'analogue_borndigital',
            'description',
            ]


class ExcavationObjectIDListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ExcavationObjectID._meta.get_field('legacy_id').help_text,
        label=ExcavationObjectID._meta.get_field('legacy_id').verbose_name
    )
    excavation_object_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ExcavationObjectID._meta.get_field('excavation_object_id').help_text,
        label=ExcavationObjectID._meta.get_field('excavation_object_id').verbose_name
    )
    profile_orientation = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ExcavationObjectID._meta.get_field('profile_orientation').help_text,
        label=ExcavationObjectID._meta.get_field('profile_orientation').verbose_name
    )
    digitisation_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ExcavationObjectID._meta.get_field('digitisation_comment').help_text,
        label=ExcavationObjectID._meta.get_field('digitisation_comment').verbose_name
    )

    class Meta:
        model = ExcavationObjectID
        fields = [
            'id',
            'legacy_id',
            'excavation_object_id',
            'excavation_object_type',
            'site_id',
            'area',
            'square_trench',
            'planum',
            'profile_orientation',
            'year',
            'season',
            'part_of_excavation_object_id',
            'creator_metadata',
            'digitisation_comment',
            ]


class ExcavationSeasonsListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ExcavationSeasons._meta.get_field('legacy_id').help_text,
        label=ExcavationSeasons._meta.get_field('legacy_id').verbose_name
    )
    grabungskampagnen = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ExcavationSeasons._meta.get_field('grabungskampagnen').help_text,
        label=ExcavationSeasons._meta.get_field('grabungskampagnen').verbose_name
    )
    year = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ExcavationSeasons._meta.get_field('year').help_text,
        label=ExcavationSeasons._meta.get_field('year').verbose_name
    )

    class Meta:
        model = ExcavationSeasons
        fields = [
            'id',
            'legacy_id',
            'grabungskampagnen',

            'season',
            'year',
            'access',
            ]


class FielddrawingListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fielddrawing._meta.get_field('legacy_id').help_text,
        label=Fielddrawing._meta.get_field('legacy_id').verbose_name
    )
    filename = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fielddrawing._meta.get_field('filename').help_text,
        label=Fielddrawing._meta.get_field('filename').verbose_name
    )
    document_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fielddrawing._meta.get_field('document_id').help_text,
        label=Fielddrawing._meta.get_field('document_id').verbose_name
    )
    document_title = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fielddrawing._meta.get_field('document_title').help_text,
        label=Fielddrawing._meta.get_field('document_title').verbose_name
    )
    storage_folder_original = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fielddrawing._meta.get_field('storage_folder_original').help_text,
        label=Fielddrawing._meta.get_field('storage_folder_original').verbose_name
    )
    original_inventory_number = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fielddrawing._meta.get_field('original_inventory_number').help_text,
        label=Fielddrawing._meta.get_field('original_inventory_number').verbose_name
    )
    find_inventory_number = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fielddrawing._meta.get_field('find_inventory_number').help_text,
        label=Fielddrawing._meta.get_field('find_inventory_number').verbose_name
    )
    amendment_date = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fielddrawing._meta.get_field('amendment_date').help_text,
        label=Fielddrawing._meta.get_field('amendment_date').verbose_name
    )
    stratum_id_relative = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fielddrawing._meta.get_field('stratum_id_relative').help_text,
        label=Fielddrawing._meta.get_field('stratum_id_relative').verbose_name
    )
    stratum_id_absolute_prepub = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fielddrawing._meta.get_field('stratum_id_absolute_prepub').help_text,
        label=Fielddrawing._meta.get_field('stratum_id_absolute_prepub').verbose_name
    )
    stratum_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fielddrawing._meta.get_field('stratum_comment').help_text,
        label=Fielddrawing._meta.get_field('stratum_comment').verbose_name
    )
    month = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fielddrawing._meta.get_field('month').help_text,
        label=Fielddrawing._meta.get_field('month').verbose_name
    )
    scale = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fielddrawing._meta.get_field('scale').help_text,
        label=Fielddrawing._meta.get_field('scale').verbose_name
    )
    original_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fielddrawing._meta.get_field('original_comment').help_text,
        label=Fielddrawing._meta.get_field('original_comment').verbose_name
    )
    digitisation_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fielddrawing._meta.get_field('digitisation_comment').help_text,
        label=Fielddrawing._meta.get_field('digitisation_comment').verbose_name
    )

    class Meta:
        model = Fielddrawing
        fields = [
            'id',
            'legacy_id',
            'filename',
            'document_id',
            'document_title',
            'document_type',
            'dt_abbr',
            'document_subtype',
            'dst_abbr',
            'creation_date_original',
            'creation_year_original',
            'creation_date_scan',
            'file_extension',
            'creation_date_metadata',
            'creator_metadata',
            'creator_original',
            'copyright',
            'access',
            'storage_folder_original',
            'site_id',
            'equipment_scan',
            'source_original_copy_edited_copy',
            'resolution_scan_ppi',
            'creator_scan',
            'original_material',
            'original_inventory_number',
            'find_inventory_number',
            'amendment_drawn_by',
            'amendment_date',
            'drawer_monogram',
            'excavation_object_id',
            'archaeological_object_id',
            'stratum_id_relative',
            'stratum_id_absolute_prepub',
            'stratum_comment',
            'season',
            'month',
            'scale',
            'excavation_post_excavation',
            'original_comment',
            'digitisation_comment',
            ]


class FilmListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Film._meta.get_field('legacy_id').help_text,
        label=Film._meta.get_field('legacy_id').verbose_name
    )
    film_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Film._meta.get_field('film_id').help_text,
        label=Film._meta.get_field('film_id').verbose_name
    )
    addition_film_identifier = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Film._meta.get_field('addition_film_identifier').help_text,
        label=Film._meta.get_field('addition_film_identifier').verbose_name
    )
    contact_print_present = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Film._meta.get_field('contact_print_present').help_text,
        label=Film._meta.get_field('contact_print_present').verbose_name
    )
    enlargements_present = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Film._meta.get_field('enlargements_present').help_text,
        label=Film._meta.get_field('enlargements_present').verbose_name
    )
    foto_numbers_missing = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Film._meta.get_field('foto_numbers_missing').help_text,
        label=Film._meta.get_field('foto_numbers_missing').verbose_name
    )
    decomposition_phenomenon = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Film._meta.get_field('decomposition_phenomenon').help_text,
        label=Film._meta.get_field('decomposition_phenomenon').verbose_name
    )
    acetic_acid_smell = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Film._meta.get_field('acetic_acid_smell').help_text,
        label=Film._meta.get_field('acetic_acid_smell').verbose_name
    )
    storage_folder_original = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Film._meta.get_field('storage_folder_original').help_text,
        label=Film._meta.get_field('storage_folder_original').verbose_name
    )
    original_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Film._meta.get_field('original_comment').help_text,
        label=Film._meta.get_field('original_comment').verbose_name
    )
    digitisation_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Film._meta.get_field('digitisation_comment').help_text,
        label=Film._meta.get_field('digitisation_comment').verbose_name
    )

    class Meta:
        model = Film
        fields = [
            'id',
            'legacy_id',
            'film_id',
            'creation_year_original',
            'film_number',
            'addition_film_identifier',
            'document_type',
            'dt_abbr',
            'document_subtype',
            'dst_abbr',
            'creation_date_metadata',
            'creator_metadata',
            'contact_print_present',
            'enlargements_present',
            'film_format',
            'film_brand',
            'equipment_camera_brand',
            'foto_numbers_missing',
            'decomposition_phenomenon',
            'acetic_acid_smell',
            'original_material',
            'storage_folder_original',
            'original_comment',
            'digitisation_comment',
            ]


class FinddrawingListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Finddrawing._meta.get_field('legacy_id').help_text,
        label=Finddrawing._meta.get_field('legacy_id').verbose_name
    )
    filename = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Finddrawing._meta.get_field('filename').help_text,
        label=Finddrawing._meta.get_field('filename').verbose_name
    )
    document_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Finddrawing._meta.get_field('document_id').help_text,
        label=Finddrawing._meta.get_field('document_id').verbose_name
    )
    document_title = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Finddrawing._meta.get_field('document_title').help_text,
        label=Finddrawing._meta.get_field('document_title').verbose_name
    )
    filename_old = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Finddrawing._meta.get_field('filename_old').help_text,
        label=Finddrawing._meta.get_field('filename_old').verbose_name
    )
    creation_year_original = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Finddrawing._meta.get_field('creation_year_original').help_text,
        label=Finddrawing._meta.get_field('creation_year_original').verbose_name
    )
    storage_folder_original = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Finddrawing._meta.get_field('storage_folder_original').help_text,
        label=Finddrawing._meta.get_field('storage_folder_original').verbose_name
    )
    equipment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Finddrawing._meta.get_field('equipment').help_text,
        label=Finddrawing._meta.get_field('equipment').verbose_name
    )
    rendered_in_ink = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Finddrawing._meta.get_field('rendered_in_ink').help_text,
        label=Finddrawing._meta.get_field('rendered_in_ink').verbose_name
    )
    original_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Finddrawing._meta.get_field('original_comment').help_text,
        label=Finddrawing._meta.get_field('original_comment').verbose_name
    )
    digitisation_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Finddrawing._meta.get_field('digitisation_comment').help_text,
        label=Finddrawing._meta.get_field('digitisation_comment').verbose_name
    )

    class Meta:
        model = Finddrawing
        fields = [
            'id',
            'legacy_id',
            'filename',
            'document_id',
            'document_title',
            'filename_old',
            'document_type',
            'dt_abbr',
            'document_subtype',
            'dst_abbr',
            'creation_date_original',
            'creation_year_original',
            'creation_date_scan',
            'file_extension',
            'creation_date_metadata',
            'creator_metadata',
            'creator_original',
            'copyright',
            'access',
            'storage_folder_original',
            'site_id',
            'equipment',
            'source_original_copy_edited_copy',
            'resolution_scan_dpi',
            'creator_scan',
            'original_material',
            'find_inventory_number',
            'convolute_inventory_number',
            'bone_stone_inventory_number',
            'find_date',
            'rendered_in_ink',
            'excavation_post_excavation',
            'original_comment',
            'digitisation_comment',
            ]


class FindsheetsListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Findsheets._meta.get_field('legacy_id').help_text,
        label=Findsheets._meta.get_field('legacy_id').verbose_name
    )
    filename = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Findsheets._meta.get_field('filename').help_text,
        label=Findsheets._meta.get_field('filename').verbose_name
    )
    document_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Findsheets._meta.get_field('document_id').help_text,
        label=Findsheets._meta.get_field('document_id').verbose_name
    )
    document_title = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Findsheets._meta.get_field('document_title').help_text,
        label=Findsheets._meta.get_field('document_title').verbose_name
    )
    filename_old = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Findsheets._meta.get_field('filename_old').help_text,
        label=Findsheets._meta.get_field('filename_old').verbose_name
    )
    creation_year_original = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Findsheets._meta.get_field('creation_year_original').help_text,
        label=Findsheets._meta.get_field('creation_year_original').verbose_name
    )
    original_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Findsheets._meta.get_field('original_comment').help_text,
        label=Findsheets._meta.get_field('original_comment').verbose_name
    )
    digitisation_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Findsheets._meta.get_field('digitisation_comment').help_text,
        label=Findsheets._meta.get_field('digitisation_comment').verbose_name
    )

    class Meta:
        model = Findsheets
        fields = [
            'id',
            'legacy_id',
            'filename',
            'document_id',
            'document_title',
            'filename_old',
            'document_type',
            'dt_abbr',
            'creation_date_original',
            'creation_year_original',
            'creation_date_scan',
            'file_extension',
            'creation_date_metadata',
            'creator_metadata',
            'creator_original',
            'copyright',
            'access',
            'storage_original',
            'site_id',
            'equipment_scan',
            'source_original_copy_edited_copy',
            'resolution_scan_dpi',
            'creator_scan',
            'original_material',
            'find_inventory_number',
            'convolute_inventory_number',
            'bone_stone_inventory_number',
            'excavation_object_id',
            'archaeological_object_id',
            'excavation_post_excavation',
            'original_comment',
            'digitisation_comment',
            ]


class FotoborndigitalListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fotoborndigital._meta.get_field('legacy_id').help_text,
        label=Fotoborndigital._meta.get_field('legacy_id').verbose_name
    )
    folder_name = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fotoborndigital._meta.get_field('folder_name').help_text,
        label=Fotoborndigital._meta.get_field('folder_name').verbose_name
    )
    folder_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fotoborndigital._meta.get_field('folder_id').help_text,
        label=Fotoborndigital._meta.get_field('folder_id').verbose_name
    )
    folder_title = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fotoborndigital._meta.get_field('folder_title').help_text,
        label=Fotoborndigital._meta.get_field('folder_title').verbose_name
    )
    folder_name_old = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fotoborndigital._meta.get_field('folder_name_old').help_text,
        label=Fotoborndigital._meta.get_field('folder_name_old').verbose_name
    )
    path_filename_old = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fotoborndigital._meta.get_field('path_filename_old').help_text,
        label=Fotoborndigital._meta.get_field('path_filename_old').verbose_name
    )
    path_filename_arche = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fotoborndigital._meta.get_field('path_filename_arche').help_text,
        label=Fotoborndigital._meta.get_field('path_filename_arche').verbose_name
    )
    find_inventory_number_from_to = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fotoborndigital._meta.get_field('find_inventory_number_from_to').help_text,
        label=Fotoborndigital._meta.get_field('find_inventory_number_from_to').verbose_name
    )
    creation_year_original = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fotoborndigital._meta.get_field('creation_year_original').help_text,
        label=Fotoborndigital._meta.get_field('creation_year_original').verbose_name
    )
    original_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fotoborndigital._meta.get_field('original_comment').help_text,
        label=Fotoborndigital._meta.get_field('original_comment').verbose_name
    )
    digitisation_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fotoborndigital._meta.get_field('digitisation_comment').help_text,
        label=Fotoborndigital._meta.get_field('digitisation_comment').verbose_name
    )

    class Meta:
        model = Fotoborndigital
        fields = [
            'id',
            'legacy_id',
            'folder_name',
            'folder_id',
            'folder_title',
            'folder_name_old',
            'path_filename_old',
            'path_filename_arche',
            'document_type',
            'dt_abbr',
            'document_subtype',
            'dst_abbr',
            'creation_date_metadata',
            'creator_metadata',
            'copyright',
            'access',
            'site_id',
            'find_inventory_number_from_to',
            'excavation_object_id',
            'creation_year_original',
            'original_comment',
            'digitisation_comment',
            ]


class FotosgescanntListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fotosgescannt._meta.get_field('legacy_id').help_text,
        label=Fotosgescannt._meta.get_field('legacy_id').verbose_name
    )
    filename = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fotosgescannt._meta.get_field('filename').help_text,
        label=Fotosgescannt._meta.get_field('filename').verbose_name
    )
    document_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fotosgescannt._meta.get_field('document_id').help_text,
        label=Fotosgescannt._meta.get_field('document_id').verbose_name
    )
    document_title = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fotosgescannt._meta.get_field('document_title').help_text,
        label=Fotosgescannt._meta.get_field('document_title').verbose_name
    )
    filename_old = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fotosgescannt._meta.get_field('filename_old').help_text,
        label=Fotosgescannt._meta.get_field('filename_old').verbose_name
    )
    photo_number = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fotosgescannt._meta.get_field('photo_number').help_text,
        label=Fotosgescannt._meta.get_field('photo_number').verbose_name
    )
    creation_year_original = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fotosgescannt._meta.get_field('creation_year_original').help_text,
        label=Fotosgescannt._meta.get_field('creation_year_original').verbose_name
    )
    pixel_size = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fotosgescannt._meta.get_field('pixel_size').help_text,
        label=Fotosgescannt._meta.get_field('pixel_size').verbose_name
    )
    find_inventory_number = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fotosgescannt._meta.get_field('find_inventory_number').help_text,
        label=Fotosgescannt._meta.get_field('find_inventory_number').verbose_name
    )
    season = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fotosgescannt._meta.get_field('season').help_text,
        label=Fotosgescannt._meta.get_field('season').verbose_name
    )
    original_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fotosgescannt._meta.get_field('original_comment').help_text,
        label=Fotosgescannt._meta.get_field('original_comment').verbose_name
    )
    digitisation_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fotosgescannt._meta.get_field('digitisation_comment').help_text,
        label=Fotosgescannt._meta.get_field('digitisation_comment').verbose_name
    )

    class Meta:
        model = Fotosgescannt
        fields = [
            'id',
            'legacy_id',
            'filename',
            'document_id',
            'document_title',
            'filename_old',
            'film_number',
            'photo_number',
            'document_type',
            'dt_abbr',
            'document_subtype',
            'dst_abbreviation',
            'creation_date_original',
            'creation_year_original',
            'creation_date_scan',
            'file_extension',
            'creation_date_metadata',
            'creator_metadata',
            'creator_original',
            'copyright',
            'access',
            'site_id',
            'equipment_scan',
            'source_original_copy_edited_copy',
            'resolution_scan_ppi',
            'creator_scan',
            'pixel_size',
            'film_id',
            'find_inventory_number',
            'excavation_object_id',
            'archaeological_object_id',
            'archaeological_object_type',
            'find_type',
            'find_material',
            'season',
            'excavation_post_excavation',
            'original_comment',
            'digitisation_comment',
            ]


class Fundinventar4DPuzzleIDListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fundinventar4DPuzzleID._meta.get_field('legacy_id').help_text,
        label=Fundinventar4DPuzzleID._meta.get_field('legacy_id').verbose_name
    )
    find_inventory_4dpuzzle_number = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fundinventar4DPuzzleID._meta.get_field('find_inventory_4dpuzzle_number').help_text,
        label=Fundinventar4DPuzzleID._meta.get_field('find_inventory_4dpuzzle_number').verbose_name
    )
    find_local_number = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fundinventar4DPuzzleID._meta.get_field('find_local_number').help_text,
        label=Fundinventar4DPuzzleID._meta.get_field('find_local_number').verbose_name
    )
    convolute_inventory_number = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fundinventar4DPuzzleID._meta.get_field('convolute_inventory_number').help_text,
        label=Fundinventar4DPuzzleID._meta.get_field('convolute_inventory_number').verbose_name
    )
    corresponding_to_inventory_number = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fundinventar4DPuzzleID._meta.get_field('corresponding_to_inventory_number').help_text,
        label=Fundinventar4DPuzzleID._meta.get_field('corresponding_to_inventory_number').verbose_name
    )
    find_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fundinventar4DPuzzleID._meta.get_field('find_comment').help_text,
        label=Fundinventar4DPuzzleID._meta.get_field('find_comment').verbose_name
    )
    stratum_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fundinventar4DPuzzleID._meta.get_field('stratum_comment').help_text,
        label=Fundinventar4DPuzzleID._meta.get_field('stratum_comment').verbose_name
    )
    storage_find = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fundinventar4DPuzzleID._meta.get_field('storage_find').help_text,
        label=Fundinventar4DPuzzleID._meta.get_field('storage_find').verbose_name
    )
    digitisation_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fundinventar4DPuzzleID._meta.get_field('digitisation_comment').help_text,
        label=Fundinventar4DPuzzleID._meta.get_field('digitisation_comment').verbose_name
    )

    class Meta:
        model = Fundinventar4DPuzzleID
        fields = [
            'id',
            'legacy_id',
            'find_inventory_4dpuzzle_number',
            'find_local_number',
            'convolute_inventory_number',
            'corresponding_to_inventory_number',
            'find_material',
            'find_type',
            'find_comment',
            'excavation_object_id',
            'archaeological_object_id',
            'stratum_id_relative',
            'stratum_id_absolute_prepub',
            'stratum_comment',
            'phase_id',
            'find_date',
            'storage_find',
            'access',
            'uncertainty_excavation_digitisation',
            'relatedto',
            'creator_metadata',
            'digitisation_comment',
            ]


class FundinventarInventarnummernListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarInventarnummern._meta.get_field('legacy_id').help_text,
        label=FundinventarInventarnummern._meta.get_field('legacy_id').verbose_name
    )
    find_inventory_number = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarInventarnummern._meta.get_field('find_inventory_number').help_text,
        label=FundinventarInventarnummern._meta.get_field('find_inventory_number').verbose_name
    )
    find_local_number = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarInventarnummern._meta.get_field('find_local_number').help_text,
        label=FundinventarInventarnummern._meta.get_field('find_local_number').verbose_name
    )
    convolute_inventory_number = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarInventarnummern._meta.get_field('convolute_inventory_number').help_text,
        label=FundinventarInventarnummern._meta.get_field('convolute_inventory_number').verbose_name
    )
    find_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarInventarnummern._meta.get_field('find_comment').help_text,
        label=FundinventarInventarnummern._meta.get_field('find_comment').verbose_name
    )
    stratum_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarInventarnummern._meta.get_field('stratum_comment').help_text,
        label=FundinventarInventarnummern._meta.get_field('stratum_comment').verbose_name
    )
    storage_find = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarInventarnummern._meta.get_field('storage_find').help_text,
        label=FundinventarInventarnummern._meta.get_field('storage_find').verbose_name
    )
    digitisation_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarInventarnummern._meta.get_field('digitisation_comment').help_text,
        label=FundinventarInventarnummern._meta.get_field('digitisation_comment').verbose_name
    )

    class Meta:
        model = FundinventarInventarnummern
        fields = [
            'id',
            'legacy_id',
            'find_inventory_number',
            'find_local_number',
            'convolute_inventory_number',
            'corresponding_to_inventory_number',
            'find_material',
            'find_type',
            'find_comment',
            'excavation_object_id',
            'archaeological_object_id',
            'stratum_id_relative',
            'stratum_id_absolute_prepub',
            'stratum_comment',
            'phase_id',
            'find_date',
            'storage_find',
            'access',
            'uncertainty_excavation_digitisation',
            'relatedto',
            'creator_metadata',
            'digitisation_comment',
            ]


class FundinventarKonvolutnummernListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarKonvolutnummern._meta.get_field('legacy_id').help_text,
        label=FundinventarKonvolutnummern._meta.get_field('legacy_id').verbose_name
    )
    convolute_inventory_number = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarKonvolutnummern._meta.get_field('convolute_inventory_number').help_text,
        label=FundinventarKonvolutnummern._meta.get_field('convolute_inventory_number').verbose_name
    )
    convolute_subnumber = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarKonvolutnummern._meta.get_field('convolute_subnumber').help_text,
        label=FundinventarKonvolutnummern._meta.get_field('convolute_subnumber').verbose_name
    )
    find_local_number = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarKonvolutnummern._meta.get_field('find_local_number').help_text,
        label=FundinventarKonvolutnummern._meta.get_field('find_local_number').verbose_name
    )
    corresponding_to_inventory_number = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarKonvolutnummern._meta.get_field('corresponding_to_inventory_number').help_text,
        label=FundinventarKonvolutnummern._meta.get_field('corresponding_to_inventory_number').verbose_name
    )
    find_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarKonvolutnummern._meta.get_field('find_comment').help_text,
        label=FundinventarKonvolutnummern._meta.get_field('find_comment').verbose_name
    )
    stratum_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarKonvolutnummern._meta.get_field('stratum_comment').help_text,
        label=FundinventarKonvolutnummern._meta.get_field('stratum_comment').verbose_name
    )
    relatedto = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarKonvolutnummern._meta.get_field('relatedto').help_text,
        label=FundinventarKonvolutnummern._meta.get_field('relatedto').verbose_name
    )
    digitisation_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarKonvolutnummern._meta.get_field('digitisation_comment').help_text,
        label=FundinventarKonvolutnummern._meta.get_field('digitisation_comment').verbose_name
    )

    class Meta:
        model = FundinventarKonvolutnummern
        fields = [
            'id',
            'legacy_id',
            'convolute_inventory_number',
            'convolute_subnumber',
            'find_local_number',
            'corresponding_to_inventory_number',
            'find_material',
            'find_type',
            'find_comment',
            'excavation_object_id',
            'archaeological_object_id',
            'stratum_id_relative',
            'stratum_id_absolute_prepub',
            'stratum_comment',
            'phase_id',
            'find_date',
            'storage_find',
            'access',
            'uncertainty_excavation_digitisation',
            'relatedto',
            'creator_metadata',
            'digitisation_comment',
            ]


class FundinventarMaterialprobenListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarMaterialproben._meta.get_field('legacy_id').help_text,
        label=FundinventarMaterialproben._meta.get_field('legacy_id').verbose_name
    )
    material_sample_inventory_number = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarMaterialproben._meta.get_field('material_sample_inventory_number').help_text,
        label=FundinventarMaterialproben._meta.get_field('material_sample_inventory_number').verbose_name
    )
    find_local_number = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarMaterialproben._meta.get_field('find_local_number').help_text,
        label=FundinventarMaterialproben._meta.get_field('find_local_number').verbose_name
    )
    convolute_inventory_number = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarMaterialproben._meta.get_field('convolute_inventory_number').help_text,
        label=FundinventarMaterialproben._meta.get_field('convolute_inventory_number').verbose_name
    )
    corresponding_to_inventory_number = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarMaterialproben._meta.get_field('corresponding_to_inventory_number').help_text,
        label=FundinventarMaterialproben._meta.get_field('corresponding_to_inventory_number').verbose_name
    )
    find_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarMaterialproben._meta.get_field('find_comment').help_text,
        label=FundinventarMaterialproben._meta.get_field('find_comment').verbose_name
    )
    stratum_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarMaterialproben._meta.get_field('stratum_comment').help_text,
        label=FundinventarMaterialproben._meta.get_field('stratum_comment').verbose_name
    )
    digitisation_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarMaterialproben._meta.get_field('digitisation_comment').help_text,
        label=FundinventarMaterialproben._meta.get_field('digitisation_comment').verbose_name
    )

    class Meta:
        model = FundinventarMaterialproben
        fields = [
            'id',
            'legacy_id',
            'material_sample_inventory_number',
            'find_local_number',
            'convolute_inventory_number',
            'corresponding_to_inventory_number',
            'find_material',
            'find_type',
            'find_comment',
            'excavation_object_id',
            'archaeological_object_id',
            'stratum_id_relative',
            'stratum_id_absolute_prepub',
            'stratum_comment',
            'phase_id',
            'find_year',
            'storage_find',
            'access',
            'uncertainty_excavation_digitisation',
            'relatedto',
            'creator_metadata',
            'digitisation_comment',
            ]


class FundinventarSteininventarListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarSteininventar._meta.get_field('legacy_id').help_text,
        label=FundinventarSteininventar._meta.get_field('legacy_id').verbose_name
    )
    find_inventory_number = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarSteininventar._meta.get_field('find_inventory_number').help_text,
        label=FundinventarSteininventar._meta.get_field('find_inventory_number').verbose_name
    )
    find_local_number = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarSteininventar._meta.get_field('find_local_number').help_text,
        label=FundinventarSteininventar._meta.get_field('find_local_number').verbose_name
    )
    convolute_inventory_number = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarSteininventar._meta.get_field('convolute_inventory_number').help_text,
        label=FundinventarSteininventar._meta.get_field('convolute_inventory_number').verbose_name
    )
    corresponding_to_inventory_number = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarSteininventar._meta.get_field('corresponding_to_inventory_number').help_text,
        label=FundinventarSteininventar._meta.get_field('corresponding_to_inventory_number').verbose_name
    )
    find_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarSteininventar._meta.get_field('find_comment').help_text,
        label=FundinventarSteininventar._meta.get_field('find_comment').verbose_name
    )
    stratum_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarSteininventar._meta.get_field('stratum_comment').help_text,
        label=FundinventarSteininventar._meta.get_field('stratum_comment').verbose_name
    )
    digitisation_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=FundinventarSteininventar._meta.get_field('digitisation_comment').help_text,
        label=FundinventarSteininventar._meta.get_field('digitisation_comment').verbose_name
    )

    class Meta:
        model = FundinventarSteininventar
        fields = [
            'id',
            'legacy_id',
            'find_inventory_number',
            'find_local_number',
            'convolute_inventory_number',
            'corresponding_to_inventory_number',
            'find_material',
            'find_type',
            'find_comment',
            'excavation_object_id',
            'archaeological_object_id',
            'stratum_id_relative',
            'stratum_id_absolute_prepub',
            'stratum_comment',
            'phase_id',
            'find_date',
            'access',
            'storage_find',
            'uncertainty_excavation_digitisation',
            'relatedto',
            'creator_metadata',
            'digitisation_comment',
            ]


class GISListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=GIS._meta.get_field('legacy_id').help_text,
        label=GIS._meta.get_field('legacy_id').verbose_name
    )
    filename = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=GIS._meta.get_field('filename').help_text,
        label=GIS._meta.get_field('filename').verbose_name
    )
    document_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=GIS._meta.get_field('document_id').help_text,
        label=GIS._meta.get_field('document_id').verbose_name
    )
    document_title = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=GIS._meta.get_field('document_title').help_text,
        label=GIS._meta.get_field('document_title').verbose_name
    )
    path_filename_old = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=GIS._meta.get_field('path_filename_old').help_text,
        label=GIS._meta.get_field('path_filename_old').verbose_name
    )
    path_filename_arche = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=GIS._meta.get_field('path_filename_arche').help_text,
        label=GIS._meta.get_field('path_filename_arche').verbose_name
    )
    software_used = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=GIS._meta.get_field('software_used').help_text,
        label=GIS._meta.get_field('software_used').verbose_name
    )
    original_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=GIS._meta.get_field('original_comment').help_text,
        label=GIS._meta.get_field('original_comment').verbose_name
    )
    digitisation_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=GIS._meta.get_field('digitisation_comment').help_text,
        label=GIS._meta.get_field('digitisation_comment').verbose_name
    )

    class Meta:
        model = GIS
        fields = [
            'id',
            'legacy_id',
            'filename',
            'document_id',
            'document_title',
            'path_filename_old',
            'path_filename_arche',
            'document_type',
            'dt_abbr',
            'document_subtype',
            'dst_abbr',
            'creation_date_original',
            'software_used',
            'creation_date_archivalobject',
            'file_extension_original',
            'file_extension_archivalobject',
            'creation_date_metadata',
            'creator_metadata',
            'creator_original',
            'copyright',
            'access',
            'site_id',
            'creator_archivalobject',
            'excavation_object_id',
            'archaeological_object_id',
            'relatedto',
            'excavation_post_excavation',
            'original_comment',
            'digitisation_comment',
            ]


class GeophysicsListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Geophysics._meta.get_field('legacy_id').help_text,
        label=Geophysics._meta.get_field('legacy_id').verbose_name
    )
    filename = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Geophysics._meta.get_field('filename').help_text,
        label=Geophysics._meta.get_field('filename').verbose_name
    )
    document_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Geophysics._meta.get_field('document_id').help_text,
        label=Geophysics._meta.get_field('document_id').verbose_name
    )
    document_title = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Geophysics._meta.get_field('document_title').help_text,
        label=Geophysics._meta.get_field('document_title').verbose_name
    )
    filename_old = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Geophysics._meta.get_field('filename_old').help_text,
        label=Geophysics._meta.get_field('filename_old').verbose_name
    )
    path_filename_old = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Geophysics._meta.get_field('path_filename_old').help_text,
        label=Geophysics._meta.get_field('path_filename_old').verbose_name
    )
    original_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Geophysics._meta.get_field('original_comment').help_text,
        label=Geophysics._meta.get_field('original_comment').verbose_name
    )
    digitisation_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Geophysics._meta.get_field('digitisation_comment').help_text,
        label=Geophysics._meta.get_field('digitisation_comment').verbose_name
    )

    class Meta:
        model = Geophysics
        fields = [
            'id',
            'legacy_id',
            'filename',
            'document_id',
            'document_title',
            'filename_old',
            'document_type',
            'dt_abbr',
            'document_subtype',
            'dst_abbr',
            'creation_date_original',
            'creation_date_archivalobject',
            'file_extension_original',
            'file_extension_archivalobject',
            'method',
            'equipment',
            'creation_date_metadata',
            'creator_metadata',
            'creator_original',
            'copyright',
            'access',
            'path_filename_old',
            'site_id',
            'creator_archivalobject',
            'excavation_object_id',
            'excavation_post_excavation',
            'original_comment',
            'digitisation_comment',
            ]


class InventorybooksListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Inventorybooks._meta.get_field('legacy_id').help_text,
        label=Inventorybooks._meta.get_field('legacy_id').verbose_name
    )
    filename = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Inventorybooks._meta.get_field('filename').help_text,
        label=Inventorybooks._meta.get_field('filename').verbose_name
    )
    document_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Inventorybooks._meta.get_field('document_id').help_text,
        label=Inventorybooks._meta.get_field('document_id').verbose_name
    )
    document_title = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Inventorybooks._meta.get_field('document_title').help_text,
        label=Inventorybooks._meta.get_field('document_title').verbose_name
    )
    filename_old = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Inventorybooks._meta.get_field('filename_old').help_text,
        label=Inventorybooks._meta.get_field('filename_old').verbose_name
    )
    creation_year_original = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Inventorybooks._meta.get_field('creation_year_original').help_text,
        label=Inventorybooks._meta.get_field('creation_year_original').verbose_name
    )
    storage_folder_original = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Inventorybooks._meta.get_field('storage_folder_original').help_text,
        label=Inventorybooks._meta.get_field('storage_folder_original').verbose_name
    )
    original_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Inventorybooks._meta.get_field('original_comment').help_text,
        label=Inventorybooks._meta.get_field('original_comment').verbose_name
    )

    class Meta:
        model = Inventorybooks
        fields = [
            'id',
            'legacy_id',
            'filename',
            'document_id',
            'document_title',
            'filename_old',
            'document_type',
            'dt_abbr',
            'creation_date_original',
            'creation_year_original',
            'creation_date_scan',
            'file_extension',
            'creation_date_metadata',
            'creator_metadata',
            'creator_original',
            'copyright',
            'access',
            'storage_folder_original',
            'site_id',
            'equipment_scan',
            'source_original_copy_edited_copy',
            'resolution_scan_dpi',
            'creator_scan',
            'original_material',
            'find_inventory_number',
            'convolute_inventory_number',
            'bone_stone_inventory_number',
            'excavation_post_excavation',
            'original_comment',
            ]


class PhasenIDListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=PhasenID._meta.get_field('legacy_id').help_text,
        label=PhasenID._meta.get_field('legacy_id').verbose_name
    )
    phase_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=PhasenID._meta.get_field('phase_id').help_text,
        label=PhasenID._meta.get_field('phase_id').verbose_name
    )
    phase_title = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=PhasenID._meta.get_field('phase_title').help_text,
        label=PhasenID._meta.get_field('phase_title').verbose_name
    )

    class Meta:
        model = PhasenID
        fields = [
            'id',
            'legacy_id',
            'phase_id',
            'phase_title',
            'phase_type',
            'site_id',
            'area',
            'containing_phase_id',
            ]


class ProtocolsListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Protocols._meta.get_field('legacy_id').help_text,
        label=Protocols._meta.get_field('legacy_id').verbose_name
    )
    filename = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Protocols._meta.get_field('filename').help_text,
        label=Protocols._meta.get_field('filename').verbose_name
    )
    document_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Protocols._meta.get_field('document_id').help_text,
        label=Protocols._meta.get_field('document_id').verbose_name
    )
    document_title = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Protocols._meta.get_field('document_title').help_text,
        label=Protocols._meta.get_field('document_title').verbose_name
    )
    filename_old = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Protocols._meta.get_field('filename_old').help_text,
        label=Protocols._meta.get_field('filename_old').verbose_name
    )
    creation_year_original = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Protocols._meta.get_field('creation_year_original').help_text,
        label=Protocols._meta.get_field('creation_year_original').verbose_name
    )
    storage_folder_original = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Protocols._meta.get_field('storage_folder_original').help_text,
        label=Protocols._meta.get_field('storage_folder_original').verbose_name
    )
    original_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Protocols._meta.get_field('original_comment').help_text,
        label=Protocols._meta.get_field('original_comment').verbose_name
    )
    digitisation_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Protocols._meta.get_field('digitisation_comment').help_text,
        label=Protocols._meta.get_field('digitisation_comment').verbose_name
    )

    class Meta:
        model = Protocols
        fields = [
            'id',
            'legacy_id',
            'filename',
            'document_id',
            'document_title',
            'filename_old',
            'document_type',
            'dt_abbr',
            'creation_date_original',
            'creation_year_original',
            'creation_date_scan',
            'file_extension',
            'creation_date_metadata',
            'creator_metadata',
            'creator_original',
            'copyright',
            'access',
            'storage_folder_original',
            'storage',
            'site_id',
            'equipment_scan',
            'source_original_copy_edited_copy',
            'resolution_scan_dpi',
            'creator_scan',
            'original_material',
            'excavation_object_id',
            'archaeological_object_id',
            'number_of_pages',
            'excavation_post_excavation',
            'original_comment',
            'digitisation_comment',
            ]


class StratenIDListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=StratenID._meta.get_field('legacy_id').help_text,
        label=StratenID._meta.get_field('legacy_id').verbose_name
    )
    stratum_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=StratenID._meta.get_field('stratum_id').help_text,
        label=StratenID._meta.get_field('stratum_id').verbose_name
    )
    stratum_title = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=StratenID._meta.get_field('stratum_title').help_text,
        label=StratenID._meta.get_field('stratum_title').verbose_name
    )

    class Meta:
        model = StratenID
        fields = [
            'id',
            'legacy_id',
            'stratum_id',
            'stratum_title',
            'stratum_type',
            'site_id',
            'area',
            'containing_stratum_id',
            ]


class TablesListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Tables._meta.get_field('legacy_id').help_text,
        label=Tables._meta.get_field('legacy_id').verbose_name
    )
    filename = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Tables._meta.get_field('filename').help_text,
        label=Tables._meta.get_field('filename').verbose_name
    )
    document_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Tables._meta.get_field('document_id').help_text,
        label=Tables._meta.get_field('document_id').verbose_name
    )
    document_title = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Tables._meta.get_field('document_title').help_text,
        label=Tables._meta.get_field('document_title').verbose_name
    )
    path_filename_old = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Tables._meta.get_field('path_filename_old').help_text,
        label=Tables._meta.get_field('path_filename_old').verbose_name
    )
    creation_year_original = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Tables._meta.get_field('creation_year_original').help_text,
        label=Tables._meta.get_field('creation_year_original').verbose_name
    )
    folder_original = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Tables._meta.get_field('folder_original').help_text,
        label=Tables._meta.get_field('folder_original').verbose_name
    )
    original_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Tables._meta.get_field('original_comment').help_text,
        label=Tables._meta.get_field('original_comment').verbose_name
    )
    digitisation_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Tables._meta.get_field('digitisation_comment').help_text,
        label=Tables._meta.get_field('digitisation_comment').verbose_name
    )

    class Meta:
        model = Tables
        fields = [
            'id',
            'legacy_id',
            'filename',
            'document_id',
            'document_title',
            'path_filename_old',
            'document_type',
            'dt_abbr',
            'document_subtype',
            'dst_abbr',
            'creation_year_original',
            'creation_date_archivalobject',
            'file_extension_original',
            'file_extension_archivalobject',
            'creation_date_metadata',
            'creator_metadata',
            'creator_original',
            'copyright',
            'access',
            'folder_original',
            'site_id',
            'creator_archivalobject',
            'excavation_object_id',
            'archaeological_object_id',
            'relatedto',
            'excavation_post_excavation',
            'original_comment',
            'digitisation_comment',
            ]


class ThreeDimensionalModelListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreeDimensionalModel._meta.get_field('legacy_id').help_text,
        label=ThreeDimensionalModel._meta.get_field('legacy_id').verbose_name
    )
    filename = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreeDimensionalModel._meta.get_field('filename').help_text,
        label=ThreeDimensionalModel._meta.get_field('filename').verbose_name
    )
    document_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreeDimensionalModel._meta.get_field('document_id').help_text,
        label=ThreeDimensionalModel._meta.get_field('document_id').verbose_name
    )
    document_title = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreeDimensionalModel._meta.get_field('document_title').help_text,
        label=ThreeDimensionalModel._meta.get_field('document_title').verbose_name
    )
    path_filename_old = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreeDimensionalModel._meta.get_field('path_filename_old').help_text,
        label=ThreeDimensionalModel._meta.get_field('path_filename_old').verbose_name
    )
    creation_year_original = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreeDimensionalModel._meta.get_field('creation_year_original').help_text,
        label=ThreeDimensionalModel._meta.get_field('creation_year_original').verbose_name
    )
    software_used = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreeDimensionalModel._meta.get_field('software_used').help_text,
        label=ThreeDimensionalModel._meta.get_field('software_used').verbose_name
    )
    relatedto = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreeDimensionalModel._meta.get_field('relatedto').help_text,
        label=ThreeDimensionalModel._meta.get_field('relatedto').verbose_name
    )
    original_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreeDimensionalModel._meta.get_field('original_comment').help_text,
        label=ThreeDimensionalModel._meta.get_field('original_comment').verbose_name
    )
    digitisation_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreeDimensionalModel._meta.get_field('digitisation_comment').help_text,
        label=ThreeDimensionalModel._meta.get_field('digitisation_comment').verbose_name
    )

    class Meta:
        model = ThreeDimensionalModel
        fields = [
            'id',
            'legacy_id',
            'filename',
            'document_id',
            'document_title',
            'path_filename_old',
            'document_type',
            'dt_abbr',
            'document_subtype',
            'dst_abbr',
            'creation_year_original',
            'software_used',
            'creation_date_archivalobject',
            'file_extension_original',
            'file_extension_archivalobject',
            'creation_date_metadata',
            'creator_metadata',
            'creator_original',
            'copyright',
            'access',
            'site_id',
            'creator_archivalobject',
            'excavation_object_id',
            'archaeological_object_id',
            'relatedto',
            'excavation_post_excavation',
            'original_comment',
            'digitisation_comment',
            ]


class VideosListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Videos._meta.get_field('legacy_id').help_text,
        label=Videos._meta.get_field('legacy_id').verbose_name
    )
    filename = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Videos._meta.get_field('filename').help_text,
        label=Videos._meta.get_field('filename').verbose_name
    )
    document_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Videos._meta.get_field('document_id').help_text,
        label=Videos._meta.get_field('document_id').verbose_name
    )
    document_title = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Videos._meta.get_field('document_title').help_text,
        label=Videos._meta.get_field('document_title').verbose_name
    )
    path_filename_old = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Videos._meta.get_field('path_filename_old').help_text,
        label=Videos._meta.get_field('path_filename_old').verbose_name
    )
    path_filename_arche = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Videos._meta.get_field('path_filename_arche').help_text,
        label=Videos._meta.get_field('path_filename_arche').verbose_name
    )
    original_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Videos._meta.get_field('original_comment').help_text,
        label=Videos._meta.get_field('original_comment').verbose_name
    )
    digitisation_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Videos._meta.get_field('digitisation_comment').help_text,
        label=Videos._meta.get_field('digitisation_comment').verbose_name
    )

    class Meta:
        model = Videos
        fields = [
            'id',
            'legacy_id',
            'filename',
            'document_id',
            'document_title',
            'document_type',
            'dt_abbr',
            'document_subtype',
            'dst_abbr',
            'creation_date_original',
            'creation_date_archivalobject',
            'file_extension_original',
            'file_extension_archivalobject',
            'creation_date_metadata',
            'creator_metadata',
            'creator_original',
            'creator_archivalobject',
            'copyright',
            'access',
            'path_filename_old',
            'path_filename_arche',
            'site_id',
            'find_inventory_number',
            'excavation_object_id',
            'archaeological_object_id',
            'original_comment',
            'digitisation_comment',
            ]


class WallpaintingInventoryListFilter(django_filters.FilterSet):
    legacy_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=WallpaintingInventory._meta.get_field('legacy_id').help_text,
        label=WallpaintingInventory._meta.get_field('legacy_id').verbose_name
    )
    filename = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=WallpaintingInventory._meta.get_field('filename').help_text,
        label=WallpaintingInventory._meta.get_field('filename').verbose_name
    )
    document_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=WallpaintingInventory._meta.get_field('document_id').help_text,
        label=WallpaintingInventory._meta.get_field('document_id').verbose_name
    )
    document_title = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=WallpaintingInventory._meta.get_field('document_title').help_text,
        label=WallpaintingInventory._meta.get_field('document_title').verbose_name
    )
    filename_old = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=WallpaintingInventory._meta.get_field('filename_old').help_text,
        label=WallpaintingInventory._meta.get_field('filename_old').verbose_name
    )
    creation_year_original = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=WallpaintingInventory._meta.get_field('creation_year_original').help_text,
        label=WallpaintingInventory._meta.get_field('creation_year_original').verbose_name
    )
    storage_folder_original = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=WallpaintingInventory._meta.get_field('storage_folder_original').help_text,
        label=WallpaintingInventory._meta.get_field('storage_folder_original').verbose_name
    )
    fresco_inventory_number = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=WallpaintingInventory._meta.get_field('fresco_inventory_number').help_text,
        label=WallpaintingInventory._meta.get_field('fresco_inventory_number').verbose_name
    )
    original_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=WallpaintingInventory._meta.get_field('original_comment').help_text,
        label=WallpaintingInventory._meta.get_field('original_comment').verbose_name
    )
    digitisation_comment = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=WallpaintingInventory._meta.get_field('digitisation_comment').help_text,
        label=WallpaintingInventory._meta.get_field('digitisation_comment').verbose_name
    )

    class Meta:
        model = WallpaintingInventory
        fields = [
            'id',
            'legacy_id',
            'filename',
            'document_id',
            'document_title',
            'filename_old',
            'document_type',
            'dt_abbr',
            'creation_date_original',
            'creation_year_original',
            'creation_date_scan',
            'file_extension',
            'creation_date_metadata',
            'creator_metadata',
            'creator_original',
            'copyright',
            'access',
            'storage_folder_original',
            'site_id',
            'equipment_scan',
            'source_original_copy_edited_copy',
            'resolution_scan_dpi',
            'creator_scan',
            'original_material',
            'fresco_inventory_number',
            'excavation_post_excavation',
            'original_comment',
            'digitisation_comment',
            ]
